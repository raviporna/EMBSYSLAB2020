
Lab3-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e38  08004e38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004594  20000010  08004e50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045a4  08004e50  000245a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f80b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002599  00000000  00000000  0002f84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  00031de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  00032a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000166d5  00000000  00000000  000335d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a621  00000000  00000000  00049ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d362  00000000  00000000  000542c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003244  00000000  00000000  000e16a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dbc 	.word	0x08004dbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004dbc 	.word	0x08004dbc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetTimerTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetTimerTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000532:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	20000280 	.word	0x20000280
 8000544:	200002d4 	.word	0x200002d4

08000548 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800054e:	f000 fa73 	bl	8000a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000552:	f000 f81d 	bl	8000590 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000556:	f000 f8af 	bl	80006b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800055a:	f000 f883 	bl	8000664 <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <main+0x40>)
 8000560:	1d3c      	adds	r4, r7, #4
 8000562:	461d      	mov	r5, r3
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f001 feac 	bl	80022d2 <osThreadCreate>
 800057a:	4602      	mov	r2, r0
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <main+0x44>)
 800057e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000580:	f001 fea0 	bl	80022c4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000584:	e7fe      	b.n	8000584 <main+0x3c>
 8000586:	bf00      	nop
 8000588:	08004de0 	.word	0x08004de0
 800058c:	2000451c 	.word	0x2000451c

08000590 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fc03 	bl	8004daa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000600:	2310      	movs	r3, #16
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060a:	2304      	movs	r3, #4
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800060e:	2304      	movs	r3, #4
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fd1c 	bl	8001054 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
		Error_Handler();
 8000622:	f000 f92d 	bl	8000880 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 ff76 	bl	8001534 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc2>
		Error_Handler();
 800064e:	f000 f917 	bl	8000880 <Error_Handler>
	}
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 f93c 	bl	8001918 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80006a6:	f000 f8eb 	bl	8000880 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20004520 	.word	0x20004520
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd4>)
 8000744:	f000 fc52 	bl	8000fec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000750:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_GPIO_Init+0xdc>)
 800075e:	f000 fac3 	bl	8000ce8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000762:	2320      	movs	r3, #32
 8000764:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
 800077a:	f000 fab5 	bl	8000ce8 <HAL_GPIO_Init>

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	10210000 	.word	0x10210000
 8000794:	40020800 	.word	0x40020800

08000798 <t1_thread>:

/* USER CODE BEGIN 4 */

void t1_thread(void const *args) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	char c = 'A';
 80007a0:	2341      	movs	r3, #65	; 0x41
 80007a2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 50);
 80007a4:	f107 010f 	add.w	r1, r7, #15
 80007a8:	2332      	movs	r3, #50	; 0x32
 80007aa:	2201      	movs	r2, #1
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <t1_thread+0x24>)
 80007ae:	f001 f900 	bl	80019b2 <HAL_UART_Transmit>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20004520 	.word	0x20004520

080007c0 <t2_thread>:
void t2_thread(void const *args) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007c8:	2120      	movs	r1, #32
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <t2_thread+0x18>)
 80007cc:	f000 fc27 	bl	800101e <HAL_GPIO_TogglePin>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40020000 	.word	0x40020000

080007dc <t3_thread>:
void t3_thread(void const *args) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	char c = 'B';
 80007e4:	2342      	movs	r3, #66	; 0x42
 80007e6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 128);
 80007e8:	f107 010f 	add.w	r1, r7, #15
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	2201      	movs	r2, #1
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <t3_thread+0x24>)
 80007f2:	f001 f8de 	bl	80019b2 <HAL_UART_Transmit>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20004520 	.word	0x20004520

08000804 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	osTimerDef(t1, t1_thread);
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <StartDefaultTask+0x70>)
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
	osTimerId osTimer1 = osTimerCreate(osTimer(t1), osTimerPeriodic,
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fdb9 	bl	8002394 <osTimerCreate>
 8000822:	62f8      	str	r0, [r7, #44]	; 0x2c
	NULL);
	osTimerDef(t2, t2_thread);
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <StartDefaultTask+0x74>)
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
	osTimerId osTimer2 = osTimerCreate(osTimer(t2), osTimerPeriodic,
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fdad 	bl	8002394 <osTimerCreate>
 800083a:	62b8      	str	r0, [r7, #40]	; 0x28
	NULL);
	osTimerDef(t3, t3_thread);
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <StartDefaultTask+0x78>)
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
	osTimerId osTimer3 = osTimerCreate(osTimer(t3), osTimerPeriodic,
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fda1 	bl	8002394 <osTimerCreate>
 8000852:	6278      	str	r0, [r7, #36]	; 0x24
	NULL);
	osTimerStart(osTimer1,50);
 8000854:	2132      	movs	r1, #50	; 0x32
 8000856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000858:	f001 fdd0 	bl	80023fc <osTimerStart>
	osTimerStart(osTimer2,18);
 800085c:	2112      	movs	r1, #18
 800085e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000860:	f001 fdcc 	bl	80023fc <osTimerStart>
	osTimerStart(osTimer3,128);
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000868:	f001 fdc8 	bl	80023fc <osTimerStart>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f001 fd7c 	bl	800236a <osDelay>
 8000872:	e7fb      	b.n	800086c <StartDefaultTask+0x68>
 8000874:	08000799 	.word	0x08000799
 8000878:	080007c1 	.word	0x080007c1
 800087c:	080007dd 	.word	0x080007dd

08000880 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000886:	e7fe      	b.n	8000886 <Error_Handler+0x6>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_MspInit+0x54>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a11      	ldr	r2, [pc, #68]	; (80008dc <HAL_MspInit+0x54>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x54>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_MspInit+0x54>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_MspInit+0x54>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_MspInit+0x54>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	210f      	movs	r1, #15
 80008ca:	f06f 0001 	mvn.w	r0, #1
 80008ce:	f000 f9e2 	bl	8000c96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_UART_MspInit+0x84>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12b      	bne.n	800095a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x88>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093a:	230c      	movs	r3, #12
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094a:	2307      	movs	r3, #7
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x8c>)
 8000956:	f000 f9c7 	bl	8000ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f89c 	bl	8000adc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009a4:	f003 f8ec 	bl	8003b80 <xTaskGetSchedulerState>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d001      	beq.n	80009b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ae:	f003 ff6b 	bl	8004888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <SystemInit+0x28>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <SystemInit+0x28>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SystemInit+0x28>)
 80009ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d2:	609a      	str	r2, [r3, #8]
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ea:	e003      	b.n	80009f4 <LoopCopyDataInit>

080009ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009f2:	3104      	adds	r1, #4

080009f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009fc:	d3f6      	bcc.n	80009ec <CopyDataInit>
  ldr  r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a00:	e002      	b.n	8000a08 <LoopFillZerobss>

08000a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a04:	f842 3b04 	str.w	r3, [r2], #4

08000a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a0c:	d3f9      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd3 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f004 f99b 	bl	8004d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd97 	bl	8000548 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a20:	08004e40 	.word	0x08004e40
  ldr  r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a28:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a2c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a30:	200045a4 	.word	0x200045a4

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f90d 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff ff0c 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f917 	bl	8000cce <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f8ed 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20004560 	.word	0x20004560

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20004560 	.word	0x20004560

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff5c 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffb0 	bl	8000c3c <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e159      	b.n	8000fb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8148 	bne.w	8000fb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d00b      	beq.n	8000d42 <HAL_GPIO_Init+0x5a>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d36:	2b11      	cmp	r3, #17
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d130      	bne.n	8000da4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	f003 0201 	and.w	r2, r3, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0xfc>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b12      	cmp	r3, #18
 8000de2:	d123      	bne.n	8000e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	69b9      	ldr	r1, [r7, #24]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0203 	and.w	r2, r3, #3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80a2 	beq.w	8000fb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <HAL_GPIO_Init+0x2e4>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <HAL_GPIO_Init+0x2e8>)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d019      	beq.n	8000eea <HAL_GPIO_Init+0x202>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a47      	ldr	r2, [pc, #284]	; (8000fd8 <HAL_GPIO_Init+0x2f0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0x1fe>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <HAL_GPIO_Init+0x2f4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_GPIO_Init+0x1fa>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a45      	ldr	r2, [pc, #276]	; (8000fe0 <HAL_GPIO_Init+0x2f8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d007      	beq.n	8000ede <HAL_GPIO_Init+0x1f6>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HAL_GPIO_Init+0x2fc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_GPIO_Init+0x1f2>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e008      	b.n	8000eec <HAL_GPIO_Init+0x204>
 8000eda:	2307      	movs	r3, #7
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x204>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x204>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x204>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x204>
 8000eea:	2300      	movs	r3, #0
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	f002 0203 	and.w	r2, r2, #3
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000efc:	4934      	ldr	r1, [pc, #208]	; (8000fd0 <HAL_GPIO_Init+0x2e8>)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2e:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f58:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	f67f aea2 	bls.w	8000d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3724      	adds	r7, #36	; 0x24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	401a      	ands	r2, r3
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	429a      	cmp	r2, r3
 8001036:	d104      	bne.n	8001042 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	041a      	lsls	r2, r3, #16
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001040:	e002      	b.n	8001048 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e25b      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d075      	beq.n	800115e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001072:	4ba3      	ldr	r3, [pc, #652]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b04      	cmp	r3, #4
 800107c:	d00c      	beq.n	8001098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107e:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001086:	2b08      	cmp	r3, #8
 8001088:	d112      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b9d      	ldr	r3, [pc, #628]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001096:	d10b      	bne.n	80010b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	4b99      	ldr	r3, [pc, #612]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d05b      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d157      	bne.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e236      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x74>
 80010ba:	4b91      	ldr	r3, [pc, #580]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a90      	ldr	r2, [pc, #576]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e01d      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x98>
 80010d2:	4b8b      	ldr	r3, [pc, #556]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a8a      	ldr	r2, [pc, #552]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b88      	ldr	r3, [pc, #544]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a87      	ldr	r2, [pc, #540]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0xb0>
 80010ec:	4b84      	ldr	r3, [pc, #528]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a83      	ldr	r2, [pc, #524]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b81      	ldr	r3, [pc, #516]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a80      	ldr	r2, [pc, #512]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fcfa 	bl	8000b04 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcf6 	bl	8000b04 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1fb      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0xc0>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fce6 	bl	8000b04 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fce2 	bl	8000b04 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1e7      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0xe8>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d063      	beq.n	8001232 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116a:	4b65      	ldr	r3, [pc, #404]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001176:	4b62      	ldr	r3, [pc, #392]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117e:	2b08      	cmp	r3, #8
 8001180:	d11c      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d116      	bne.n	80011bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	4b5c      	ldr	r3, [pc, #368]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1bb      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b56      	ldr	r3, [pc, #344]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4952      	ldr	r1, [pc, #328]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	e03a      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <HAL_RCC_OscConfig+0x2b0>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc9b 	bl	8000b04 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc97 	bl	8000b04 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e19c      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	4b46      	ldr	r3, [pc, #280]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b43      	ldr	r3, [pc, #268]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4940      	ldr	r1, [pc, #256]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001206:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <HAL_RCC_OscConfig+0x2b0>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fc7a 	bl	8000b04 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fc76 	bl	8000b04 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e17b      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d030      	beq.n	80012a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d016      	beq.n	8001274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_RCC_OscConfig+0x2b4>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fc5a 	bl	8000b04 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fc56 	bl	8000b04 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e15b      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x200>
 8001272:	e015      	b.n	80012a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_OscConfig+0x2b4>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fc43 	bl	8000b04 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001282:	f7ff fc3f 	bl	8000b04 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e144      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 8001296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a0 	beq.w	80013ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10f      	bne.n	80012de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x2b8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d121      	bne.n	800132e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_RCC_OscConfig+0x2b8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_RCC_OscConfig+0x2b8>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fc05 	bl	8000b04 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	e011      	b.n	8001322 <HAL_RCC_OscConfig+0x2ce>
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	42470000 	.word	0x42470000
 8001308:	42470e80 	.word	0x42470e80
 800130c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001310:	f7ff fbf8 	bl	8000b04 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0fd      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_RCC_OscConfig+0x4d4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x2f0>
 8001336:	4b7d      	ldr	r3, [pc, #500]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a7c      	ldr	r2, [pc, #496]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	e01c      	b.n	800137e <HAL_RCC_OscConfig+0x32a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x312>
 800134c:	4b77      	ldr	r3, [pc, #476]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a76      	ldr	r2, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	4b74      	ldr	r3, [pc, #464]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	4a73      	ldr	r2, [pc, #460]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6713      	str	r3, [r2, #112]	; 0x70
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x32a>
 8001366:	4b71      	ldr	r3, [pc, #452]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a70      	ldr	r2, [pc, #448]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	4b6e      	ldr	r3, [pc, #440]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	4a6d      	ldr	r2, [pc, #436]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fbbd 	bl	8000b04 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fbb9 	bl	8000b04 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	; 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0bc      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	4b61      	ldr	r3, [pc, #388]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ee      	beq.n	800138e <HAL_RCC_OscConfig+0x33a>
 80013b0:	e014      	b.n	80013dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fba7 	bl	8000b04 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fba3 	bl	8000b04 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0a6      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ee      	bne.n	80013ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b52      	ldr	r3, [pc, #328]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a51      	ldr	r2, [pc, #324]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8092 	beq.w	800151c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013f8:	4b4c      	ldr	r3, [pc, #304]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d05c      	beq.n	80014be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d141      	bne.n	8001490 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb77 	bl	8000b04 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fb73 	bl	8000b04 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e078      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	019b      	lsls	r3, r3, #6
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	3b01      	subs	r3, #1
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	061b      	lsls	r3, r3, #24
 800145c:	4933      	ldr	r1, [pc, #204]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fb4c 	bl	8000b04 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fb48 	bl	8000b04 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e04d      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x41c>
 800148e:	e045      	b.n	800151c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fb35 	bl	8000b04 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fb31 	bl	8000b04 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e036      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x44a>
 80014bc:	e02e      	b.n	800151c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e029      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x4d8>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d115      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014f2:	4013      	ands	r3, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d10d      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000
 800152c:	40023800 	.word	0x40023800
 8001530:	42470060 	.word	0x42470060

08001534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0cc      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b68      	ldr	r3, [pc, #416]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d90c      	bls.n	8001570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b63      	ldr	r3, [pc, #396]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0b8      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d044      	beq.n	8001654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d119      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d003      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e067      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 0203 	bic.w	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4934      	ldr	r1, [pc, #208]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001624:	f7ff fa6e 	bl	8000b04 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff fa6a 	bl	8000b04 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e04f      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 020c 	and.w	r2, r3, #12
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	429a      	cmp	r2, r3
 8001652:	d1eb      	bne.n	800162c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d20c      	bcs.n	800167c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e032      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4916      	ldr	r1, [pc, #88]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	490e      	ldr	r1, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ba:	f000 f821 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80016be:	4601      	mov	r1, r0
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	fa21 f303 	lsr.w	r3, r1, r3
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1c8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f9ce 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00
 80016f0:	40023800 	.word	0x40023800
 80016f4:	08004e18 	.word	0x08004e18
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b04      	cmp	r3, #4
 8001720:	d007      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x32>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d008      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x38>
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80b4 	bne.w	8001894 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800172e:	60bb      	str	r3, [r7, #8]
       break;
 8001730:	e0b3      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001732:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001734:	60bb      	str	r3, [r7, #8]
      break;
 8001736:	e0b0      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001738:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001740:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001742:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d04a      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174e:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	099b      	lsrs	r3, r3, #6
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	f240 11ff 	movw	r1, #511	; 0x1ff
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	ea03 0501 	and.w	r5, r3, r1
 8001764:	ea04 0602 	and.w	r6, r4, r2
 8001768:	4629      	mov	r1, r5
 800176a:	4632      	mov	r2, r6
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f04f 0400 	mov.w	r4, #0
 8001774:	0154      	lsls	r4, r2, #5
 8001776:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800177a:	014b      	lsls	r3, r1, #5
 800177c:	4619      	mov	r1, r3
 800177e:	4622      	mov	r2, r4
 8001780:	1b49      	subs	r1, r1, r5
 8001782:	eb62 0206 	sbc.w	r2, r2, r6
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	0194      	lsls	r4, r2, #6
 8001790:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001794:	018b      	lsls	r3, r1, #6
 8001796:	1a5b      	subs	r3, r3, r1
 8001798:	eb64 0402 	sbc.w	r4, r4, r2
 800179c:	f04f 0100 	mov.w	r1, #0
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	00e2      	lsls	r2, r4, #3
 80017a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017aa:	00d9      	lsls	r1, r3, #3
 80017ac:	460b      	mov	r3, r1
 80017ae:	4614      	mov	r4, r2
 80017b0:	195b      	adds	r3, r3, r5
 80017b2:	eb44 0406 	adc.w	r4, r4, r6
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	0262      	lsls	r2, r4, #9
 80017c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017c4:	0259      	lsls	r1, r3, #9
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	f7fe fd02 	bl	80001e0 <__aeabi_uldivmod>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e049      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	ea03 0501 	and.w	r5, r3, r1
 80017fa:	ea04 0602 	and.w	r6, r4, r2
 80017fe:	4629      	mov	r1, r5
 8001800:	4632      	mov	r2, r6
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	0154      	lsls	r4, r2, #5
 800180c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001810:	014b      	lsls	r3, r1, #5
 8001812:	4619      	mov	r1, r3
 8001814:	4622      	mov	r2, r4
 8001816:	1b49      	subs	r1, r1, r5
 8001818:	eb62 0206 	sbc.w	r2, r2, r6
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	0194      	lsls	r4, r2, #6
 8001826:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800182a:	018b      	lsls	r3, r1, #6
 800182c:	1a5b      	subs	r3, r3, r1
 800182e:	eb64 0402 	sbc.w	r4, r4, r2
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	00e2      	lsls	r2, r4, #3
 800183c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001840:	00d9      	lsls	r1, r3, #3
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	195b      	adds	r3, r3, r5
 8001848:	eb44 0406 	adc.w	r4, r4, r6
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	02a2      	lsls	r2, r4, #10
 8001856:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800185a:	0299      	lsls	r1, r3, #10
 800185c:	460b      	mov	r3, r1
 800185e:	4614      	mov	r4, r2
 8001860:	4618      	mov	r0, r3
 8001862:	4621      	mov	r1, r4
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	f7fe fcb7 	bl	80001e0 <__aeabi_uldivmod>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	60bb      	str	r3, [r7, #8]
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001896:	60bb      	str	r3, [r7, #8]
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	68bb      	ldr	r3, [r7, #8]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	00f42400 	.word	0x00f42400
 80018ac:	007a1200 	.word	0x007a1200

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000

080018c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018cc:	f7ff fff0 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018d0:	4601      	mov	r1, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	0a9b      	lsrs	r3, r3, #10
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80018de:	5cd3      	ldrb	r3, [r2, r3]
 80018e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08004e28 	.word	0x08004e28

080018f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f4:	f7ff ffdc 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018f8:	4601      	mov	r1, r0
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0b5b      	lsrs	r3, r3, #13
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	4a03      	ldr	r2, [pc, #12]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	08004e28 	.word	0x08004e28

08001918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e03f      	b.n	80019aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe ffce 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800195a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f90b 	bl	8001b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b088      	sub	sp, #32
 80019b6:	af02      	add	r7, sp, #8
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	f040 8083 	bne.w	8001ada <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_UART_Transmit+0x2e>
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e07b      	b.n	8001adc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_UART_Transmit+0x40>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e074      	b.n	8001adc <HAL_UART_Transmit+0x12a>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2221      	movs	r2, #33	; 0x21
 8001a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a08:	f7ff f87c 	bl	8000b04 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a22:	e042      	b.n	8001aaa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3a:	d122      	bne.n	8001a82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2200      	movs	r2, #0
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f84c 	bl	8001ae4 <UART_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e042      	b.n	8001adc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3302      	adds	r3, #2
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	e017      	b.n	8001aaa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	e013      	b.n	8001aaa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f829 	bl	8001ae4 <UART_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e01f      	b.n	8001adc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1b7      	bne.n	8001a24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f810 	bl	8001ae4 <UART_WaitOnFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e006      	b.n	8001adc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001ada:	2302      	movs	r3, #2
  }
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001af4:	e02c      	b.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d028      	beq.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b04:	f7fe fffe 	bl	8000b04 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d21d      	bcs.n	8001b50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e00f      	b.n	8001b70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d0c3      	beq.n	8001af6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001bba:	f023 030c 	bic.w	r3, r3, #12
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be6:	f040 818b 	bne.w	8001f00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4ac1      	ldr	r2, [pc, #772]	; (8001ef4 <UART_SetConfig+0x37c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d005      	beq.n	8001c00 <UART_SetConfig+0x88>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4abf      	ldr	r2, [pc, #764]	; (8001ef8 <UART_SetConfig+0x380>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f040 80bd 	bne.w	8001d7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c00:	f7ff fe76 	bl	80018f0 <HAL_RCC_GetPCLK2Freq>
 8001c04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	461d      	mov	r5, r3
 8001c0a:	f04f 0600 	mov.w	r6, #0
 8001c0e:	46a8      	mov	r8, r5
 8001c10:	46b1      	mov	r9, r6
 8001c12:	eb18 0308 	adds.w	r3, r8, r8
 8001c16:	eb49 0409 	adc.w	r4, r9, r9
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	46a1      	mov	r9, r4
 8001c1e:	eb18 0805 	adds.w	r8, r8, r5
 8001c22:	eb49 0906 	adc.w	r9, r9, r6
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001c32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001c36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001c3a:	4688      	mov	r8, r1
 8001c3c:	4691      	mov	r9, r2
 8001c3e:	eb18 0005 	adds.w	r0, r8, r5
 8001c42:	eb49 0106 	adc.w	r1, r9, r6
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	f04f 0600 	mov.w	r6, #0
 8001c50:	196b      	adds	r3, r5, r5
 8001c52:	eb46 0406 	adc.w	r4, r6, r6
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	f7fe fac1 	bl	80001e0 <__aeabi_uldivmod>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460c      	mov	r4, r1
 8001c62:	461a      	mov	r2, r3
 8001c64:	4ba5      	ldr	r3, [pc, #660]	; (8001efc <UART_SetConfig+0x384>)
 8001c66:	fba3 2302 	umull	r2, r3, r3, r2
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	461d      	mov	r5, r3
 8001c74:	f04f 0600 	mov.w	r6, #0
 8001c78:	46a9      	mov	r9, r5
 8001c7a:	46b2      	mov	sl, r6
 8001c7c:	eb19 0309 	adds.w	r3, r9, r9
 8001c80:	eb4a 040a 	adc.w	r4, sl, sl
 8001c84:	4699      	mov	r9, r3
 8001c86:	46a2      	mov	sl, r4
 8001c88:	eb19 0905 	adds.w	r9, r9, r5
 8001c8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ca4:	4689      	mov	r9, r1
 8001ca6:	4692      	mov	sl, r2
 8001ca8:	eb19 0005 	adds.w	r0, r9, r5
 8001cac:	eb4a 0106 	adc.w	r1, sl, r6
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	461d      	mov	r5, r3
 8001cb6:	f04f 0600 	mov.w	r6, #0
 8001cba:	196b      	adds	r3, r5, r5
 8001cbc:	eb46 0406 	adc.w	r4, r6, r6
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	f7fe fa8c 	bl	80001e0 <__aeabi_uldivmod>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <UART_SetConfig+0x384>)
 8001cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	2164      	movs	r1, #100	; 0x64
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	3332      	adds	r3, #50	; 0x32
 8001ce2:	4a86      	ldr	r2, [pc, #536]	; (8001efc <UART_SetConfig+0x384>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cf0:	4498      	add	r8, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	461d      	mov	r5, r3
 8001cf6:	f04f 0600 	mov.w	r6, #0
 8001cfa:	46a9      	mov	r9, r5
 8001cfc:	46b2      	mov	sl, r6
 8001cfe:	eb19 0309 	adds.w	r3, r9, r9
 8001d02:	eb4a 040a 	adc.w	r4, sl, sl
 8001d06:	4699      	mov	r9, r3
 8001d08:	46a2      	mov	sl, r4
 8001d0a:	eb19 0905 	adds.w	r9, r9, r5
 8001d0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d26:	4689      	mov	r9, r1
 8001d28:	4692      	mov	sl, r2
 8001d2a:	eb19 0005 	adds.w	r0, r9, r5
 8001d2e:	eb4a 0106 	adc.w	r1, sl, r6
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	461d      	mov	r5, r3
 8001d38:	f04f 0600 	mov.w	r6, #0
 8001d3c:	196b      	adds	r3, r5, r5
 8001d3e:	eb46 0406 	adc.w	r4, r6, r6
 8001d42:	461a      	mov	r2, r3
 8001d44:	4623      	mov	r3, r4
 8001d46:	f7fe fa4b 	bl	80001e0 <__aeabi_uldivmod>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <UART_SetConfig+0x384>)
 8001d52:	fba3 1302 	umull	r1, r3, r3, r2
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2164      	movs	r1, #100	; 0x64
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	3332      	adds	r3, #50	; 0x32
 8001d64:	4a65      	ldr	r2, [pc, #404]	; (8001efc <UART_SetConfig+0x384>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	f003 0207 	and.w	r2, r3, #7
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4442      	add	r2, r8
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e26f      	b.n	800225a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d7a:	f7ff fda5 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 8001d7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	461d      	mov	r5, r3
 8001d84:	f04f 0600 	mov.w	r6, #0
 8001d88:	46a8      	mov	r8, r5
 8001d8a:	46b1      	mov	r9, r6
 8001d8c:	eb18 0308 	adds.w	r3, r8, r8
 8001d90:	eb49 0409 	adc.w	r4, r9, r9
 8001d94:	4698      	mov	r8, r3
 8001d96:	46a1      	mov	r9, r4
 8001d98:	eb18 0805 	adds.w	r8, r8, r5
 8001d9c:	eb49 0906 	adc.w	r9, r9, r6
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001dac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001db0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001db4:	4688      	mov	r8, r1
 8001db6:	4691      	mov	r9, r2
 8001db8:	eb18 0005 	adds.w	r0, r8, r5
 8001dbc:	eb49 0106 	adc.w	r1, r9, r6
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	f04f 0600 	mov.w	r6, #0
 8001dca:	196b      	adds	r3, r5, r5
 8001dcc:	eb46 0406 	adc.w	r4, r6, r6
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	f7fe fa04 	bl	80001e0 <__aeabi_uldivmod>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <UART_SetConfig+0x384>)
 8001de0:	fba3 2302 	umull	r2, r3, r3, r2
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	461d      	mov	r5, r3
 8001dee:	f04f 0600 	mov.w	r6, #0
 8001df2:	46a9      	mov	r9, r5
 8001df4:	46b2      	mov	sl, r6
 8001df6:	eb19 0309 	adds.w	r3, r9, r9
 8001dfa:	eb4a 040a 	adc.w	r4, sl, sl
 8001dfe:	4699      	mov	r9, r3
 8001e00:	46a2      	mov	sl, r4
 8001e02:	eb19 0905 	adds.w	r9, r9, r5
 8001e06:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e1e:	4689      	mov	r9, r1
 8001e20:	4692      	mov	sl, r2
 8001e22:	eb19 0005 	adds.w	r0, r9, r5
 8001e26:	eb4a 0106 	adc.w	r1, sl, r6
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	461d      	mov	r5, r3
 8001e30:	f04f 0600 	mov.w	r6, #0
 8001e34:	196b      	adds	r3, r5, r5
 8001e36:	eb46 0406 	adc.w	r4, r6, r6
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	f7fe f9cf 	bl	80001e0 <__aeabi_uldivmod>
 8001e42:	4603      	mov	r3, r0
 8001e44:	460c      	mov	r4, r1
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <UART_SetConfig+0x384>)
 8001e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2164      	movs	r1, #100	; 0x64
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	3332      	adds	r3, #50	; 0x32
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <UART_SetConfig+0x384>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e6a:	4498      	add	r8, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	461d      	mov	r5, r3
 8001e70:	f04f 0600 	mov.w	r6, #0
 8001e74:	46a9      	mov	r9, r5
 8001e76:	46b2      	mov	sl, r6
 8001e78:	eb19 0309 	adds.w	r3, r9, r9
 8001e7c:	eb4a 040a 	adc.w	r4, sl, sl
 8001e80:	4699      	mov	r9, r3
 8001e82:	46a2      	mov	sl, r4
 8001e84:	eb19 0905 	adds.w	r9, r9, r5
 8001e88:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ea0:	4689      	mov	r9, r1
 8001ea2:	4692      	mov	sl, r2
 8001ea4:	eb19 0005 	adds.w	r0, r9, r5
 8001ea8:	eb4a 0106 	adc.w	r1, sl, r6
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	f04f 0600 	mov.w	r6, #0
 8001eb6:	196b      	adds	r3, r5, r5
 8001eb8:	eb46 0406 	adc.w	r4, r6, r6
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	f7fe f98e 	bl	80001e0 <__aeabi_uldivmod>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <UART_SetConfig+0x384>)
 8001ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	2164      	movs	r1, #100	; 0x64
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	3332      	adds	r3, #50	; 0x32
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <UART_SetConfig+0x384>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	f003 0207 	and.w	r2, r3, #7
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4442      	add	r2, r8
 8001ef0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001ef2:	e1b2      	b.n	800225a <UART_SetConfig+0x6e2>
 8001ef4:	40011000 	.word	0x40011000
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4ad7      	ldr	r2, [pc, #860]	; (8002264 <UART_SetConfig+0x6ec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d005      	beq.n	8001f16 <UART_SetConfig+0x39e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4ad6      	ldr	r2, [pc, #856]	; (8002268 <UART_SetConfig+0x6f0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	f040 80d1 	bne.w	80020b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f16:	f7ff fceb 	bl	80018f0 <HAL_RCC_GetPCLK2Freq>
 8001f1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	469a      	mov	sl, r3
 8001f20:	f04f 0b00 	mov.w	fp, #0
 8001f24:	46d0      	mov	r8, sl
 8001f26:	46d9      	mov	r9, fp
 8001f28:	eb18 0308 	adds.w	r3, r8, r8
 8001f2c:	eb49 0409 	adc.w	r4, r9, r9
 8001f30:	4698      	mov	r8, r3
 8001f32:	46a1      	mov	r9, r4
 8001f34:	eb18 080a 	adds.w	r8, r8, sl
 8001f38:	eb49 090b 	adc.w	r9, r9, fp
 8001f3c:	f04f 0100 	mov.w	r1, #0
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f50:	4688      	mov	r8, r1
 8001f52:	4691      	mov	r9, r2
 8001f54:	eb1a 0508 	adds.w	r5, sl, r8
 8001f58:	eb4b 0609 	adc.w	r6, fp, r9
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	f04f 0400 	mov.w	r4, #0
 8001f6e:	0094      	lsls	r4, r2, #2
 8001f70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f74:	008b      	lsls	r3, r1, #2
 8001f76:	461a      	mov	r2, r3
 8001f78:	4623      	mov	r3, r4
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	f7fe f92f 	bl	80001e0 <__aeabi_uldivmod>
 8001f82:	4603      	mov	r3, r0
 8001f84:	460c      	mov	r4, r1
 8001f86:	461a      	mov	r2, r3
 8001f88:	4bb8      	ldr	r3, [pc, #736]	; (800226c <UART_SetConfig+0x6f4>)
 8001f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	469b      	mov	fp, r3
 8001f98:	f04f 0c00 	mov.w	ip, #0
 8001f9c:	46d9      	mov	r9, fp
 8001f9e:	46e2      	mov	sl, ip
 8001fa0:	eb19 0309 	adds.w	r3, r9, r9
 8001fa4:	eb4a 040a 	adc.w	r4, sl, sl
 8001fa8:	4699      	mov	r9, r3
 8001faa:	46a2      	mov	sl, r4
 8001fac:	eb19 090b 	adds.w	r9, r9, fp
 8001fb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fc8:	4689      	mov	r9, r1
 8001fca:	4692      	mov	sl, r2
 8001fcc:	eb1b 0509 	adds.w	r5, fp, r9
 8001fd0:	eb4c 060a 	adc.w	r6, ip, sl
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	f04f 0400 	mov.w	r4, #0
 8001fe6:	0094      	lsls	r4, r2, #2
 8001fe8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001fec:	008b      	lsls	r3, r1, #2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4623      	mov	r3, r4
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	4631      	mov	r1, r6
 8001ff6:	f7fe f8f3 	bl	80001e0 <__aeabi_uldivmod>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b9a      	ldr	r3, [pc, #616]	; (800226c <UART_SetConfig+0x6f4>)
 8002002:	fba3 1302 	umull	r1, r3, r3, r2
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2164      	movs	r1, #100	; 0x64
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	3332      	adds	r3, #50	; 0x32
 8002014:	4a95      	ldr	r2, [pc, #596]	; (800226c <UART_SetConfig+0x6f4>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002020:	4498      	add	r8, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	469b      	mov	fp, r3
 8002026:	f04f 0c00 	mov.w	ip, #0
 800202a:	46d9      	mov	r9, fp
 800202c:	46e2      	mov	sl, ip
 800202e:	eb19 0309 	adds.w	r3, r9, r9
 8002032:	eb4a 040a 	adc.w	r4, sl, sl
 8002036:	4699      	mov	r9, r3
 8002038:	46a2      	mov	sl, r4
 800203a:	eb19 090b 	adds.w	r9, r9, fp
 800203e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002042:	f04f 0100 	mov.w	r1, #0
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800204e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002056:	4689      	mov	r9, r1
 8002058:	4692      	mov	sl, r2
 800205a:	eb1b 0509 	adds.w	r5, fp, r9
 800205e:	eb4c 060a 	adc.w	r6, ip, sl
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4619      	mov	r1, r3
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	f04f 0400 	mov.w	r4, #0
 8002074:	0094      	lsls	r4, r2, #2
 8002076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800207a:	008b      	lsls	r3, r1, #2
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	4628      	mov	r0, r5
 8002082:	4631      	mov	r1, r6
 8002084:	f7fe f8ac 	bl	80001e0 <__aeabi_uldivmod>
 8002088:	4603      	mov	r3, r0
 800208a:	460c      	mov	r4, r1
 800208c:	461a      	mov	r2, r3
 800208e:	4b77      	ldr	r3, [pc, #476]	; (800226c <UART_SetConfig+0x6f4>)
 8002090:	fba3 1302 	umull	r1, r3, r3, r2
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	3332      	adds	r3, #50	; 0x32
 80020a2:	4a72      	ldr	r2, [pc, #456]	; (800226c <UART_SetConfig+0x6f4>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	f003 020f 	and.w	r2, r3, #15
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4442      	add	r2, r8
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	e0d0      	b.n	800225a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80020b8:	f7ff fc06 	bl	80018c8 <HAL_RCC_GetPCLK1Freq>
 80020bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	469a      	mov	sl, r3
 80020c2:	f04f 0b00 	mov.w	fp, #0
 80020c6:	46d0      	mov	r8, sl
 80020c8:	46d9      	mov	r9, fp
 80020ca:	eb18 0308 	adds.w	r3, r8, r8
 80020ce:	eb49 0409 	adc.w	r4, r9, r9
 80020d2:	4698      	mov	r8, r3
 80020d4:	46a1      	mov	r9, r4
 80020d6:	eb18 080a 	adds.w	r8, r8, sl
 80020da:	eb49 090b 	adc.w	r9, r9, fp
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020f2:	4688      	mov	r8, r1
 80020f4:	4691      	mov	r9, r2
 80020f6:	eb1a 0508 	adds.w	r5, sl, r8
 80020fa:	eb4b 0609 	adc.w	r6, fp, r9
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	0094      	lsls	r4, r2, #2
 8002112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002116:	008b      	lsls	r3, r1, #2
 8002118:	461a      	mov	r2, r3
 800211a:	4623      	mov	r3, r4
 800211c:	4628      	mov	r0, r5
 800211e:	4631      	mov	r1, r6
 8002120:	f7fe f85e 	bl	80001e0 <__aeabi_uldivmod>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	461a      	mov	r2, r3
 800212a:	4b50      	ldr	r3, [pc, #320]	; (800226c <UART_SetConfig+0x6f4>)
 800212c:	fba3 2302 	umull	r2, r3, r3, r2
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	469b      	mov	fp, r3
 800213a:	f04f 0c00 	mov.w	ip, #0
 800213e:	46d9      	mov	r9, fp
 8002140:	46e2      	mov	sl, ip
 8002142:	eb19 0309 	adds.w	r3, r9, r9
 8002146:	eb4a 040a 	adc.w	r4, sl, sl
 800214a:	4699      	mov	r9, r3
 800214c:	46a2      	mov	sl, r4
 800214e:	eb19 090b 	adds.w	r9, r9, fp
 8002152:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800216a:	4689      	mov	r9, r1
 800216c:	4692      	mov	sl, r2
 800216e:	eb1b 0509 	adds.w	r5, fp, r9
 8002172:	eb4c 060a 	adc.w	r6, ip, sl
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	f04f 0400 	mov.w	r4, #0
 8002188:	0094      	lsls	r4, r2, #2
 800218a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800218e:	008b      	lsls	r3, r1, #2
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	4628      	mov	r0, r5
 8002196:	4631      	mov	r1, r6
 8002198:	f7fe f822 	bl	80001e0 <__aeabi_uldivmod>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <UART_SetConfig+0x6f4>)
 80021a4:	fba3 1302 	umull	r1, r3, r3, r2
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	2164      	movs	r1, #100	; 0x64
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	3332      	adds	r3, #50	; 0x32
 80021b6:	4a2d      	ldr	r2, [pc, #180]	; (800226c <UART_SetConfig+0x6f4>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c2:	4498      	add	r8, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	469b      	mov	fp, r3
 80021c8:	f04f 0c00 	mov.w	ip, #0
 80021cc:	46d9      	mov	r9, fp
 80021ce:	46e2      	mov	sl, ip
 80021d0:	eb19 0309 	adds.w	r3, r9, r9
 80021d4:	eb4a 040a 	adc.w	r4, sl, sl
 80021d8:	4699      	mov	r9, r3
 80021da:	46a2      	mov	sl, r4
 80021dc:	eb19 090b 	adds.w	r9, r9, fp
 80021e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021f8:	4689      	mov	r9, r1
 80021fa:	4692      	mov	sl, r2
 80021fc:	eb1b 0509 	adds.w	r5, fp, r9
 8002200:	eb4c 060a 	adc.w	r6, ip, sl
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4619      	mov	r1, r3
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	f04f 0400 	mov.w	r4, #0
 8002216:	0094      	lsls	r4, r2, #2
 8002218:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800221c:	008b      	lsls	r3, r1, #2
 800221e:	461a      	mov	r2, r3
 8002220:	4623      	mov	r3, r4
 8002222:	4628      	mov	r0, r5
 8002224:	4631      	mov	r1, r6
 8002226:	f7fd ffdb 	bl	80001e0 <__aeabi_uldivmod>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	461a      	mov	r2, r3
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <UART_SetConfig+0x6f4>)
 8002232:	fba3 1302 	umull	r1, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2164      	movs	r1, #100	; 0x64
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a09      	ldr	r2, [pc, #36]	; (800226c <UART_SetConfig+0x6f4>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 020f 	and.w	r2, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4442      	add	r2, r8
 8002256:	609a      	str	r2, [r3, #8]
}
 8002258:	e7ff      	b.n	800225a <UART_SetConfig+0x6e2>
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002264:	40011000 	.word	0x40011000
 8002268:	40011400 	.word	0x40011400
 800226c:	51eb851f 	.word	0x51eb851f

08002270 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800227e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002282:	2b84      	cmp	r3, #132	; 0x84
 8002284:	d005      	beq.n	8002292 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002286:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4413      	add	r3, r2
 800228e:	3303      	adds	r3, #3
 8002290:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a6:	f3ef 8305 	mrs	r3, IPSR
 80022aa:	607b      	str	r3, [r7, #4]
  return(result);
 80022ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80022c8:	f001 f826 	bl	8003318 <vTaskStartScheduler>
  
  return osOK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80022d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d4:	b089      	sub	sp, #36	; 0x24
 80022d6:	af04      	add	r7, sp, #16
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <osThreadCreate+0x54>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01c      	beq.n	8002326 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685c      	ldr	r4, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681d      	ldr	r5, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691e      	ldr	r6, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffb6 	bl	8002270 <makeFreeRtosPriority>
 8002304:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800230e:	9202      	str	r2, [sp, #8]
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	9100      	str	r1, [sp, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4632      	mov	r2, r6
 8002318:	4629      	mov	r1, r5
 800231a:	4620      	mov	r0, r4
 800231c:	f000 fe38 	bl	8002f90 <xTaskCreateStatic>
 8002320:	4603      	mov	r3, r0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e01c      	b.n	8002360 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685c      	ldr	r4, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002332:	b29e      	uxth	r6, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff98 	bl	8002270 <makeFreeRtosPriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	9200      	str	r2, [sp, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4632      	mov	r2, r6
 800234e:	4629      	mov	r1, r5
 8002350:	4620      	mov	r0, r4
 8002352:	f000 fe77 	bl	8003044 <xTaskCreate>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	d001      	beq.n	8002360 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002360:	68fb      	ldr	r3, [r7, #12]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800236a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <osDelay+0x16>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	e000      	b.n	8002382 <osDelay+0x18>
 8002380:	2301      	movs	r3, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f000 ff94 	bl	80032b0 <vTaskDelay>
  
  return osOK;
 8002388:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	460b      	mov	r3, r1
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d013      	beq.n	80023d2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <osTimerCreate+0x20>
 80023b0:	2101      	movs	r1, #1
 80023b2:	e000      	b.n	80023b6 <osTimerCreate+0x22>
 80023b4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80023be:	9201      	str	r2, [sp, #4]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	460a      	mov	r2, r1
 80023c6:	2101      	movs	r1, #1
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <osTimerCreate+0x64>)
 80023ca:	f001 fd4a 	bl	8003e62 <xTimerCreateStatic>
 80023ce:	4603      	mov	r3, r0
 80023d0:	e00e      	b.n	80023f0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <osTimerCreate+0x48>
 80023d8:	2201      	movs	r2, #1
 80023da:	e000      	b.n	80023de <osTimerCreate+0x4a>
 80023dc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2101      	movs	r1, #1
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <osTimerCreate+0x64>)
 80023ea:	f001 fd19 	bl	8003e20 <xTimerCreate>
 80023ee:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	08004dfc 	.word	0x08004dfc

080023fc <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af02      	add	r7, sp, #8
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <osTimerStart+0x20>
    ticks = 1;
 8002418:	2301      	movs	r3, #1
 800241a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800241c:	f7ff ff40 	bl	80022a0 <inHandlerMode>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01b      	beq.n	800245e <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002426:	f107 020c 	add.w	r2, r7, #12
 800242a:	2300      	movs	r3, #0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	2109      	movs	r1, #9
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f001 fd8b 	bl	8003f50 <xTimerGenericCommand>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d002      	beq.n	8002446 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8002440:	23ff      	movs	r3, #255	; 0xff
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e018      	b.n	8002478 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <osTimerStart+0x7c>
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <osTimerStart+0x88>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	e00c      	b.n	8002478 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	2104      	movs	r1, #4
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f001 fd71 	bl	8003f50 <xTimerGenericCommand>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d001      	beq.n	8002478 <osTimerStart+0x7c>
      result = osErrorOS;
 8002474:	23ff      	movs	r3, #255	; 0xff
 8002476:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002478:	697b      	ldr	r3, [r7, #20]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f103 0208 	add.w	r2, r3, #8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f103 0208 	add.w	r2, r3, #8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f103 0208 	add.w	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	601a      	str	r2, [r3, #0]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d103      	bne.n	800254a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e00c      	b.n	8002564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3308      	adds	r3, #8
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e002      	b.n	8002558 <vListInsert+0x2e>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	429a      	cmp	r2, r3
 8002562:	d2f6      	bcs.n	8002552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	601a      	str	r2, [r3, #0]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6892      	ldr	r2, [r2, #8]
 80025b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6852      	ldr	r2, [r2, #4]
 80025bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d103      	bne.n	80025d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	e7fe      	b.n	8002616 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002618:	f002 f8a8 	bl	800476c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	68f9      	ldr	r1, [r7, #12]
 8002626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	441a      	add	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	3b01      	subs	r3, #1
 800264a:	68f9      	ldr	r1, [r7, #12]
 800264c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	441a      	add	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d114      	bne.n	8002698 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01a      	beq.n	80026ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3310      	adds	r3, #16
 800267a:	4618      	mov	r0, r3
 800267c:	f001 f8ca 	bl	8003814 <xTaskRemoveFromEventList>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <xQueueGenericReset+0xcc>)
 8002688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	e009      	b.n	80026ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3310      	adds	r3, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fef3 	bl	8002488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3324      	adds	r3, #36	; 0x24
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff feee 	bl	8002488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026ac:	f002 f88c 	bl	80047c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <xQueueGenericCreateStatic+0x28>
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e6:	e7fe      	b.n	80026e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <xQueueGenericCreateStatic+0x42>
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	e7fe      	b.n	8002700 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <xQueueGenericCreateStatic+0x4e>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <xQueueGenericCreateStatic+0x52>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <xQueueGenericCreateStatic+0x54>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <xQueueGenericCreateStatic+0x6c>
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	623b      	str	r3, [r7, #32]
 800272a:	e7fe      	b.n	800272a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <xQueueGenericCreateStatic+0x78>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <xQueueGenericCreateStatic+0x7c>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <xQueueGenericCreateStatic+0x7e>
 800273c:	2300      	movs	r3, #0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <xQueueGenericCreateStatic+0x96>
 8002742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	e7fe      	b.n	8002754 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002756:	2348      	movs	r3, #72	; 0x48
 8002758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b48      	cmp	r3, #72	; 0x48
 800275e:	d009      	beq.n	8002774 <xQueueGenericCreateStatic+0xb4>
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e7fe      	b.n	8002772 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002774:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002788:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f805 	bl	80027a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800279e:	4618      	mov	r0, r3
 80027a0:	3730      	adds	r7, #48	; 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e002      	b.n	80027c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027d4:	2101      	movs	r1, #1
 80027d6:	69b8      	ldr	r0, [r7, #24]
 80027d8:	f7ff ff0a 	bl	80025f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	; 0x38
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <xQueueGenericSend+0x30>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	e7fe      	b.n	8002812 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <xQueueGenericSend+0x3e>
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <xQueueGenericSend+0x42>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <xQueueGenericSend+0x44>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <xQueueGenericSend+0x5c>
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e7fe      	b.n	800283e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d103      	bne.n	800284e <xQueueGenericSend+0x6a>
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <xQueueGenericSend+0x6e>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <xQueueGenericSend+0x70>
 8002852:	2300      	movs	r3, #0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <xQueueGenericSend+0x88>
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	e7fe      	b.n	800286a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800286c:	f001 f988 	bl	8003b80 <xTaskGetSchedulerState>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <xQueueGenericSend+0x98>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <xQueueGenericSend+0x9c>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <xQueueGenericSend+0x9e>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <xQueueGenericSend+0xb6>
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800289a:	f001 ff67 	bl	800476c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <xQueueGenericSend+0xcc>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d129      	bne.n	8002904 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028b6:	f000 f9ff 	bl	8002cb8 <prvCopyDataToQueue>
 80028ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 ffa3 	bl	8003814 <xTaskRemoveFromEventList>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028d4:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <xQueueGenericSend+0x1f0>)
 80028d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	e00a      	b.n	80028fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <xQueueGenericSend+0x1f0>)
 80028ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028fc:	f001 ff64 	bl	80047c8 <vPortExitCritical>
				return pdPASS;
 8002900:	2301      	movs	r3, #1
 8002902:	e063      	b.n	80029cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800290a:	f001 ff5d 	bl	80047c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800290e:	2300      	movs	r3, #0
 8002910:	e05c      	b.n	80029cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	2b00      	cmp	r3, #0
 8002916:	d106      	bne.n	8002926 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4618      	mov	r0, r3
 800291e:	f000 ffdb 	bl	80038d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002922:	2301      	movs	r3, #1
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002926:	f001 ff4f 	bl	80047c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800292a:	f000 fd59 	bl	80033e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800292e:	f001 ff1d 	bl	800476c <vPortEnterCritical>
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002938:	b25b      	sxtb	r3, r3
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d103      	bne.n	8002948 <xQueueGenericSend+0x164>
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294e:	b25b      	sxtb	r3, r3
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d103      	bne.n	800295e <xQueueGenericSend+0x17a>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800295e:	f001 ff33 	bl	80047c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f000 ffca 	bl	8003904 <xTaskCheckForTimeOut>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d124      	bne.n	80029c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002978:	f000 fa96 	bl	8002ea8 <prvIsQueueFull>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d018      	beq.n	80029b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	3310      	adds	r3, #16
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fef4 	bl	8003778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002992:	f000 fa21 	bl	8002dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002996:	f000 fd31 	bl	80033fc <xTaskResumeAll>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f af7c 	bne.w	800289a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <xQueueGenericSend+0x1f0>)
 80029a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	e772      	b.n	800289a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 fa0f 	bl	8002dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ba:	f000 fd1f 	bl	80033fc <xTaskResumeAll>
 80029be:	e76c      	b.n	800289a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029c2:	f000 fa09 	bl	8002dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029c6:	f000 fd19 	bl	80033fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3738      	adds	r7, #56	; 0x38
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	e000ed04 	.word	0xe000ed04

080029d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	; 0x38
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <xQueueGenericSendFromISR+0x2c>
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
 8002a02:	e7fe      	b.n	8002a02 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <xQueueGenericSendFromISR+0x3a>
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <xQueueGenericSendFromISR+0x3e>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <xQueueGenericSendFromISR+0x40>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <xQueueGenericSendFromISR+0x58>
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	623b      	str	r3, [r7, #32]
 8002a2e:	e7fe      	b.n	8002a2e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d103      	bne.n	8002a3e <xQueueGenericSendFromISR+0x66>
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <xQueueGenericSendFromISR+0x6a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <xQueueGenericSendFromISR+0x6c>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <xQueueGenericSendFromISR+0x84>
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e7fe      	b.n	8002a5a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a5c:	f001 ff62 	bl	8004924 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a60:	f3ef 8211 	mrs	r2, BASEPRI
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	61ba      	str	r2, [r7, #24]
 8002a76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <xQueueGenericSendFromISR+0xb6>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d12c      	bne.n	8002ae8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a9e:	f000 f90b 	bl	8002cb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002aa2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d112      	bne.n	8002ad2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d016      	beq.n	8002ae2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	3324      	adds	r3, #36	; 0x24
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 feab 	bl	8003814 <xTaskRemoveFromEventList>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00e      	beq.n	8002ae2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e007      	b.n	8002ae2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	b25a      	sxtb	r2, r3
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002ae6:	e001      	b.n	8002aec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3738      	adds	r7, #56	; 0x38
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <xQueueReceive+0x2e>
	__asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	e7fe      	b.n	8002b2c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <xQueueReceive+0x3c>
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <xQueueReceive+0x40>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <xQueueReceive+0x42>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <xQueueReceive+0x5a>
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	e7fe      	b.n	8002b58 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b5a:	f001 f811 	bl	8003b80 <xTaskGetSchedulerState>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <xQueueReceive+0x6a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <xQueueReceive+0x6e>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <xQueueReceive+0x70>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <xQueueReceive+0x88>
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	e7fe      	b.n	8002b86 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b88:	f001 fdf0 	bl	800476c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01f      	beq.n	8002bd8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b9c:	f000 f8f6 	bl	8002d8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	1e5a      	subs	r2, r3, #1
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00f      	beq.n	8002bd0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fe2d 	bl	8003814 <xTaskRemoveFromEventList>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bc0:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <xQueueReceive+0x1b4>)
 8002bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bd0:	f001 fdfa 	bl	80047c8 <vPortExitCritical>
				return pdPASS;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e069      	b.n	8002cac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bde:	f001 fdf3 	bl	80047c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e062      	b.n	8002cac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fe71 	bl	80038d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bfa:	f001 fde5 	bl	80047c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bfe:	f000 fbef 	bl	80033e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c02:	f001 fdb3 	bl	800476c <vPortEnterCritical>
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d103      	bne.n	8002c1c <xQueueReceive+0x11c>
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d103      	bne.n	8002c32 <xQueueReceive+0x132>
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c32:	f001 fdc9 	bl	80047c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c36:	1d3a      	adds	r2, r7, #4
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fe60 	bl	8003904 <xTaskCheckForTimeOut>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d123      	bne.n	8002c92 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c4c:	f000 f916 	bl	8002e7c <prvIsQueueEmpty>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	3324      	adds	r3, #36	; 0x24
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd8a 	bl	8003778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c66:	f000 f8b7 	bl	8002dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c6a:	f000 fbc7 	bl	80033fc <xTaskResumeAll>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d189      	bne.n	8002b88 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <xQueueReceive+0x1b4>)
 8002c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	e780      	b.n	8002b88 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c88:	f000 f8a6 	bl	8002dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c8c:	f000 fbb6 	bl	80033fc <xTaskResumeAll>
 8002c90:	e77a      	b.n	8002b88 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c94:	f000 f8a0 	bl	8002dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c98:	f000 fbb0 	bl	80033fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c9e:	f000 f8ed 	bl	8002e7c <prvIsQueueEmpty>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f43f af6f 	beq.w	8002b88 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002caa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3730      	adds	r7, #48	; 0x30
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d14d      	bne.n	8002d7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 ff6a 	bl	8003bbc <xTaskPriorityDisinherit>
 8002ce8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	e043      	b.n	8002d7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d119      	bne.n	8002d2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6858      	ldr	r0, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	461a      	mov	r2, r3
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	f002 f846 	bl	8004d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	441a      	add	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d32b      	bcc.n	8002d7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	e026      	b.n	8002d7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68d8      	ldr	r0, [r3, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	461a      	mov	r2, r3
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	f002 f82c 	bl	8004d94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	425b      	negs	r3, r3
 8002d46:	441a      	add	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	425b      	negs	r3, r3
 8002d62:	441a      	add	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d105      	bne.n	8002d7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d82:	697b      	ldr	r3, [r7, #20]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d018      	beq.n	8002dd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	441a      	add	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d303      	bcc.n	8002dc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6838      	ldr	r0, [r7, #0]
 8002dcc:	f001 ffe2 	bl	8004d94 <memcpy>
	}
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002de0:	f001 fcc4 	bl	800476c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dec:	e011      	b.n	8002e12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d012      	beq.n	8002e1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3324      	adds	r3, #36	; 0x24
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fd0a 	bl	8003814 <xTaskRemoveFromEventList>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e06:	f000 fddd 	bl	80039c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	dce9      	bgt.n	8002dee <prvUnlockQueue+0x16>
 8002e1a:	e000      	b.n	8002e1e <prvUnlockQueue+0x46>
					break;
 8002e1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	22ff      	movs	r2, #255	; 0xff
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e26:	f001 fccf 	bl	80047c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e2a:	f001 fc9f 	bl	800476c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e36:	e011      	b.n	8002e5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3310      	adds	r3, #16
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fce5 	bl	8003814 <xTaskRemoveFromEventList>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e50:	f000 fdb8 	bl	80039c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e54:	7bbb      	ldrb	r3, [r7, #14]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	dce9      	bgt.n	8002e38 <prvUnlockQueue+0x60>
 8002e64:	e000      	b.n	8002e68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	22ff      	movs	r2, #255	; 0xff
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e70:	f001 fcaa 	bl	80047c8 <vPortExitCritical>
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e84:	f001 fc72 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e90:	2301      	movs	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e001      	b.n	8002e9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e9a:	f001 fc95 	bl	80047c8 <vPortExitCritical>

	return xReturn;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eb0:	f001 fc5c 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d102      	bne.n	8002ec6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e001      	b.n	8002eca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002eca:	f001 fc7d 	bl	80047c8 <vPortExitCritical>

	return xReturn;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e014      	b.n	8002f12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <vQueueAddToRegistry+0x4c>)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ef4:	490b      	ldr	r1, [pc, #44]	; (8002f24 <vQueueAddToRegistry+0x4c>)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <vQueueAddToRegistry+0x4c>)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f0a:	e005      	b.n	8002f18 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b07      	cmp	r3, #7
 8002f16:	d9e7      	bls.n	8002ee8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	20004564 	.word	0x20004564

08002f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f38:	f001 fc18 	bl	800476c <vPortEnterCritical>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d103      	bne.n	8002f52 <vQueueWaitForMessageRestricted+0x2a>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d103      	bne.n	8002f68 <vQueueWaitForMessageRestricted+0x40>
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f68:	f001 fc2e 	bl	80047c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fc1f 	bl	80037c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff28 	bl	8002dd8 <prvUnlockQueue>
	}
 8002f88:	bf00      	nop
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08e      	sub	sp, #56	; 0x38
 8002f94:	af04      	add	r7, sp, #16
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <xTaskCreateStatic+0x28>
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	e7fe      	b.n	8002fb6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <xTaskCreateStatic+0x42>
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e7fe      	b.n	8002fd0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fd2:	2354      	movs	r3, #84	; 0x54
 8002fd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b54      	cmp	r3, #84	; 0x54
 8002fda:	d009      	beq.n	8002ff0 <xTaskCreateStatic+0x60>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e7fe      	b.n	8002fee <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ff0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01e      	beq.n	8003036 <xTaskCreateStatic+0xa6>
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01b      	beq.n	8003036 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003006:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003010:	2300      	movs	r3, #0
 8003012:	9303      	str	r3, [sp, #12]
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f850 	bl	80030ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800302e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003030:	f000 f8d4 	bl	80031dc <prvAddNewTaskToReadyList>
 8003034:	e001      	b.n	800303a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800303a:	697b      	ldr	r3, [r7, #20]
	}
 800303c:	4618      	mov	r0, r3
 800303e:	3728      	adds	r7, #40	; 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	; 0x30
 8003048:	af04      	add	r7, sp, #16
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f001 fca1 	bl	80049a0 <pvPortMalloc>
 800305e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00e      	beq.n	8003084 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003066:	2054      	movs	r0, #84	; 0x54
 8003068:	f001 fc9a 	bl	80049a0 <pvPortMalloc>
 800306c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
 800307a:	e005      	b.n	8003088 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800307c:	6978      	ldr	r0, [r7, #20]
 800307e:	f001 fd51 	bl	8004b24 <vPortFree>
 8003082:	e001      	b.n	8003088 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d017      	beq.n	80030be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	2300      	movs	r3, #0
 800309a:	9303      	str	r3, [sp, #12]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	9302      	str	r3, [sp, #8]
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f80e 	bl	80030ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030b2:	69f8      	ldr	r0, [r7, #28]
 80030b4:	f000 f892 	bl	80031dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030b8:	2301      	movs	r3, #1
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	e002      	b.n	80030c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030c4:	69bb      	ldr	r3, [r7, #24]
	}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b088      	sub	sp, #32
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030e6:	3b01      	subs	r3, #1
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f023 0307 	bic.w	r3, r3, #7
 80030f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <prvInitialiseNewTask+0x46>
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e7fe      	b.n	8003112 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01f      	beq.n	800315a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	e012      	b.n	8003146 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	7819      	ldrb	r1, [r3, #0]
 8003128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	3334      	adds	r3, #52	; 0x34
 8003130:	460a      	mov	r2, r1
 8003132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3301      	adds	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d9e9      	bls.n	8003120 <prvInitialiseNewTask+0x52>
 800314c:	e000      	b.n	8003150 <prvInitialiseNewTask+0x82>
			{
				break;
 800314e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003158:	e003      	b.n	8003162 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	2b06      	cmp	r3, #6
 8003166:	d901      	bls.n	800316c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003168:	2306      	movs	r3, #6
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	2200      	movs	r2, #0
 800317c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	3304      	adds	r3, #4
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f9a0 	bl	80024c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	3318      	adds	r3, #24
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff f99b 	bl	80024c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	f1c3 0207 	rsb	r2, r3, #7
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	2200      	movs	r2, #0
 80031ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	69b8      	ldr	r0, [r7, #24]
 80031bc:	f001 f9ae 	bl	800451c <pxPortInitialiseStack>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031d2:	bf00      	nop
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031e4:	f001 fac2 	bl	800476c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <prvAddNewTaskToReadyList+0xb8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	4a29      	ldr	r2, [pc, #164]	; (8003294 <prvAddNewTaskToReadyList+0xb8>)
 80031f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <prvAddNewTaskToReadyList+0xbc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031fa:	4a27      	ldr	r2, [pc, #156]	; (8003298 <prvAddNewTaskToReadyList+0xbc>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <prvAddNewTaskToReadyList+0xb8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d110      	bne.n	800322a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003208:	f000 fc00 	bl	8003a0c <prvInitialiseTaskLists>
 800320c:	e00d      	b.n	800322a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <prvAddNewTaskToReadyList+0xc0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <prvAddNewTaskToReadyList+0xbc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	429a      	cmp	r2, r3
 8003222:	d802      	bhi.n	800322a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <prvAddNewTaskToReadyList+0xbc>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <prvAddNewTaskToReadyList+0xc4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <prvAddNewTaskToReadyList+0xc4>)
 8003232:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2201      	movs	r2, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <prvAddNewTaskToReadyList+0xc8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <prvAddNewTaskToReadyList+0xc8>)
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <prvAddNewTaskToReadyList+0xcc>)
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7ff f940 	bl	80024e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003262:	f001 fab1 	bl	80047c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <prvAddNewTaskToReadyList+0xc0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <prvAddNewTaskToReadyList+0xbc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <prvAddNewTaskToReadyList+0xd0>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200007d4 	.word	0x200007d4
 8003298:	200006d4 	.word	0x200006d4
 800329c:	200007e0 	.word	0x200007e0
 80032a0:	200007f0 	.word	0x200007f0
 80032a4:	200007dc 	.word	0x200007dc
 80032a8:	200006d8 	.word	0x200006d8
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <vTaskDelay+0x60>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <vTaskDelay+0x2e>
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	e7fe      	b.n	80032dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80032de:	f000 f87f 	bl	80033e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032e2:	2100      	movs	r1, #0
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fced 	bl	8003cc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032ea:	f000 f887 	bl	80033fc <xTaskResumeAll>
 80032ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <vTaskDelay+0x64>)
 80032f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200007fc 	.word	0x200007fc
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003326:	463a      	mov	r2, r7
 8003328:	1d39      	adds	r1, r7, #4
 800332a:	f107 0308 	add.w	r3, r7, #8
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f8d6 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	9202      	str	r2, [sp, #8]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	2300      	movs	r3, #0
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	2300      	movs	r3, #0
 8003344:	460a      	mov	r2, r1
 8003346:	4920      	ldr	r1, [pc, #128]	; (80033c8 <vTaskStartScheduler+0xb0>)
 8003348:	4820      	ldr	r0, [pc, #128]	; (80033cc <vTaskStartScheduler+0xb4>)
 800334a:	f7ff fe21 	bl	8002f90 <xTaskCreateStatic>
 800334e:	4602      	mov	r2, r0
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <vTaskStartScheduler+0xb8>)
 8003352:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <vTaskStartScheduler+0xb8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800335c:	2301      	movs	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e001      	b.n	8003366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d102      	bne.n	8003372 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800336c:	f000 fd10 	bl	8003d90 <xTimerCreateTimerTask>
 8003370:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d115      	bne.n	80033a4 <vTaskStartScheduler+0x8c>
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <vTaskStartScheduler+0xbc>)
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <vTaskStartScheduler+0xc0>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <vTaskStartScheduler+0xc4>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800339e:	f001 f947 	bl	8004630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033a2:	e00d      	b.n	80033c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d109      	bne.n	80033c0 <vTaskStartScheduler+0xa8>
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e7fe      	b.n	80033be <vTaskStartScheduler+0xa6>
}
 80033c0:	bf00      	nop
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	08004e00 	.word	0x08004e00
 80033cc:	080039dd 	.word	0x080039dd
 80033d0:	200007f8 	.word	0x200007f8
 80033d4:	200007f4 	.word	0x200007f4
 80033d8:	200007e0 	.word	0x200007e0
 80033dc:	200007d8 	.word	0x200007d8

080033e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <vTaskSuspendAll+0x18>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <vTaskSuspendAll+0x18>)
 80033ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	200007fc 	.word	0x200007fc

080033fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800340a:	4b41      	ldr	r3, [pc, #260]	; (8003510 <xTaskResumeAll+0x114>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <xTaskResumeAll+0x2a>
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	e7fe      	b.n	8003424 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003426:	f001 f9a1 	bl	800476c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <xTaskResumeAll+0x114>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	4a37      	ldr	r2, [pc, #220]	; (8003510 <xTaskResumeAll+0x114>)
 8003432:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <xTaskResumeAll+0x114>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d161      	bne.n	8003500 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <xTaskResumeAll+0x118>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05d      	beq.n	8003500 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003444:	e02e      	b.n	80034a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003446:	4b34      	ldr	r3, [pc, #208]	; (8003518 <xTaskResumeAll+0x11c>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3318      	adds	r3, #24
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f8a2 	bl	800259c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3304      	adds	r3, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff f89d 	bl	800259c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	4b2c      	ldr	r3, [pc, #176]	; (800351c <xTaskResumeAll+0x120>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	4a2a      	ldr	r2, [pc, #168]	; (800351c <xTaskResumeAll+0x120>)
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <xTaskResumeAll+0x124>)
 8003482:	441a      	add	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f7ff f829 	bl	80024e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <xTaskResumeAll+0x128>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <xTaskResumeAll+0x12c>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <xTaskResumeAll+0x11c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1cc      	bne.n	8003446 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034b2:	f000 fb45 	bl	8003b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <xTaskResumeAll+0x130>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d010      	beq.n	80034e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034c2:	f000 f847 	bl	8003554 <xTaskIncrementTick>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <xTaskResumeAll+0x12c>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f1      	bne.n	80034c2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <xTaskResumeAll+0x130>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034e4:	4b10      	ldr	r3, [pc, #64]	; (8003528 <xTaskResumeAll+0x12c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d009      	beq.n	8003500 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <xTaskResumeAll+0x134>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003500:	f001 f962 	bl	80047c8 <vPortExitCritical>

	return xAlreadyYielded;
 8003504:	68bb      	ldr	r3, [r7, #8]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	200007fc 	.word	0x200007fc
 8003514:	200007d4 	.word	0x200007d4
 8003518:	20000794 	.word	0x20000794
 800351c:	200007dc 	.word	0x200007dc
 8003520:	200006d8 	.word	0x200006d8
 8003524:	200006d4 	.word	0x200006d4
 8003528:	200007e8 	.word	0x200007e8
 800352c:	200007e4 	.word	0x200007e4
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <xTaskGetTickCount+0x1c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003540:	687b      	ldr	r3, [r7, #4]
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	200007d8 	.word	0x200007d8

08003554 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355e:	4b4e      	ldr	r3, [pc, #312]	; (8003698 <xTaskIncrementTick+0x144>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 8087 	bne.w	8003676 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003568:	4b4c      	ldr	r3, [pc, #304]	; (800369c <xTaskIncrementTick+0x148>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003570:	4a4a      	ldr	r2, [pc, #296]	; (800369c <xTaskIncrementTick+0x148>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d11f      	bne.n	80035bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800357c:	4b48      	ldr	r3, [pc, #288]	; (80036a0 <xTaskIncrementTick+0x14c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <xTaskIncrementTick+0x46>
 8003586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	e7fe      	b.n	8003598 <xTaskIncrementTick+0x44>
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <xTaskIncrementTick+0x14c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	4b40      	ldr	r3, [pc, #256]	; (80036a4 <xTaskIncrementTick+0x150>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3e      	ldr	r2, [pc, #248]	; (80036a0 <xTaskIncrementTick+0x14c>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4a3e      	ldr	r2, [pc, #248]	; (80036a4 <xTaskIncrementTick+0x150>)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b3e      	ldr	r3, [pc, #248]	; (80036a8 <xTaskIncrementTick+0x154>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <xTaskIncrementTick+0x154>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	f000 fac2 	bl	8003b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035bc:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <xTaskIncrementTick+0x158>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d348      	bcc.n	8003658 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <xTaskIncrementTick+0x14c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <xTaskIncrementTick+0x158>)
 80035d2:	f04f 32ff 	mov.w	r2, #4294967295
 80035d6:	601a      	str	r2, [r3, #0]
					break;
 80035d8:	e03e      	b.n	8003658 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <xTaskIncrementTick+0x14c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d203      	bcs.n	80035fa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035f2:	4a2e      	ldr	r2, [pc, #184]	; (80036ac <xTaskIncrementTick+0x158>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035f8:	e02e      	b.n	8003658 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe ffcc 	bl	800259c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	3318      	adds	r3, #24
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe ffc3 	bl	800259c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	2201      	movs	r2, #1
 800361c:	409a      	lsls	r2, r3
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <xTaskIncrementTick+0x15c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <xTaskIncrementTick+0x15c>)
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4a1f      	ldr	r2, [pc, #124]	; (80036b4 <xTaskIncrementTick+0x160>)
 8003636:	441a      	add	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe ff4f 	bl	80024e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <xTaskIncrementTick+0x164>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d3b9      	bcc.n	80035c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003656:	e7b6      	b.n	80035c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <xTaskIncrementTick+0x164>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	4915      	ldr	r1, [pc, #84]	; (80036b4 <xTaskIncrementTick+0x160>)
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d907      	bls.n	8003680 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003670:	2301      	movs	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e004      	b.n	8003680 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <xTaskIncrementTick+0x168>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	4a0f      	ldr	r2, [pc, #60]	; (80036bc <xTaskIncrementTick+0x168>)
 800367e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <xTaskIncrementTick+0x16c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003688:	2301      	movs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800368c:	697b      	ldr	r3, [r7, #20]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200007fc 	.word	0x200007fc
 800369c:	200007d8 	.word	0x200007d8
 80036a0:	2000078c 	.word	0x2000078c
 80036a4:	20000790 	.word	0x20000790
 80036a8:	200007ec 	.word	0x200007ec
 80036ac:	200007f4 	.word	0x200007f4
 80036b0:	200007dc 	.word	0x200007dc
 80036b4:	200006d8 	.word	0x200006d8
 80036b8:	200006d4 	.word	0x200006d4
 80036bc:	200007e4 	.word	0x200007e4
 80036c0:	200007e8 	.word	0x200007e8

080036c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <vTaskSwitchContext+0xa0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <vTaskSwitchContext+0xa4>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036d8:	e03e      	b.n	8003758 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <vTaskSwitchContext+0xa4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <vTaskSwitchContext+0xa8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036ee:	7afb      	ldrb	r3, [r7, #11]
 80036f0:	f1c3 031f 	rsb	r3, r3, #31
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	491e      	ldr	r1, [pc, #120]	; (8003770 <vTaskSwitchContext+0xac>)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <vTaskSwitchContext+0x5a>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	e7fe      	b.n	800371c <vTaskSwitchContext+0x58>
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4a11      	ldr	r2, [pc, #68]	; (8003770 <vTaskSwitchContext+0xac>)
 800372a:	4413      	add	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3308      	adds	r3, #8
 8003740:	429a      	cmp	r2, r3
 8003742:	d104      	bne.n	800374e <vTaskSwitchContext+0x8a>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <vTaskSwitchContext+0xb0>)
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	200007fc 	.word	0x200007fc
 8003768:	200007e8 	.word	0x200007e8
 800376c:	200007dc 	.word	0x200007dc
 8003770:	200006d8 	.word	0x200006d8
 8003774:	200006d4 	.word	0x200006d4

08003778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <vTaskPlaceOnEventList+0x24>
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e7fe      	b.n	800379a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <vTaskPlaceOnEventList+0x44>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3318      	adds	r3, #24
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fe fec0 	bl	800252a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037aa:	2101      	movs	r1, #1
 80037ac:	6838      	ldr	r0, [r7, #0]
 80037ae:	f000 fa89 	bl	8003cc4 <prvAddCurrentTaskToDelayedList>
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200006d4 	.word	0x200006d4

080037c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <vTaskPlaceOnEventListRestricted+0x26>
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e7fe      	b.n	80037e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <vTaskPlaceOnEventListRestricted+0x50>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3318      	adds	r3, #24
 80037ec:	4619      	mov	r1, r3
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7fe fe77 	bl	80024e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	68b8      	ldr	r0, [r7, #8]
 8003804:	f000 fa5e 	bl	8003cc4 <prvAddCurrentTaskToDelayedList>
	}
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200006d4 	.word	0x200006d4

08003814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <xTaskRemoveFromEventList+0x2a>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e7fe      	b.n	800383c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	3318      	adds	r3, #24
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe feaa 	bl	800259c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <xTaskRemoveFromEventList+0xac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11c      	bne.n	800388a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	3304      	adds	r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fea1 	bl	800259c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	2201      	movs	r2, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <xTaskRemoveFromEventList+0xb0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <xTaskRemoveFromEventList+0xb0>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <xTaskRemoveFromEventList+0xb4>)
 800387a:	441a      	add	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3304      	adds	r3, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f7fe fe2d 	bl	80024e2 <vListInsertEnd>
 8003888:	e005      	b.n	8003896 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	3318      	adds	r3, #24
 800388e:	4619      	mov	r1, r3
 8003890:	480e      	ldr	r0, [pc, #56]	; (80038cc <xTaskRemoveFromEventList+0xb8>)
 8003892:	f7fe fe26 	bl	80024e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <xTaskRemoveFromEventList+0xbc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d905      	bls.n	80038b0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <xTaskRemoveFromEventList+0xc0>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e001      	b.n	80038b4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038b4:	697b      	ldr	r3, [r7, #20]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200007fc 	.word	0x200007fc
 80038c4:	200007dc 	.word	0x200007dc
 80038c8:	200006d8 	.word	0x200006d8
 80038cc:	20000794 	.word	0x20000794
 80038d0:	200006d4 	.word	0x200006d4
 80038d4:	200007e8 	.word	0x200007e8

080038d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <vTaskInternalSetTimeOutState+0x24>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <vTaskInternalSetTimeOutState+0x28>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	605a      	str	r2, [r3, #4]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	200007ec 	.word	0x200007ec
 8003900:	200007d8 	.word	0x200007d8

08003904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <xTaskCheckForTimeOut+0x24>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	e7fe      	b.n	8003926 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <xTaskCheckForTimeOut+0x3e>
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	e7fe      	b.n	8003940 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003942:	f000 ff13 	bl	800476c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <xTaskCheckForTimeOut+0xb8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d102      	bne.n	8003966 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	e023      	b.n	80039ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <xTaskCheckForTimeOut+0xbc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d007      	beq.n	8003982 <xTaskCheckForTimeOut+0x7e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e015      	b.n	80039ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	d20b      	bcs.n	80039a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff9d 	bl	80038d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e004      	b.n	80039ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039ae:	f000 ff0b 	bl	80047c8 <vPortExitCritical>

	return xReturn;
 80039b2:	69fb      	ldr	r3, [r7, #28]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200007d8 	.word	0x200007d8
 80039c0:	200007ec 	.word	0x200007ec

080039c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <vTaskMissedYield+0x14>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	200007e8 	.word	0x200007e8

080039dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039e4:	f000 f852 	bl	8003a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <prvIdleTask+0x28>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d9f9      	bls.n	80039e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <prvIdleTask+0x2c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a00:	e7f0      	b.n	80039e4 <prvIdleTask+0x8>
 8003a02:	bf00      	nop
 8003a04:	200006d8 	.word	0x200006d8
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e00c      	b.n	8003a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <prvInitialiseTaskLists+0x60>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fd2e 	bl	8002488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d9ef      	bls.n	8003a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a3a:	f7fe fd25 	bl	8002488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a3e:	480d      	ldr	r0, [pc, #52]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a40:	f7fe fd22 	bl	8002488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <prvInitialiseTaskLists+0x6c>)
 8003a46:	f7fe fd1f 	bl	8002488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <prvInitialiseTaskLists+0x70>)
 8003a4c:	f7fe fd1c 	bl	8002488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <prvInitialiseTaskLists+0x74>)
 8003a52:	f7fe fd19 	bl	8002488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <prvInitialiseTaskLists+0x78>)
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvInitialiseTaskLists+0x7c>)
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200006d8 	.word	0x200006d8
 8003a70:	20000764 	.word	0x20000764
 8003a74:	20000778 	.word	0x20000778
 8003a78:	20000794 	.word	0x20000794
 8003a7c:	200007a8 	.word	0x200007a8
 8003a80:	200007c0 	.word	0x200007c0
 8003a84:	2000078c 	.word	0x2000078c
 8003a88:	20000790 	.word	0x20000790

08003a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a92:	e019      	b.n	8003ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a94:	f000 fe6a 	bl	800476c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <prvCheckTasksWaitingTermination+0x4c>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fd79 	bl	800259c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <prvCheckTasksWaitingTermination+0x50>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <prvCheckTasksWaitingTermination+0x50>)
 8003ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003abe:	f000 fe83 	bl	80047c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f80e 	bl	8003ae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e1      	bne.n	8003a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200007a8 	.word	0x200007a8
 8003adc:	200007d4 	.word	0x200007d4
 8003ae0:	200007bc 	.word	0x200007bc

08003ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 f812 	bl	8004b24 <vPortFree>
				vPortFree( pxTCB );
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f001 f80f 	bl	8004b24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b06:	e017      	b.n	8003b38 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d103      	bne.n	8003b1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f001 f806 	bl	8004b24 <vPortFree>
	}
 8003b18:	e00e      	b.n	8003b38 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d009      	beq.n	8003b38 <prvDeleteTCB+0x54>
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e7fe      	b.n	8003b36 <prvDeleteTCB+0x52>
	}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <prvResetNextTaskUnblockTime+0x38>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <prvResetNextTaskUnblockTime+0x3c>)
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295
 8003b56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b58:	e008      	b.n	8003b6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <prvResetNextTaskUnblockTime+0x38>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <prvResetNextTaskUnblockTime+0x3c>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	2000078c 	.word	0x2000078c
 8003b7c:	200007f4 	.word	0x200007f4

08003b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <xTaskGetSchedulerState+0x34>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	e008      	b.n	8003ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <xTaskGetSchedulerState+0x38>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	e001      	b.n	8003ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ba6:	687b      	ldr	r3, [r7, #4]
	}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	200007e0 	.word	0x200007e0
 8003bb8:	200007fc 	.word	0x200007fc

08003bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d06c      	beq.n	8003cac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bd2:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <xTaskPriorityDisinherit+0xfc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d009      	beq.n	8003bf0 <xTaskPriorityDisinherit+0x34>
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	e7fe      	b.n	8003bee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <xTaskPriorityDisinherit+0x50>
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	e7fe      	b.n	8003c0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	1e5a      	subs	r2, r3, #1
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d044      	beq.n	8003cac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d140      	bne.n	8003cac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fcb4 	bl	800259c <uxListRemove>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d115      	bne.n	8003c66 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	491f      	ldr	r1, [pc, #124]	; (8003cbc <xTaskPriorityDisinherit+0x100>)
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xTaskPriorityDisinherit+0xaa>
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	2201      	movs	r2, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <xTaskPriorityDisinherit+0x104>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4013      	ands	r3, r2
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <xTaskPriorityDisinherit+0x104>)
 8003c64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f1c3 0207 	rsb	r2, r3, #7
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	2201      	movs	r2, #1
 8003c80:	409a      	lsls	r2, r3
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <xTaskPriorityDisinherit+0x104>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <xTaskPriorityDisinherit+0x104>)
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <xTaskPriorityDisinherit+0x100>)
 8003c9a:	441a      	add	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f7fe fc1d 	bl	80024e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cac:	697b      	ldr	r3, [r7, #20]
	}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200006d4 	.word	0x200006d4
 8003cbc:	200006d8 	.word	0x200006d8
 8003cc0:	200007dc 	.word	0x200007dc

08003cc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003cce:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fc5e 	bl	800259c <uxListRemove>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	2201      	movs	r2, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d10a      	bne.n	8003d1c <prvAddCurrentTaskToDelayedList+0x58>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	481a      	ldr	r0, [pc, #104]	; (8003d80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d16:	f7fe fbe4 	bl	80024e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d1a:	e026      	b.n	8003d6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d209      	bcs.n	8003d48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fe fbf2 	bl	800252a <vListInsert>
}
 8003d46:	e010      	b.n	8003d6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe fbe8 	bl	800252a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d202      	bcs.n	8003d6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6013      	str	r3, [r2, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200007d8 	.word	0x200007d8
 8003d78:	200006d4 	.word	0x200006d4
 8003d7c:	200007dc 	.word	0x200007dc
 8003d80:	200007c0 	.word	0x200007c0
 8003d84:	20000790 	.word	0x20000790
 8003d88:	2000078c 	.word	0x2000078c
 8003d8c:	200007f4 	.word	0x200007f4

08003d90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d9a:	f000 fb7f 	bl	800449c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <xTimerCreateTimerTask+0x80>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d021      	beq.n	8003dea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003dae:	1d3a      	adds	r2, r7, #4
 8003db0:	f107 0108 	add.w	r1, r7, #8
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fbab 	bl	8000514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	9202      	str	r2, [sp, #8]
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	2302      	movs	r3, #2
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	460a      	mov	r2, r1
 8003dd0:	4910      	ldr	r1, [pc, #64]	; (8003e14 <xTimerCreateTimerTask+0x84>)
 8003dd2:	4811      	ldr	r0, [pc, #68]	; (8003e18 <xTimerCreateTimerTask+0x88>)
 8003dd4:	f7ff f8dc 	bl	8002f90 <xTaskCreateStatic>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <xTimerCreateTimerTask+0x8c>)
 8003ddc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <xTimerCreateTimerTask+0x8c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003de6:	2301      	movs	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <xTimerCreateTimerTask+0x74>
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e7fe      	b.n	8003e02 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003e04:	697b      	ldr	r3, [r7, #20]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000830 	.word	0x20000830
 8003e14:	08004e08 	.word	0x08004e08
 8003e18:	08004081 	.word	0x08004081
 8003e1c:	20000834 	.word	0x20000834

08003e20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003e2e:	2028      	movs	r0, #40	; 0x28
 8003e30:	f000 fdb6 	bl	80049a0 <pvPortMalloc>
 8003e34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f841 	bl	8003eda <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003e58:	697b      	ldr	r3, [r7, #20]
	}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b08a      	sub	sp, #40	; 0x28
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003e70:	2328      	movs	r3, #40	; 0x28
 8003e72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b28      	cmp	r3, #40	; 0x28
 8003e78:	d009      	beq.n	8003e8e <xTimerCreateStatic+0x2c>
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	e7fe      	b.n	8003e8c <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <xTimerCreateStatic+0x48>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	e7fe      	b.n	8003ea8 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f805 	bl	8003eda <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
	}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b086      	sub	sp, #24
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <prvInitialiseNewTimer+0x28>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e7fe      	b.n	8003f00 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01e      	beq.n	8003f46 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003f08:	f000 fac8 	bl	800449c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe facd 	bl	80024c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <xTimerGenericCommand+0x2c>
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	623b      	str	r3, [r7, #32]
 8003f7a:	e7fe      	b.n	8003f7a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <xTimerGenericCommand+0x94>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02a      	beq.n	8003fda <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	dc18      	bgt.n	8003fc8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f96:	f7ff fdf3 	bl	8003b80 <xTaskGetSchedulerState>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d109      	bne.n	8003fb4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <xTimerGenericCommand+0x94>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	f107 0114 	add.w	r1, r7, #20
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fac:	f7fe fc1a 	bl	80027e4 <xQueueGenericSend>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24
 8003fb2:	e012      	b.n	8003fda <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <xTimerGenericCommand+0x94>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f107 0114 	add.w	r1, r7, #20
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f7fe fc10 	bl	80027e4 <xQueueGenericSend>
 8003fc4:	6278      	str	r0, [r7, #36]	; 0x24
 8003fc6:	e008      	b.n	8003fda <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <xTimerGenericCommand+0x94>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	f107 0114 	add.w	r1, r7, #20
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	f7fe fd00 	bl	80029d8 <xQueueGenericSendFromISR>
 8003fd8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3728      	adds	r7, #40	; 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000830 	.word	0x20000830

08003fe8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <prvProcessExpiredTimer+0x94>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe facb 	bl	800259c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d021      	beq.n	8004058 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	18d1      	adds	r1, r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	6978      	ldr	r0, [r7, #20]
 8004022:	f000 f8d1 	bl	80041c8 <prvInsertTimerInActiveList>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01e      	beq.n	800406a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	2100      	movs	r1, #0
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff ff8a 	bl	8003f50 <xTimerGenericCommand>
 800403c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d112      	bne.n	800406a <prvProcessExpiredTimer+0x82>
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e7fe      	b.n	8004056 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	4798      	blx	r3
}
 8004072:	bf00      	nop
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000828 	.word	0x20000828

08004080 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004088:	f107 0308 	add.w	r3, r7, #8
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f857 	bl	8004140 <prvGetNextExpireTime>
 8004092:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4619      	mov	r1, r3
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f803 	bl	80040a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800409e:	f000 f8d5 	bl	800424c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a2:	e7f1      	b.n	8004088 <prvTimerTask+0x8>

080040a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040ae:	f7ff f997 	bl	80033e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040b2:	f107 0308 	add.w	r3, r7, #8
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f866 	bl	8004188 <prvSampleTimeNow>
 80040bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d130      	bne.n	8004126 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <prvProcessTimerOrBlockTask+0x3c>
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d806      	bhi.n	80040e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040d2:	f7ff f993 	bl	80033fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff85 	bl	8003fe8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040de:	e024      	b.n	800412a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <prvProcessTimerOrBlockTask+0x90>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <prvProcessTimerOrBlockTask+0x50>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <prvProcessTimerOrBlockTask+0x52>
 80040f4:	2300      	movs	r3, #0
 80040f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <prvProcessTimerOrBlockTask+0x94>)
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	4619      	mov	r1, r3
 8004106:	f7fe ff0f 	bl	8002f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800410a:	f7ff f977 	bl	80033fc <xTaskResumeAll>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <prvProcessTimerOrBlockTask+0x98>)
 8004116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	f3bf 8f6f 	isb	sy
}
 8004124:	e001      	b.n	800412a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004126:	f7ff f969 	bl	80033fc <xTaskResumeAll>
}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2000082c 	.word	0x2000082c
 8004138:	20000830 	.word	0x20000830
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <prvGetNextExpireTime+0x44>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <prvGetNextExpireTime+0x16>
 8004152:	2201      	movs	r2, #1
 8004154:	e000      	b.n	8004158 <prvGetNextExpireTime+0x18>
 8004156:	2200      	movs	r2, #0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <prvGetNextExpireTime+0x44>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e001      	b.n	8004174 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004174:	68fb      	ldr	r3, [r7, #12]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000828 	.word	0x20000828

08004188 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004190:	f7ff f9d0 	bl	8003534 <xTaskGetTickCount>
 8004194:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <prvSampleTimeNow+0x3c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	429a      	cmp	r2, r3
 800419e:	d205      	bcs.n	80041ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041a0:	f000 f918 	bl	80043d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e002      	b.n	80041b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <prvSampleTimeNow+0x3c>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041b8:	68fb      	ldr	r3, [r7, #12]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000838 	.word	0x20000838

080041c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d812      	bhi.n	8004214 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e01b      	b.n	800423a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <prvInsertTimerInActiveList+0x7c>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3304      	adds	r3, #4
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f7fe f98c 	bl	800252a <vListInsert>
 8004212:	e012      	b.n	800423a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d206      	bcs.n	800422a <prvInsertTimerInActiveList+0x62>
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d302      	bcc.n	800422a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e007      	b.n	800423a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <prvInsertTimerInActiveList+0x80>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fe f978 	bl	800252a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800423a:	697b      	ldr	r3, [r7, #20]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	2000082c 	.word	0x2000082c
 8004248:	20000828 	.word	0x20000828

0800424c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004252:	e0ac      	b.n	80043ae <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f2c0 80a8 	blt.w	80043ac <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	3304      	adds	r3, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe f995 	bl	800259c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ff87 	bl	8004188 <prvSampleTimeNow>
 800427a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b09      	cmp	r3, #9
 8004280:	f200 8095 	bhi.w	80043ae <prvProcessReceivedCommands+0x162>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <prvProcessReceivedCommands+0x40>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042b5 	.word	0x080042b5
 8004298:	08004327 	.word	0x08004327
 800429c:	0800433b 	.word	0x0800433b
 80042a0:	08004383 	.word	0x08004383
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042b5 	.word	0x080042b5
 80042ac:	08004327 	.word	0x08004327
 80042b0:	0800433b 	.word	0x0800433b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	18d1      	adds	r1, r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d4:	f7ff ff78 	bl	80041c8 <prvInsertTimerInActiveList>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d067      	beq.n	80043ae <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d05c      	beq.n	80043ae <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	441a      	add	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	2100      	movs	r1, #0
 8004304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004306:	f7ff fe23 	bl	8003f50 <xTimerGenericCommand>
 800430a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d14d      	bne.n	80043ae <prvProcessReceivedCommands+0x162>
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	e7fe      	b.n	8004324 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004338:	e039      	b.n	80043ae <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <prvProcessReceivedCommands+0x122>
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e7fe      	b.n	800436c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	18d1      	adds	r1, r2, r3
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800437c:	f7ff ff24 	bl	80041c8 <prvInsertTimerInActiveList>
					break;
 8004380:	e015      	b.n	80043ae <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d103      	bne.n	8004398 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004392:	f000 fbc7 	bl	8004b24 <vPortFree>
 8004396:	e00a      	b.n	80043ae <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043aa:	e000      	b.n	80043ae <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <prvProcessReceivedCommands+0x184>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f107 0108 	add.w	r1, r7, #8
 80043b6:	2200      	movs	r2, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fba1 	bl	8002b00 <xQueueReceive>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f af47 	bne.w	8004254 <prvProcessReceivedCommands+0x8>
	}
}
 80043c6:	bf00      	nop
 80043c8:	3728      	adds	r7, #40	; 0x28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000830 	.word	0x20000830

080043d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043da:	e047      	b.n	800446c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043dc:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <prvSwitchTimerLists+0xc0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <prvSwitchTimerLists+0xc0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe f8d1 	bl	800259c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02d      	beq.n	800446c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	429a      	cmp	r2, r3
 8004420:	d90e      	bls.n	8004440 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800442e:	4b19      	ldr	r3, [pc, #100]	; (8004494 <prvSwitchTimerLists+0xc0>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fe f876 	bl	800252a <vListInsert>
 800443e:	e015      	b.n	800446c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004440:	2300      	movs	r3, #0
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	2100      	movs	r1, #0
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff fd80 	bl	8003f50 <xTimerGenericCommand>
 8004450:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <prvSwitchTimerLists+0x98>
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	e7fe      	b.n	800446a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <prvSwitchTimerLists+0xc0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1b2      	bne.n	80043dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <prvSwitchTimerLists+0xc0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <prvSwitchTimerLists+0xc4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <prvSwitchTimerLists+0xc0>)
 8004482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <prvSwitchTimerLists+0xc4>)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	6013      	str	r3, [r2, #0]
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000828 	.word	0x20000828
 8004498:	2000082c 	.word	0x2000082c

0800449c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044a2:	f000 f963 	bl	800476c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <prvCheckForValidListAndQueue+0x60>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d120      	bne.n	80044f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044ae:	4814      	ldr	r0, [pc, #80]	; (8004500 <prvCheckForValidListAndQueue+0x64>)
 80044b0:	f7fd ffea 	bl	8002488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044b4:	4813      	ldr	r0, [pc, #76]	; (8004504 <prvCheckForValidListAndQueue+0x68>)
 80044b6:	f7fd ffe7 	bl	8002488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <prvCheckForValidListAndQueue+0x6c>)
 80044bc:	4a10      	ldr	r2, [pc, #64]	; (8004500 <prvCheckForValidListAndQueue+0x64>)
 80044be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <prvCheckForValidListAndQueue+0x70>)
 80044c2:	4a10      	ldr	r2, [pc, #64]	; (8004504 <prvCheckForValidListAndQueue+0x68>)
 80044c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <prvCheckForValidListAndQueue+0x74>)
 80044cc:	4a11      	ldr	r2, [pc, #68]	; (8004514 <prvCheckForValidListAndQueue+0x78>)
 80044ce:	210c      	movs	r1, #12
 80044d0:	200a      	movs	r0, #10
 80044d2:	f7fe f8f5 	bl	80026c0 <xQueueGenericCreateStatic>
 80044d6:	4602      	mov	r2, r0
 80044d8:	4b08      	ldr	r3, [pc, #32]	; (80044fc <prvCheckForValidListAndQueue+0x60>)
 80044da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <prvCheckForValidListAndQueue+0x60>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <prvCheckForValidListAndQueue+0x60>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	490b      	ldr	r1, [pc, #44]	; (8004518 <prvCheckForValidListAndQueue+0x7c>)
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fcf4 	bl	8002ed8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044f0:	f000 f96a 	bl	80047c8 <vPortExitCritical>
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000830 	.word	0x20000830
 8004500:	20000800 	.word	0x20000800
 8004504:	20000814 	.word	0x20000814
 8004508:	20000828 	.word	0x20000828
 800450c:	2000082c 	.word	0x2000082c
 8004510:	200008b4 	.word	0x200008b4
 8004514:	2000083c 	.word	0x2000083c
 8004518:	08004e10 	.word	0x08004e10

0800451c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3b04      	subs	r3, #4
 800452c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3b04      	subs	r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3b04      	subs	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800454c:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <pxPortInitialiseStack+0x64>)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3b14      	subs	r3, #20
 8004556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3b04      	subs	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f06f 0202 	mvn.w	r2, #2
 800456a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3b20      	subs	r3, #32
 8004570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	08004585 	.word	0x08004585

08004584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <prvTaskExitError+0x50>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d009      	beq.n	80045ac <prvTaskExitError+0x28>
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	e7fe      	b.n	80045aa <prvTaskExitError+0x26>
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045be:	bf00      	nop
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0fc      	beq.n	80045c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000000c 	.word	0x2000000c
	...

080045e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <pxCurrentTCBConst2>)
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	6808      	ldr	r0, [r1, #0]
 80045e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	f380 8809 	msr	PSP, r0
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8811 	msr	BASEPRI, r0
 80045fa:	4770      	bx	lr
 80045fc:	f3af 8000 	nop.w

08004600 <pxCurrentTCBConst2>:
 8004600:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop

08004608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004608:	4808      	ldr	r0, [pc, #32]	; (800462c <prvPortStartFirstTask+0x24>)
 800460a:	6800      	ldr	r0, [r0, #0]
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f380 8808 	msr	MSP, r0
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f380 8814 	msr	CONTROL, r0
 800461a:	b662      	cpsie	i
 800461c:	b661      	cpsie	f
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	df00      	svc	0
 8004628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800462a:	bf00      	nop
 800462c:	e000ed08 	.word	0xe000ed08

08004630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004636:	4b44      	ldr	r3, [pc, #272]	; (8004748 <xPortStartScheduler+0x118>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a44      	ldr	r2, [pc, #272]	; (800474c <xPortStartScheduler+0x11c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <xPortStartScheduler+0x24>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	e7fe      	b.n	8004652 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004654:	4b3c      	ldr	r3, [pc, #240]	; (8004748 <xPortStartScheduler+0x118>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <xPortStartScheduler+0x120>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d109      	bne.n	8004672 <xPortStartScheduler+0x42>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e7fe      	b.n	8004670 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <xPortStartScheduler+0x124>)
 8004674:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	22ff      	movs	r2, #255	; 0xff
 8004682:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4b30      	ldr	r3, [pc, #192]	; (8004758 <xPortStartScheduler+0x128>)
 8004698:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800469a:	4b30      	ldr	r3, [pc, #192]	; (800475c <xPortStartScheduler+0x12c>)
 800469c:	2207      	movs	r2, #7
 800469e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046a0:	e009      	b.n	80046b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80046a2:	4b2e      	ldr	r3, [pc, #184]	; (800475c <xPortStartScheduler+0x12c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	4a2c      	ldr	r2, [pc, #176]	; (800475c <xPortStartScheduler+0x12c>)
 80046aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d0ef      	beq.n	80046a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <xPortStartScheduler+0x12c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1c3 0307 	rsb	r3, r3, #7
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d009      	beq.n	80046e2 <xPortStartScheduler+0xb2>
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	e7fe      	b.n	80046e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <xPortStartScheduler+0x12c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	4a1c      	ldr	r2, [pc, #112]	; (800475c <xPortStartScheduler+0x12c>)
 80046ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <xPortStartScheduler+0x12c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <xPortStartScheduler+0x12c>)
 80046f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <xPortStartScheduler+0x130>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <xPortStartScheduler+0x130>)
 8004706:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800470a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800470c:	4b14      	ldr	r3, [pc, #80]	; (8004760 <xPortStartScheduler+0x130>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <xPortStartScheduler+0x130>)
 8004712:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004716:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004718:	f000 f8d6 	bl	80048c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <xPortStartScheduler+0x134>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004722:	f000 f8f5 	bl	8004910 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <xPortStartScheduler+0x138>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <xPortStartScheduler+0x138>)
 800472c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004730:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004732:	f7ff ff69 	bl	8004608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004736:	f7fe ffc5 	bl	80036c4 <vTaskSwitchContext>
	prvTaskExitError();
 800473a:	f7ff ff23 	bl	8004584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	e000ed00 	.word	0xe000ed00
 800474c:	410fc271 	.word	0x410fc271
 8004750:	410fc270 	.word	0x410fc270
 8004754:	e000e400 	.word	0xe000e400
 8004758:	200008fc 	.word	0x200008fc
 800475c:	20000900 	.word	0x20000900
 8004760:	e000ed20 	.word	0xe000ed20
 8004764:	2000000c 	.word	0x2000000c
 8004768:	e000ef34 	.word	0xe000ef34

0800476c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <vPortEnterCritical+0x54>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <vPortEnterCritical+0x54>)
 800478c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <vPortEnterCritical+0x54>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10e      	bne.n	80047b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <vPortEnterCritical+0x58>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <vPortEnterCritical+0x48>
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	e7fe      	b.n	80047b2 <vPortEnterCritical+0x46>
	}
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	2000000c 	.word	0x2000000c
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <vPortExitCritical+0x4c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <vPortExitCritical+0x22>
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	e7fe      	b.n	80047e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <vPortExitCritical+0x4c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a08      	ldr	r2, [pc, #32]	; (8004814 <vPortExitCritical+0x4c>)
 80047f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <vPortExitCritical+0x4c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <vPortExitCritical+0x3e>
 80047fc:	2300      	movs	r3, #0
 80047fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000000c 	.word	0x2000000c
	...

08004820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004820:	f3ef 8009 	mrs	r0, PSP
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <pxCurrentTCBConst>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	f01e 0f10 	tst.w	lr, #16
 8004830:	bf08      	it	eq
 8004832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483a:	6010      	str	r0, [r2, #0]
 800483c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004844:	f380 8811 	msr	BASEPRI, r0
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f7fe ff38 	bl	80036c4 <vTaskSwitchContext>
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f380 8811 	msr	BASEPRI, r0
 800485c:	bc09      	pop	{r0, r3}
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	6808      	ldr	r0, [r1, #0]
 8004862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004866:	f01e 0f10 	tst.w	lr, #16
 800486a:	bf08      	it	eq
 800486c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004870:	f380 8809 	msr	PSP, r0
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	f3af 8000 	nop.w

08004880 <pxCurrentTCBConst>:
 8004880:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048a0:	f7fe fe58 	bl	8003554 <xTaskIncrementTick>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <xPortSysTickHandler+0x3c>)
 80048ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	2300      	movs	r3, #0
 80048b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <vPortSetupTimerInterrupt+0x34>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <vPortSetupTimerInterrupt+0x38>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <vPortSetupTimerInterrupt+0x3c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <vPortSetupTimerInterrupt+0x40>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	099b      	lsrs	r3, r3, #6
 80048e4:	4a09      	ldr	r2, [pc, #36]	; (800490c <vPortSetupTimerInterrupt+0x44>)
 80048e6:	3b01      	subs	r3, #1
 80048e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ea:	4b04      	ldr	r3, [pc, #16]	; (80048fc <vPortSetupTimerInterrupt+0x34>)
 80048ec:	2207      	movs	r2, #7
 80048ee:	601a      	str	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	e000e010 	.word	0xe000e010
 8004900:	e000e018 	.word	0xe000e018
 8004904:	20000000 	.word	0x20000000
 8004908:	10624dd3 	.word	0x10624dd3
 800490c:	e000e014 	.word	0xe000e014

08004910 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004910:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004920 <vPortEnableVFP+0x10>
 8004914:	6801      	ldr	r1, [r0, #0]
 8004916:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800491a:	6001      	str	r1, [r0, #0]
 800491c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800491e:	bf00      	nop
 8004920:	e000ed88 	.word	0xe000ed88

08004924 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800492a:	f3ef 8305 	mrs	r3, IPSR
 800492e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d913      	bls.n	800495e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004936:	4a16      	ldr	r2, [pc, #88]	; (8004990 <vPortValidateInterruptPriority+0x6c>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004940:	4b14      	ldr	r3, [pc, #80]	; (8004994 <vPortValidateInterruptPriority+0x70>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	7afa      	ldrb	r2, [r7, #11]
 8004946:	429a      	cmp	r2, r3
 8004948:	d209      	bcs.n	800495e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	e7fe      	b.n	800495c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800495e:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <vPortValidateInterruptPriority+0x74>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <vPortValidateInterruptPriority+0x78>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d909      	bls.n	8004982 <vPortValidateInterruptPriority+0x5e>
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	e7fe      	b.n	8004980 <vPortValidateInterruptPriority+0x5c>
	}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e3f0 	.word	0xe000e3f0
 8004994:	200008fc 	.word	0x200008fc
 8004998:	e000ed0c 	.word	0xe000ed0c
 800499c:	20000900 	.word	0x20000900

080049a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049ac:	f7fe fd18 	bl	80033e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049b0:	4b57      	ldr	r3, [pc, #348]	; (8004b10 <pvPortMalloc+0x170>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049b8:	f000 f90c 	bl	8004bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049bc:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <pvPortMalloc+0x174>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 808c 	bne.w	8004ae2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01c      	beq.n	8004a0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80049d0:	2208      	movs	r2, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	3308      	adds	r3, #8
 80049ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <pvPortMalloc+0x6a>
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e7fe      	b.n	8004a08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d068      	beq.n	8004ae2 <pvPortMalloc+0x142>
 8004a10:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <pvPortMalloc+0x178>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d863      	bhi.n	8004ae2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a1a:	4b40      	ldr	r3, [pc, #256]	; (8004b1c <pvPortMalloc+0x17c>)
 8004a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <pvPortMalloc+0x17c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a24:	e004      	b.n	8004a30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d903      	bls.n	8004a42 <pvPortMalloc+0xa2>
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f1      	bne.n	8004a26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a42:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <pvPortMalloc+0x170>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d04a      	beq.n	8004ae2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2208      	movs	r2, #8
 8004a52:	4413      	add	r3, r2
 8004a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	2308      	movs	r3, #8
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d91e      	bls.n	8004aac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <pvPortMalloc+0xf4>
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	e7fe      	b.n	8004a92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004aa6:	69b8      	ldr	r0, [r7, #24]
 8004aa8:	f000 f8f6 	bl	8004c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <pvPortMalloc+0x178>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <pvPortMalloc+0x178>)
 8004ab8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aba:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <pvPortMalloc+0x178>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <pvPortMalloc+0x180>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d203      	bcs.n	8004ace <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <pvPortMalloc+0x178>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <pvPortMalloc+0x180>)
 8004acc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <pvPortMalloc+0x174>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ae2:	f7fe fc8b 	bl	80033fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <pvPortMalloc+0x164>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e7fe      	b.n	8004b02 <pvPortMalloc+0x162>
	return pvReturn;
 8004b04:	69fb      	ldr	r3, [r7, #28]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2000450c 	.word	0x2000450c
 8004b14:	20004518 	.word	0x20004518
 8004b18:	20004510 	.word	0x20004510
 8004b1c:	20004504 	.word	0x20004504
 8004b20:	20004514 	.word	0x20004514

08004b24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d046      	beq.n	8004bc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b36:	2308      	movs	r3, #8
 8004b38:	425b      	negs	r3, r3
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <vPortFree+0xa8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <vPortFree+0x42>
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e7fe      	b.n	8004b64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <vPortFree+0x5e>
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	e7fe      	b.n	8004b80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <vPortFree+0xa8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d115      	bne.n	8004bc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <vPortFree+0xa8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ba8:	f7fe fc1a 	bl	80033e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <vPortFree+0xac>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <vPortFree+0xac>)
 8004bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bba:	6938      	ldr	r0, [r7, #16]
 8004bbc:	f000 f86c 	bl	8004c98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bc0:	f7fe fc1c 	bl	80033fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bc4:	bf00      	nop
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20004518 	.word	0x20004518
 8004bd0:	20004510 	.word	0x20004510

08004bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <prvHeapInit+0xac>)
 8004be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3307      	adds	r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <prvHeapInit+0xac>)
 8004c04:	4413      	add	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <prvHeapInit+0xb0>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c12:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <prvHeapInit+0xb0>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c20:	2208      	movs	r2, #8
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0307 	bic.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <prvHeapInit+0xb4>)
 8004c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <prvHeapInit+0xb4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <prvHeapInit+0xb4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <prvHeapInit+0xb4>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <prvHeapInit+0xb8>)
 8004c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <prvHeapInit+0xbc>)
 8004c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <prvHeapInit+0xc0>)
 8004c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c72:	601a      	str	r2, [r3, #0]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20000904 	.word	0x20000904
 8004c84:	20004504 	.word	0x20004504
 8004c88:	2000450c 	.word	0x2000450c
 8004c8c:	20004514 	.word	0x20004514
 8004c90:	20004510 	.word	0x20004510
 8004c94:	20004518 	.word	0x20004518

08004c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <prvInsertBlockIntoFreeList+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e002      	b.n	8004cac <prvInsertBlockIntoFreeList+0x14>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d8f7      	bhi.n	8004ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d108      	bne.n	8004cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	441a      	add	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d118      	bne.n	8004d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <prvInsertBlockIntoFreeList+0xb0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d00d      	beq.n	8004d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	441a      	add	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e008      	b.n	8004d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d16:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <prvInsertBlockIntoFreeList+0xb0>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e003      	b.n	8004d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d002      	beq.n	8004d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20004504 	.word	0x20004504
 8004d48:	2000450c 	.word	0x2000450c

08004d4c <__libc_init_array>:
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	4e0d      	ldr	r6, [pc, #52]	; (8004d84 <__libc_init_array+0x38>)
 8004d50:	4c0d      	ldr	r4, [pc, #52]	; (8004d88 <__libc_init_array+0x3c>)
 8004d52:	1ba4      	subs	r4, r4, r6
 8004d54:	10a4      	asrs	r4, r4, #2
 8004d56:	2500      	movs	r5, #0
 8004d58:	42a5      	cmp	r5, r4
 8004d5a:	d109      	bne.n	8004d70 <__libc_init_array+0x24>
 8004d5c:	4e0b      	ldr	r6, [pc, #44]	; (8004d8c <__libc_init_array+0x40>)
 8004d5e:	4c0c      	ldr	r4, [pc, #48]	; (8004d90 <__libc_init_array+0x44>)
 8004d60:	f000 f82c 	bl	8004dbc <_init>
 8004d64:	1ba4      	subs	r4, r4, r6
 8004d66:	10a4      	asrs	r4, r4, #2
 8004d68:	2500      	movs	r5, #0
 8004d6a:	42a5      	cmp	r5, r4
 8004d6c:	d105      	bne.n	8004d7a <__libc_init_array+0x2e>
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d74:	4798      	blx	r3
 8004d76:	3501      	adds	r5, #1
 8004d78:	e7ee      	b.n	8004d58 <__libc_init_array+0xc>
 8004d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d7e:	4798      	blx	r3
 8004d80:	3501      	adds	r5, #1
 8004d82:	e7f2      	b.n	8004d6a <__libc_init_array+0x1e>
 8004d84:	08004e38 	.word	0x08004e38
 8004d88:	08004e38 	.word	0x08004e38
 8004d8c:	08004e38 	.word	0x08004e38
 8004d90:	08004e3c 	.word	0x08004e3c

08004d94 <memcpy>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	1e43      	subs	r3, r0, #1
 8004d98:	440a      	add	r2, r1
 8004d9a:	4291      	cmp	r1, r2
 8004d9c:	d100      	bne.n	8004da0 <memcpy+0xc>
 8004d9e:	bd10      	pop	{r4, pc}
 8004da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da8:	e7f7      	b.n	8004d9a <memcpy+0x6>

08004daa <memset>:
 8004daa:	4402      	add	r2, r0
 8004dac:	4603      	mov	r3, r0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d100      	bne.n	8004db4 <memset+0xa>
 8004db2:	4770      	bx	lr
 8004db4:	f803 1b01 	strb.w	r1, [r3], #1
 8004db8:	e7f9      	b.n	8004dae <memset+0x4>
	...

08004dbc <_init>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr

08004dc8 <_fini>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr
