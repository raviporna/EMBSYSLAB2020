
prelab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e4  080061e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061ec  080061ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080061f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004604  20000074  08006268  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004678  08006268  00024678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d55  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c12  00000000  00000000  00033df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00036a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  00037bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017744  00000000  00000000  00038c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d1ab  00000000  00000000  0005036c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009501f  00000000  00000000  0005d517  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cac  00000000  00000000  000f25b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060f0 	.word	0x080060f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080060f0 	.word	0x080060f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetTimerTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200002e4 	.word	0x200002e4
 80005f4:	20000338 	.word	0x20000338

080005f8 <timer_thread>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char buffer[32];
void timer_thread(void const *args) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while (1) {
		TIM2->CCR1 = 0;
 8000600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000604:	2200      	movs	r2, #0
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
		sprintf(buffer, "%d\n\r", TIM2->CCR1);
 8000608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	461a      	mov	r2, r3
 8000610:	4909      	ldr	r1, [pc, #36]	; (8000638 <timer_thread+0x40>)
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <timer_thread+0x44>)
 8000614:	f005 f970 	bl	80058f8 <siprintf>
		HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <timer_thread+0x44>)
 800061a:	f7ff fde1 	bl	80001e0 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	4905      	ldr	r1, [pc, #20]	; (800063c <timer_thread+0x44>)
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <timer_thread+0x48>)
 8000628:	f002 f87d 	bl	8002726 <HAL_UART_Transmit>
		osDelay(10000);
 800062c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000630:	f002 fd43 	bl	80030ba <osDelay>
	while (1) {
 8000634:	e7e4      	b.n	8000600 <timer_thread+0x8>
 8000636:	bf00      	nop
 8000638:	08006108 	.word	0x08006108
 800063c:	20004590 	.word	0x20004590
 8000640:	200045f0 	.word	0x200045f0

08000644 <input_thread>:
	}
}
void input_thread(void const *args) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	while (1) {
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	4817      	ldr	r0, [pc, #92]	; (80006b0 <input_thread+0x6c>)
 8000652:	f000 fe57 	bl	8001304 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d124      	bne.n	80006a6 <input_thread+0x62>
			TIM2->CCR1 = TIM2->CCR1 + 10;
 800065c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000666:	330a      	adds	r3, #10
 8000668:	6353      	str	r3, [r2, #52]	; 0x34
			sprintf(buffer, "%d\n\r", TIM2->CCR1);
 800066a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800066e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000670:	461a      	mov	r2, r3
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <input_thread+0x70>)
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <input_thread+0x74>)
 8000676:	f005 f93f 	bl	80058f8 <siprintf>
			HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <input_thread+0x74>)
 800067c:	f7ff fdb0 	bl	80001e0 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	490c      	ldr	r1, [pc, #48]	; (80006b8 <input_thread+0x74>)
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <input_thread+0x78>)
 800068a:	f002 f84c 	bl	8002726 <HAL_UART_Transmit>
			HAL_Delay(10);
 800068e:	200a      	movs	r0, #10
 8000690:	f000 fbae 	bl	8000df0 <HAL_Delay>
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8000694:	bf00      	nop
 8000696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <input_thread+0x6c>)
 800069c:	f000 fe32 	bl	8001304 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0f7      	beq.n	8000696 <input_thread+0x52>
				;
		}
		osDelay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f002 fd07 	bl	80030ba <osDelay>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80006ac:	e7ce      	b.n	800064c <input_thread+0x8>
 80006ae:	bf00      	nop
 80006b0:	40020800 	.word	0x40020800
 80006b4:	08006108 	.word	0x08006108
 80006b8:	20004590 	.word	0x20004590
 80006bc:	200045f0 	.word	0x200045f0

080006c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c6:	f000 fb21 	bl	8000d0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ca:	f000 f825 	bl	8000718 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ce:	f000 f92b 	bl	8000928 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006d2:	f000 f8ff 	bl	80008d4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80006d6:	f000 f887 	bl	80007e8 <MX_TIM2_Init>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006da:	2100      	movs	r1, #0
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <main+0x4c>)
 80006de:	f001 faeb 	bl	8001cb8 <HAL_TIM_PWM_Start>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0x50>)
 80006e4:	1d3c      	adds	r4, r7, #4
 80006e6:	461d      	mov	r5, r3
 80006e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fc92 	bl	8003022 <osThreadCreate>
 80006fe:	4602      	mov	r2, r0
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <main+0x54>)
 8000702:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000704:	f002 fc86 	bl	8003014 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000708:	e7fe      	b.n	8000708 <main+0x48>
 800070a:	bf00      	nop
 800070c:	200045b0 	.word	0x200045b0
 8000710:	0800611c 	.word	0x0800611c
 8000714:	2000458c 	.word	0x2000458c

08000718 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f8dd 	bl	80058e6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <SystemClock_Config+0xc8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <SystemClock_Config+0xc8>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <SystemClock_Config+0xc8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <SystemClock_Config+0xcc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <SystemClock_Config+0xcc>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <SystemClock_Config+0xcc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 800078c:	2332      	movs	r3, #50	; 0x32
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fdc9 	bl	8001334 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x94>
		Error_Handler();
 80007a8:	f000 f946 	bl	8000a38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2101      	movs	r1, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f823 	bl	8001814 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc0>
		Error_Handler();
 80007d4:	f000 f930 	bl	8000a38 <Error_Handler>
	}
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 4999;
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000822:	f241 3287 	movw	r2, #4999	; 0x1387
 8000826:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000830:	2263      	movs	r2, #99	; 0x63
 8000832:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000840:	4823      	ldr	r0, [pc, #140]	; (80008d0 <MX_TIM2_Init+0xe8>)
 8000842:	f001 f9d9 	bl	8001bf8 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x68>
		Error_Handler();
 800084c:	f000 f8f4 	bl	8000a38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	4619      	mov	r1, r3
 800085c:	481c      	ldr	r0, [pc, #112]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800085e:	f001 fb23 	bl	8001ea8 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x84>
		Error_Handler();
 8000868:	f000 f8e6 	bl	8000a38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800086c:	4818      	ldr	r0, [pc, #96]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800086e:	f001 f9ee 	bl	8001c4e <HAL_TIM_PWM_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x94>
		Error_Handler();
 8000878:	f000 f8de 	bl	8000a38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4619      	mov	r1, r3
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_TIM2_Init+0xe8>)
 800088c:	f001 fe90 	bl	80025b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000896:	f000 f8cf 	bl	8000a38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	; 0x60
 800089c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM2_Init+0xe8>)
 80008b2:	f001 fa33 	bl	8001d1c <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80008bc:	f000 f8bc 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM2_Init+0xe8>)
 80008c2:	f000 f909 	bl	8000ad8 <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3738      	adds	r7, #56	; 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200045b0 	.word	0x200045b0

080008d4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f001 febe 	bl	800268c <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000916:	f000 f88f 	bl	8000a38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200045f0 	.word	0x200045f0
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_GPIO_Init+0xa8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_GPIO_Init+0xa8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_GPIO_Init+0xa8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <MX_GPIO_Init+0xa8>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_GPIO_Init+0xa8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_GPIO_Init+0xac>)
 80009b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0xb0>)
 80009c4:	f000 fb1c 	bl	8001000 <HAL_GPIO_Init>

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	10210000 	.word	0x10210000
 80009d8:	40020800 	.word	0x40020800

080009dc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b092      	sub	sp, #72	; 0x48
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	osThreadDef(timer, timer_thread, osPriorityNormal, 0, 128);
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <StartDefaultTask+0x54>)
 80009e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80009ea:	461d      	mov	r5, r3
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId timerTaskHandle = osThreadCreate(osThread(timer), NULL);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fb0f 	bl	8003022 <osThreadCreate>
 8000a04:	6478      	str	r0, [r7, #68]	; 0x44
	osThreadDef(input, input_thread, osPriorityNormal, 0, 128);
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <StartDefaultTask+0x58>)
 8000a08:	f107 0408 	add.w	r4, r7, #8
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId inputTaskHandle = osThreadCreate(osThread(input), NULL);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fafe 	bl	8003022 <osThreadCreate>
 8000a26:	6438      	str	r0, [r7, #64]	; 0x40
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f002 fb46 	bl	80030ba <osDelay>
 8000a2e:	e7fb      	b.n	8000a28 <StartDefaultTask+0x4c>
 8000a30:	08006140 	.word	0x08006140
 8000a34:	08006164 	.word	0x08006164

08000a38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a3e:	e7fe      	b.n	8000a3e <Error_Handler+0x6>

08000a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_MspInit+0x54>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <HAL_MspInit+0x54>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x54>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_MspInit+0x54>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_MspInit+0x54>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_MspInit+0x54>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210f      	movs	r1, #15
 8000a82:	f06f 0001 	mvn.w	r0, #1
 8000a86:	f000 fa92 	bl	8000fae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af8:	d11d      	bne.n	8000b36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_TIM_MspPostInit+0x68>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <HAL_TIM_MspPostInit+0x68>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_TIM_MspPostInit+0x68>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b16:	2320      	movs	r3, #32
 8000b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <HAL_TIM_MspPostInit+0x6c>)
 8000b32:	f000 fa65 	bl	8001000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_UART_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000bbe:	f000 fa1f 	bl	8001000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f8d2 	bl	8000db0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c0c:	f003 fde6 	bl	80047dc <xTaskGetSchedulerState>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d001      	beq.n	8000c1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c16:	f004 fbcf 	bl	80053b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f004 fe14 	bl	800587c <__errno>
 8000c54:	4602      	mov	r2, r0
 8000c56:	230c      	movs	r3, #12
 8000c58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20020000 	.word	0x20020000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000738 	.word	0x20000738
 8000c88:	20004678 	.word	0x20004678

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <SystemInit+0x28>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <SystemInit+0x28>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SystemInit+0x28>)
 8000ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cbe:	e003      	b.n	8000cc8 <LoopCopyDataInit>

08000cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cc6:	3104      	adds	r1, #4

08000cc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cd0:	d3f6      	bcc.n	8000cc0 <CopyDataInit>
  ldr  r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cd4:	e002      	b.n	8000cdc <LoopFillZerobss>

08000cd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cd8:	f842 3b04 	str.w	r3, [r2], #4

08000cdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ce0:	d3f9      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ce2:	f7ff ffd3 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f004 fdcf 	bl	8005888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fce9 	bl	80006c0 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cf4:	080061f4 	.word	0x080061f4
  ldr  r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cfc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000d00:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000d04:	20004678 	.word	0x20004678

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f92f 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe7e 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f939 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f90f 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20004630 	.word	0x20004630

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20004630 	.word	0x20004630

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_Delay+0x40>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff47 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff5c 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffb0 	bl	8000f54 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e159      	b.n	80012d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8148 	bne.w	80012ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d00b      	beq.n	800105a <HAL_GPIO_Init+0x5a>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104e:	2b11      	cmp	r3, #17
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b12      	cmp	r3, #18
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0xfc>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b12      	cmp	r3, #18
 80010fa:	d123      	bne.n	8001144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0203 	and.w	r2, r3, #3
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a2 	beq.w	80012ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x2e4>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <HAL_GPIO_Init+0x2e4>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_GPIO_Init+0x2e4>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a2:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x2e8>)
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x2ec>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x202>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a47      	ldr	r2, [pc, #284]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x1fe>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <HAL_GPIO_Init+0x2f4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x1fa>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_GPIO_Init+0x2f8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x1f6>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a44      	ldr	r2, [pc, #272]	; (80012fc <HAL_GPIO_Init+0x2fc>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x1f2>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e008      	b.n	8001204 <HAL_GPIO_Init+0x204>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x204>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e004      	b.n	8001204 <HAL_GPIO_Init+0x204>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x204>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x204>
 8001202:	2300      	movs	r3, #0
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4093      	lsls	r3, r2
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001214:	4934      	ldr	r1, [pc, #208]	; (80012e8 <HAL_GPIO_Init+0x2e8>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001246:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_GPIO_Init+0x300>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001270:	4a23      	ldr	r2, [pc, #140]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_GPIO_Init+0x300>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_GPIO_Init+0x300>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_GPIO_Init+0x300>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_GPIO_Init+0x300>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	f67f aea2 	bls.w	800101c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d8:	bf00      	nop
 80012da:	3724      	adds	r7, #36	; 0x24
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e25b      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d075      	beq.n	800143e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001352:	4ba3      	ldr	r3, [pc, #652]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b04      	cmp	r3, #4
 800135c:	d00c      	beq.n	8001378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4ba0      	ldr	r3, [pc, #640]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d112      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4b9d      	ldr	r3, [pc, #628]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001376:	d10b      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4b99      	ldr	r3, [pc, #612]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d05b      	beq.n	800143c <HAL_RCC_OscConfig+0x108>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d157      	bne.n	800143c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e236      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d106      	bne.n	80013a8 <HAL_RCC_OscConfig+0x74>
 800139a:	4b91      	ldr	r3, [pc, #580]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a90      	ldr	r2, [pc, #576]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a8a      	ldr	r2, [pc, #552]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a87      	ldr	r2, [pc, #540]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013cc:	4b84      	ldr	r3, [pc, #528]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a83      	ldr	r2, [pc, #524]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a80      	ldr	r2, [pc, #512]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fcf4 	bl	8000dd8 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fcf0 	bl	8000dd8 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1fb      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xc0>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fce0 	bl	8000dd8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fcdc 	bl	8000dd8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1e7      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b6c      	ldr	r3, [pc, #432]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0xe8>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144a:	4b65      	ldr	r3, [pc, #404]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b62      	ldr	r3, [pc, #392]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1bb      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4952      	ldr	r1, [pc, #328]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e03a      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_RCC_OscConfig+0x2b0>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fc95 	bl	8000dd8 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc91 	bl	8000dd8 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e19c      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4940      	ldr	r1, [pc, #256]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <HAL_RCC_OscConfig+0x2b0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc74 	bl	8000dd8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc70 	bl	8000dd8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e17b      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d030      	beq.n	8001580 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d016      	beq.n	8001554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <HAL_RCC_OscConfig+0x2b4>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fc54 	bl	8000dd8 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fc50 	bl	8000dd8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e15b      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x200>
 8001552:	e015      	b.n	8001580 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_OscConfig+0x2b4>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fc3d 	bl	8000dd8 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fc39 	bl	8000dd8 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e144      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a0 	beq.w	80016ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10f      	bne.n	80015be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_OscConfig+0x2b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d121      	bne.n	800160e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_RCC_OscConfig+0x2b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_RCC_OscConfig+0x2b8>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fbff 	bl	8000dd8 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	e011      	b.n	8001602 <HAL_RCC_OscConfig+0x2ce>
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	42470000 	.word	0x42470000
 80015e8:	42470e80 	.word	0x42470e80
 80015ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f0:	f7ff fbf2 	bl	8000dd8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0fd      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x4d4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x2f0>
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	; 0x70
 8001622:	e01c      	b.n	800165e <HAL_RCC_OscConfig+0x32a>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d10c      	bne.n	8001646 <HAL_RCC_OscConfig+0x312>
 800162c:	4b77      	ldr	r3, [pc, #476]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a76      	ldr	r2, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	4b74      	ldr	r3, [pc, #464]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a73      	ldr	r2, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	e00b      	b.n	800165e <HAL_RCC_OscConfig+0x32a>
 8001646:	4b71      	ldr	r3, [pc, #452]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	4a70      	ldr	r2, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6713      	str	r3, [r2, #112]	; 0x70
 8001652:	4b6e      	ldr	r3, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a6d      	ldr	r2, [pc, #436]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d015      	beq.n	8001692 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fbb7 	bl	8000dd8 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7ff fbb3 	bl	8000dd8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0bc      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0ee      	beq.n	800166e <HAL_RCC_OscConfig+0x33a>
 8001690:	e014      	b.n	80016bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff fba1 	bl	8000dd8 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169a:	f7ff fb9d 	bl	8000dd8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e0a6      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ee      	bne.n	800169a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d105      	bne.n	80016ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c2:	4b52      	ldr	r3, [pc, #328]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a51      	ldr	r2, [pc, #324]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8092 	beq.w	80017fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d05c      	beq.n	800179e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d141      	bne.n	8001770 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ec:	4b48      	ldr	r3, [pc, #288]	; (8001810 <HAL_RCC_OscConfig+0x4dc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fb71 	bl	8000dd8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fb6d 	bl	8000dd8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e078      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	019b      	lsls	r3, r3, #6
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	3b01      	subs	r3, #1
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	061b      	lsls	r3, r3, #24
 800173c:	4933      	ldr	r1, [pc, #204]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fb46 	bl	8000dd8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff fb42 	bl	8000dd8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e04d      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x41c>
 800176e:	e045      	b.n	80017fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_RCC_OscConfig+0x4dc>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fb2f 	bl	8000dd8 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff fb2b 	bl	8000dd8 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e036      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x44a>
 800179c:	e02e      	b.n	80017fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e029      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_RCC_OscConfig+0x4d8>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d11c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d115      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d106      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000
 800180c:	40023800 	.word	0x40023800
 8001810:	42470060 	.word	0x42470060

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0cc      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d90c      	bls.n	8001850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800188a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d044      	beq.n	8001934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d119      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e067      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f023 0203 	bic.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4934      	ldr	r1, [pc, #208]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001904:	f7ff fa68 	bl	8000dd8 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	e00a      	b.n	8001922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190c:	f7ff fa64 	bl	8000dd8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e04f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 020c 	and.w	r2, r3, #12
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	429a      	cmp	r2, r3
 8001932:	d1eb      	bne.n	800190c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d20c      	bcs.n	800195c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199a:	f000 f821 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800199e:	4601      	mov	r1, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	fa21 f303 	lsr.w	r3, r1, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9c8 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08006198 	.word	0x08006198
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d007      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x32>
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d008      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x38>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 80b4 	bne.w	8001b74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a0c:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a0e:	60bb      	str	r3, [r7, #8]
       break;
 8001a10:	e0b3      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a12:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a14:	60bb      	str	r3, [r7, #8]
      break;
 8001a16:	e0b0      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d04a      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	f04f 0400 	mov.w	r4, #0
 8001a38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	ea03 0501 	and.w	r5, r3, r1
 8001a44:	ea04 0602 	and.w	r6, r4, r2
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4632      	mov	r2, r6
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	f04f 0400 	mov.w	r4, #0
 8001a54:	0154      	lsls	r4, r2, #5
 8001a56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a5a:	014b      	lsls	r3, r1, #5
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4622      	mov	r2, r4
 8001a60:	1b49      	subs	r1, r1, r5
 8001a62:	eb62 0206 	sbc.w	r2, r2, r6
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	f04f 0400 	mov.w	r4, #0
 8001a6e:	0194      	lsls	r4, r2, #6
 8001a70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a74:	018b      	lsls	r3, r1, #6
 8001a76:	1a5b      	subs	r3, r3, r1
 8001a78:	eb64 0402 	sbc.w	r4, r4, r2
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	00e2      	lsls	r2, r4, #3
 8001a86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a8a:	00d9      	lsls	r1, r3, #3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4614      	mov	r4, r2
 8001a90:	195b      	adds	r3, r3, r5
 8001a92:	eb44 0406 	adc.w	r4, r4, r6
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	0262      	lsls	r2, r4, #9
 8001aa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001aa4:	0259      	lsls	r1, r3, #9
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4621      	mov	r1, r4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f04f 0400 	mov.w	r4, #0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	f7fe fbea 	bl	8000290 <__aeabi_uldivmod>
 8001abc:	4603      	mov	r3, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e049      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	f04f 0400 	mov.w	r4, #0
 8001ace:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	ea03 0501 	and.w	r5, r3, r1
 8001ada:	ea04 0602 	and.w	r6, r4, r2
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4632      	mov	r2, r6
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	f04f 0400 	mov.w	r4, #0
 8001aea:	0154      	lsls	r4, r2, #5
 8001aec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001af0:	014b      	lsls	r3, r1, #5
 8001af2:	4619      	mov	r1, r3
 8001af4:	4622      	mov	r2, r4
 8001af6:	1b49      	subs	r1, r1, r5
 8001af8:	eb62 0206 	sbc.w	r2, r2, r6
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	f04f 0400 	mov.w	r4, #0
 8001b04:	0194      	lsls	r4, r2, #6
 8001b06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b0a:	018b      	lsls	r3, r1, #6
 8001b0c:	1a5b      	subs	r3, r3, r1
 8001b0e:	eb64 0402 	sbc.w	r4, r4, r2
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	00e2      	lsls	r2, r4, #3
 8001b1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b20:	00d9      	lsls	r1, r3, #3
 8001b22:	460b      	mov	r3, r1
 8001b24:	4614      	mov	r4, r2
 8001b26:	195b      	adds	r3, r3, r5
 8001b28:	eb44 0406 	adc.w	r4, r4, r6
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	02a2      	lsls	r2, r4, #10
 8001b36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b3a:	0299      	lsls	r1, r3, #10
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f04f 0400 	mov.w	r4, #0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	f7fe fb9f 	bl	8000290 <__aeabi_uldivmod>
 8001b52:	4603      	mov	r3, r0
 8001b54:	460c      	mov	r4, r1
 8001b56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	3301      	adds	r3, #1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	60bb      	str	r3, [r7, #8]
      break;
 8001b72:	e002      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b76:	60bb      	str	r3, [r7, #8]
      break;
 8001b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	080061a8 	.word	0x080061a8

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd4:	f7ff ffdc 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4601      	mov	r1, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0b5b      	lsrs	r3, r3, #13
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	080061a8 	.word	0x080061a8

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e01d      	b.n	8001c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe ff3a 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 f9ee 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e01d      	b.n	8001c9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d106      	bne.n	8001c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f815 	bl	8001ca4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	f000 f9c3 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc4a 	bl	8002564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_TIM_PWM_Start+0x60>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d107      	bne.n	8001cea <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d007      	beq.n	8001d0c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40010000 	.word	0x40010000

08001d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e0b4      	b.n	8001ea0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	f200 809f 	bhi.w	8001e8c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d4e:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d89 	.word	0x08001d89
 8001d58:	08001e8d 	.word	0x08001e8d
 8001d5c:	08001e8d 	.word	0x08001e8d
 8001d60:	08001e8d 	.word	0x08001e8d
 8001d64:	08001dc9 	.word	0x08001dc9
 8001d68:	08001e8d 	.word	0x08001e8d
 8001d6c:	08001e8d 	.word	0x08001e8d
 8001d70:	08001e8d 	.word	0x08001e8d
 8001d74:	08001e0b 	.word	0x08001e0b
 8001d78:	08001e8d 	.word	0x08001e8d
 8001d7c:	08001e8d 	.word	0x08001e8d
 8001d80:	08001e8d 	.word	0x08001e8d
 8001d84:	08001e4b 	.word	0x08001e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f9c2 	bl	8002118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0208 	orr.w	r2, r2, #8
 8001da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0204 	bic.w	r2, r2, #4
 8001db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6999      	ldr	r1, [r3, #24]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	619a      	str	r2, [r3, #24]
      break;
 8001dc6:	e062      	b.n	8001e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fa08 	bl	80021e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6999      	ldr	r1, [r3, #24]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	021a      	lsls	r2, r3, #8
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	619a      	str	r2, [r3, #24]
      break;
 8001e08:	e041      	b.n	8001e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fa53 	bl	80022bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0208 	orr.w	r2, r2, #8
 8001e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	69da      	ldr	r2, [r3, #28]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0204 	bic.w	r2, r2, #4
 8001e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69d9      	ldr	r1, [r3, #28]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	61da      	str	r2, [r3, #28]
      break;
 8001e48:	e021      	b.n	8001e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fa9d 	bl	8002390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69d9      	ldr	r1, [r3, #28]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	021a      	lsls	r2, r3, #8
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	61da      	str	r2, [r3, #28]
      break;
 8001e8a:	e000      	b.n	8001e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001e8c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_TIM_ConfigClockSource+0x18>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e0a6      	b.n	800200e <HAL_TIM_ConfigClockSource+0x166>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ede:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d067      	beq.n	8001fc8 <HAL_TIM_ConfigClockSource+0x120>
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d80b      	bhi.n	8001f14 <HAL_TIM_ConfigClockSource+0x6c>
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d073      	beq.n	8001fe8 <HAL_TIM_ConfigClockSource+0x140>
 8001f00:	2b10      	cmp	r3, #16
 8001f02:	d802      	bhi.n	8001f0a <HAL_TIM_ConfigClockSource+0x62>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d06f      	beq.n	8001fe8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f08:	e078      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d06c      	beq.n	8001fe8 <HAL_TIM_ConfigClockSource+0x140>
 8001f0e:	2b30      	cmp	r3, #48	; 0x30
 8001f10:	d06a      	beq.n	8001fe8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f12:	e073      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f14:	2b70      	cmp	r3, #112	; 0x70
 8001f16:	d00d      	beq.n	8001f34 <HAL_TIM_ConfigClockSource+0x8c>
 8001f18:	2b70      	cmp	r3, #112	; 0x70
 8001f1a:	d804      	bhi.n	8001f26 <HAL_TIM_ConfigClockSource+0x7e>
 8001f1c:	2b50      	cmp	r3, #80	; 0x50
 8001f1e:	d033      	beq.n	8001f88 <HAL_TIM_ConfigClockSource+0xe0>
 8001f20:	2b60      	cmp	r3, #96	; 0x60
 8001f22:	d041      	beq.n	8001fa8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f24:	e06a      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2a:	d066      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x152>
 8001f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f30:	d017      	beq.n	8001f62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f32:	e063      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f000 faee 	bl	8002524 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	609a      	str	r2, [r3, #8]
      break;
 8001f60:	e04c      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f000 fad7 	bl	8002524 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f84:	609a      	str	r2, [r3, #8]
      break;
 8001f86:	e039      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	461a      	mov	r2, r3
 8001f96:	f000 fa4b 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2150      	movs	r1, #80	; 0x50
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 faa4 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 8001fa6:	e029      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f000 fa6a 	bl	800248e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2160      	movs	r1, #96	; 0x60
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fa94 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 8001fc6:	e019      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f000 fa2b 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2140      	movs	r1, #64	; 0x40
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fa84 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 8001fe6:	e009      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 fa7b 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e000      	b.n	8001ffc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a34      	ldr	r2, [pc, #208]	; (80020fc <TIM_Base_SetConfig+0xe4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00f      	beq.n	8002050 <TIM_Base_SetConfig+0x38>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d00b      	beq.n	8002050 <TIM_Base_SetConfig+0x38>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a31      	ldr	r2, [pc, #196]	; (8002100 <TIM_Base_SetConfig+0xe8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <TIM_Base_SetConfig+0x38>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a30      	ldr	r2, [pc, #192]	; (8002104 <TIM_Base_SetConfig+0xec>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_Base_SetConfig+0x38>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <TIM_Base_SetConfig+0xf0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <TIM_Base_SetConfig+0xe4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01b      	beq.n	80020a2 <TIM_Base_SetConfig+0x8a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d017      	beq.n	80020a2 <TIM_Base_SetConfig+0x8a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <TIM_Base_SetConfig+0xe8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <TIM_Base_SetConfig+0x8a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a21      	ldr	r2, [pc, #132]	; (8002104 <TIM_Base_SetConfig+0xec>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00f      	beq.n	80020a2 <TIM_Base_SetConfig+0x8a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a20      	ldr	r2, [pc, #128]	; (8002108 <TIM_Base_SetConfig+0xf0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00b      	beq.n	80020a2 <TIM_Base_SetConfig+0x8a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1f      	ldr	r2, [pc, #124]	; (800210c <TIM_Base_SetConfig+0xf4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <TIM_Base_SetConfig+0x8a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <TIM_Base_SetConfig+0xf8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d003      	beq.n	80020a2 <TIM_Base_SetConfig+0x8a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <TIM_Base_SetConfig+0xfc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d108      	bne.n	80020b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <TIM_Base_SetConfig+0xe4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d103      	bne.n	80020e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	615a      	str	r2, [r3, #20]
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40000400 	.word	0x40000400
 8002104:	40000800 	.word	0x40000800
 8002108:	40000c00 	.word	0x40000c00
 800210c:	40014000 	.word	0x40014000
 8002110:	40014400 	.word	0x40014400
 8002114:	40014800 	.word	0x40014800

08002118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	f023 0201 	bic.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f023 0302 	bic.w	r3, r3, #2
 8002160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <TIM_OC1_SetConfig+0xc8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10c      	bne.n	800218e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0308 	bic.w	r3, r3, #8
 800217a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <TIM_OC1_SetConfig+0xc8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d111      	bne.n	80021ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800219c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	621a      	str	r2, [r3, #32]
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40010000 	.word	0x40010000

080021e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f023 0210 	bic.w	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f023 0320 	bic.w	r3, r3, #32
 800222e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <TIM_OC2_SetConfig+0xd4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d10d      	bne.n	8002260 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800225e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <TIM_OC2_SetConfig+0xd4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d113      	bne.n	8002290 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	621a      	str	r2, [r3, #32]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40010000 	.word	0x40010000

080022bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1d      	ldr	r2, [pc, #116]	; (800238c <TIM_OC3_SetConfig+0xd0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10d      	bne.n	8002336 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <TIM_OC3_SetConfig+0xd0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d113      	bne.n	8002366 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800234c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	621a      	str	r2, [r3, #32]
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40010000 	.word	0x40010000

08002390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	031b      	lsls	r3, r3, #12
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <TIM_OC4_SetConfig+0x9c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d109      	bne.n	8002404 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	621a      	str	r2, [r3, #32]
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000

08002430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f023 0201 	bic.w	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f023 030a 	bic.w	r3, r3, #10
 800246c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0210 	bic.w	r2, r3, #16
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	031b      	lsls	r3, r3, #12
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	f043 0307 	orr.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800253e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	021a      	lsls	r2, r3, #8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	431a      	orrs	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	609a      	str	r2, [r3, #8]
}
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2201      	movs	r2, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a1a      	ldr	r2, [r3, #32]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a1a      	ldr	r2, [r3, #32]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	621a      	str	r2, [r3, #32]
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e050      	b.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d018      	beq.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d013      	beq.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00e      	beq.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d004      	beq.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10c      	bne.n	8002658 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	4313      	orrs	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40010000 	.word	0x40010000
 800267c:	40000400 	.word	0x40000400
 8002680:	40000800 	.word	0x40000800
 8002684:	40000c00 	.word	0x40000c00
 8002688:	40014000 	.word	0x40014000

0800268c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e03f      	b.n	800271e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fa48 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f90b 	bl	80028ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 8083 	bne.w	800284e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Transmit+0x2e>
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e07b      	b.n	8002850 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_UART_Transmit+0x40>
 8002762:	2302      	movs	r3, #2
 8002764:	e074      	b.n	8002850 <HAL_UART_Transmit+0x12a>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2221      	movs	r2, #33	; 0x21
 8002778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800277c:	f7fe fb2c 	bl	8000dd8 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002796:	e042      	b.n	800281e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d122      	bne.n	80027f6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f84c 	bl	8002858 <UART_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e042      	b.n	8002850 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3302      	adds	r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e017      	b.n	800281e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	e013      	b.n	800281e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f829 	bl	8002858 <UART_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e01f      	b.n	8002850 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	60ba      	str	r2, [r7, #8]
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1b7      	bne.n	8002798 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2200      	movs	r2, #0
 8002830:	2140      	movs	r1, #64	; 0x40
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f810 	bl	8002858 <UART_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e006      	b.n	8002850 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002868:	e02c      	b.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d028      	beq.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <UART_WaitOnFlagUntilTimeout+0x30>
 8002878:	f7fe faae 	bl	8000dd8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	429a      	cmp	r2, r3
 8002886:	d21d      	bcs.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002896:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e00f      	b.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d0c3      	beq.n	800286a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800292e:	f023 030c 	bic.w	r3, r3, #12
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	68f9      	ldr	r1, [r7, #12]
 8002938:	430b      	orrs	r3, r1
 800293a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800295a:	f040 818b 	bne.w	8002c74 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4ac1      	ldr	r2, [pc, #772]	; (8002c68 <UART_SetConfig+0x37c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d005      	beq.n	8002974 <UART_SetConfig+0x88>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4abf      	ldr	r2, [pc, #764]	; (8002c6c <UART_SetConfig+0x380>)
 800296e:	4293      	cmp	r3, r2
 8002970:	f040 80bd 	bne.w	8002aee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7ff f92c 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8002978:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	461d      	mov	r5, r3
 800297e:	f04f 0600 	mov.w	r6, #0
 8002982:	46a8      	mov	r8, r5
 8002984:	46b1      	mov	r9, r6
 8002986:	eb18 0308 	adds.w	r3, r8, r8
 800298a:	eb49 0409 	adc.w	r4, r9, r9
 800298e:	4698      	mov	r8, r3
 8002990:	46a1      	mov	r9, r4
 8002992:	eb18 0805 	adds.w	r8, r8, r5
 8002996:	eb49 0906 	adc.w	r9, r9, r6
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029ae:	4688      	mov	r8, r1
 80029b0:	4691      	mov	r9, r2
 80029b2:	eb18 0005 	adds.w	r0, r8, r5
 80029b6:	eb49 0106 	adc.w	r1, r9, r6
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	461d      	mov	r5, r3
 80029c0:	f04f 0600 	mov.w	r6, #0
 80029c4:	196b      	adds	r3, r5, r5
 80029c6:	eb46 0406 	adc.w	r4, r6, r6
 80029ca:	461a      	mov	r2, r3
 80029cc:	4623      	mov	r3, r4
 80029ce:	f7fd fc5f 	bl	8000290 <__aeabi_uldivmod>
 80029d2:	4603      	mov	r3, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	461a      	mov	r2, r3
 80029d8:	4ba5      	ldr	r3, [pc, #660]	; (8002c70 <UART_SetConfig+0x384>)
 80029da:	fba3 2302 	umull	r2, r3, r3, r2
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	461d      	mov	r5, r3
 80029e8:	f04f 0600 	mov.w	r6, #0
 80029ec:	46a9      	mov	r9, r5
 80029ee:	46b2      	mov	sl, r6
 80029f0:	eb19 0309 	adds.w	r3, r9, r9
 80029f4:	eb4a 040a 	adc.w	r4, sl, sl
 80029f8:	4699      	mov	r9, r3
 80029fa:	46a2      	mov	sl, r4
 80029fc:	eb19 0905 	adds.w	r9, r9, r5
 8002a00:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a18:	4689      	mov	r9, r1
 8002a1a:	4692      	mov	sl, r2
 8002a1c:	eb19 0005 	adds.w	r0, r9, r5
 8002a20:	eb4a 0106 	adc.w	r1, sl, r6
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	461d      	mov	r5, r3
 8002a2a:	f04f 0600 	mov.w	r6, #0
 8002a2e:	196b      	adds	r3, r5, r5
 8002a30:	eb46 0406 	adc.w	r4, r6, r6
 8002a34:	461a      	mov	r2, r3
 8002a36:	4623      	mov	r3, r4
 8002a38:	f7fd fc2a 	bl	8000290 <__aeabi_uldivmod>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <UART_SetConfig+0x384>)
 8002a44:	fba3 1302 	umull	r1, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	2164      	movs	r1, #100	; 0x64
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	3332      	adds	r3, #50	; 0x32
 8002a56:	4a86      	ldr	r2, [pc, #536]	; (8002c70 <UART_SetConfig+0x384>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a64:	4498      	add	r8, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	461d      	mov	r5, r3
 8002a6a:	f04f 0600 	mov.w	r6, #0
 8002a6e:	46a9      	mov	r9, r5
 8002a70:	46b2      	mov	sl, r6
 8002a72:	eb19 0309 	adds.w	r3, r9, r9
 8002a76:	eb4a 040a 	adc.w	r4, sl, sl
 8002a7a:	4699      	mov	r9, r3
 8002a7c:	46a2      	mov	sl, r4
 8002a7e:	eb19 0905 	adds.w	r9, r9, r5
 8002a82:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a9a:	4689      	mov	r9, r1
 8002a9c:	4692      	mov	sl, r2
 8002a9e:	eb19 0005 	adds.w	r0, r9, r5
 8002aa2:	eb4a 0106 	adc.w	r1, sl, r6
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	461d      	mov	r5, r3
 8002aac:	f04f 0600 	mov.w	r6, #0
 8002ab0:	196b      	adds	r3, r5, r5
 8002ab2:	eb46 0406 	adc.w	r4, r6, r6
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4623      	mov	r3, r4
 8002aba:	f7fd fbe9 	bl	8000290 <__aeabi_uldivmod>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <UART_SetConfig+0x384>)
 8002ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2164      	movs	r1, #100	; 0x64
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <UART_SetConfig+0x384>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 0207 	and.w	r2, r3, #7
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4442      	add	r2, r8
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e26f      	b.n	8002fce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aee:	f7ff f85b 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002af2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	461d      	mov	r5, r3
 8002af8:	f04f 0600 	mov.w	r6, #0
 8002afc:	46a8      	mov	r8, r5
 8002afe:	46b1      	mov	r9, r6
 8002b00:	eb18 0308 	adds.w	r3, r8, r8
 8002b04:	eb49 0409 	adc.w	r4, r9, r9
 8002b08:	4698      	mov	r8, r3
 8002b0a:	46a1      	mov	r9, r4
 8002b0c:	eb18 0805 	adds.w	r8, r8, r5
 8002b10:	eb49 0906 	adc.w	r9, r9, r6
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b28:	4688      	mov	r8, r1
 8002b2a:	4691      	mov	r9, r2
 8002b2c:	eb18 0005 	adds.w	r0, r8, r5
 8002b30:	eb49 0106 	adc.w	r1, r9, r6
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	461d      	mov	r5, r3
 8002b3a:	f04f 0600 	mov.w	r6, #0
 8002b3e:	196b      	adds	r3, r5, r5
 8002b40:	eb46 0406 	adc.w	r4, r6, r6
 8002b44:	461a      	mov	r2, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	f7fd fba2 	bl	8000290 <__aeabi_uldivmod>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <UART_SetConfig+0x384>)
 8002b54:	fba3 2302 	umull	r2, r3, r3, r2
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	461d      	mov	r5, r3
 8002b62:	f04f 0600 	mov.w	r6, #0
 8002b66:	46a9      	mov	r9, r5
 8002b68:	46b2      	mov	sl, r6
 8002b6a:	eb19 0309 	adds.w	r3, r9, r9
 8002b6e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b72:	4699      	mov	r9, r3
 8002b74:	46a2      	mov	sl, r4
 8002b76:	eb19 0905 	adds.w	r9, r9, r5
 8002b7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b92:	4689      	mov	r9, r1
 8002b94:	4692      	mov	sl, r2
 8002b96:	eb19 0005 	adds.w	r0, r9, r5
 8002b9a:	eb4a 0106 	adc.w	r1, sl, r6
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	f04f 0600 	mov.w	r6, #0
 8002ba8:	196b      	adds	r3, r5, r5
 8002baa:	eb46 0406 	adc.w	r4, r6, r6
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	f7fd fb6d 	bl	8000290 <__aeabi_uldivmod>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <UART_SetConfig+0x384>)
 8002bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2164      	movs	r1, #100	; 0x64
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	3332      	adds	r3, #50	; 0x32
 8002bd0:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <UART_SetConfig+0x384>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bde:	4498      	add	r8, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	461d      	mov	r5, r3
 8002be4:	f04f 0600 	mov.w	r6, #0
 8002be8:	46a9      	mov	r9, r5
 8002bea:	46b2      	mov	sl, r6
 8002bec:	eb19 0309 	adds.w	r3, r9, r9
 8002bf0:	eb4a 040a 	adc.w	r4, sl, sl
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	46a2      	mov	sl, r4
 8002bf8:	eb19 0905 	adds.w	r9, r9, r5
 8002bfc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c14:	4689      	mov	r9, r1
 8002c16:	4692      	mov	sl, r2
 8002c18:	eb19 0005 	adds.w	r0, r9, r5
 8002c1c:	eb4a 0106 	adc.w	r1, sl, r6
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	461d      	mov	r5, r3
 8002c26:	f04f 0600 	mov.w	r6, #0
 8002c2a:	196b      	adds	r3, r5, r5
 8002c2c:	eb46 0406 	adc.w	r4, r6, r6
 8002c30:	461a      	mov	r2, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	f7fd fb2c 	bl	8000290 <__aeabi_uldivmod>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <UART_SetConfig+0x384>)
 8002c40:	fba3 1302 	umull	r1, r3, r3, r2
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	2164      	movs	r1, #100	; 0x64
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	3332      	adds	r3, #50	; 0x32
 8002c52:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <UART_SetConfig+0x384>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	f003 0207 	and.w	r2, r3, #7
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4442      	add	r2, r8
 8002c64:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c66:	e1b2      	b.n	8002fce <UART_SetConfig+0x6e2>
 8002c68:	40011000 	.word	0x40011000
 8002c6c:	40011400 	.word	0x40011400
 8002c70:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4ad7      	ldr	r2, [pc, #860]	; (8002fd8 <UART_SetConfig+0x6ec>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d005      	beq.n	8002c8a <UART_SetConfig+0x39e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4ad6      	ldr	r2, [pc, #856]	; (8002fdc <UART_SetConfig+0x6f0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	f040 80d1 	bne.w	8002e2c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c8a:	f7fe ffa1 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8002c8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	469a      	mov	sl, r3
 8002c94:	f04f 0b00 	mov.w	fp, #0
 8002c98:	46d0      	mov	r8, sl
 8002c9a:	46d9      	mov	r9, fp
 8002c9c:	eb18 0308 	adds.w	r3, r8, r8
 8002ca0:	eb49 0409 	adc.w	r4, r9, r9
 8002ca4:	4698      	mov	r8, r3
 8002ca6:	46a1      	mov	r9, r4
 8002ca8:	eb18 080a 	adds.w	r8, r8, sl
 8002cac:	eb49 090b 	adc.w	r9, r9, fp
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cc4:	4688      	mov	r8, r1
 8002cc6:	4691      	mov	r9, r2
 8002cc8:	eb1a 0508 	adds.w	r5, sl, r8
 8002ccc:	eb4b 0609 	adc.w	r6, fp, r9
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	f04f 0400 	mov.w	r4, #0
 8002ce2:	0094      	lsls	r4, r2, #2
 8002ce4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ce8:	008b      	lsls	r3, r1, #2
 8002cea:	461a      	mov	r2, r3
 8002cec:	4623      	mov	r3, r4
 8002cee:	4628      	mov	r0, r5
 8002cf0:	4631      	mov	r1, r6
 8002cf2:	f7fd facd 	bl	8000290 <__aeabi_uldivmod>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	460c      	mov	r4, r1
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4bb8      	ldr	r3, [pc, #736]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	469b      	mov	fp, r3
 8002d0c:	f04f 0c00 	mov.w	ip, #0
 8002d10:	46d9      	mov	r9, fp
 8002d12:	46e2      	mov	sl, ip
 8002d14:	eb19 0309 	adds.w	r3, r9, r9
 8002d18:	eb4a 040a 	adc.w	r4, sl, sl
 8002d1c:	4699      	mov	r9, r3
 8002d1e:	46a2      	mov	sl, r4
 8002d20:	eb19 090b 	adds.w	r9, r9, fp
 8002d24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d3c:	4689      	mov	r9, r1
 8002d3e:	4692      	mov	sl, r2
 8002d40:	eb1b 0509 	adds.w	r5, fp, r9
 8002d44:	eb4c 060a 	adc.w	r6, ip, sl
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	0094      	lsls	r4, r2, #2
 8002d5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d60:	008b      	lsls	r3, r1, #2
 8002d62:	461a      	mov	r2, r3
 8002d64:	4623      	mov	r3, r4
 8002d66:	4628      	mov	r0, r5
 8002d68:	4631      	mov	r1, r6
 8002d6a:	f7fd fa91 	bl	8000290 <__aeabi_uldivmod>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	460c      	mov	r4, r1
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b9a      	ldr	r3, [pc, #616]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002d76:	fba3 1302 	umull	r1, r3, r3, r2
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2164      	movs	r1, #100	; 0x64
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	3332      	adds	r3, #50	; 0x32
 8002d88:	4a95      	ldr	r2, [pc, #596]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d94:	4498      	add	r8, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	469b      	mov	fp, r3
 8002d9a:	f04f 0c00 	mov.w	ip, #0
 8002d9e:	46d9      	mov	r9, fp
 8002da0:	46e2      	mov	sl, ip
 8002da2:	eb19 0309 	adds.w	r3, r9, r9
 8002da6:	eb4a 040a 	adc.w	r4, sl, sl
 8002daa:	4699      	mov	r9, r3
 8002dac:	46a2      	mov	sl, r4
 8002dae:	eb19 090b 	adds.w	r9, r9, fp
 8002db2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dca:	4689      	mov	r9, r1
 8002dcc:	4692      	mov	sl, r2
 8002dce:	eb1b 0509 	adds.w	r5, fp, r9
 8002dd2:	eb4c 060a 	adc.w	r6, ip, sl
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	f04f 0400 	mov.w	r4, #0
 8002de8:	0094      	lsls	r4, r2, #2
 8002dea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dee:	008b      	lsls	r3, r1, #2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	4628      	mov	r0, r5
 8002df6:	4631      	mov	r1, r6
 8002df8:	f7fd fa4a 	bl	8000290 <__aeabi_uldivmod>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	460c      	mov	r4, r1
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b77      	ldr	r3, [pc, #476]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002e04:	fba3 1302 	umull	r1, r3, r3, r2
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	2164      	movs	r1, #100	; 0x64
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	3332      	adds	r3, #50	; 0x32
 8002e16:	4a72      	ldr	r2, [pc, #456]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4442      	add	r2, r8
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	e0d0      	b.n	8002fce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2c:	f7fe febc 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002e30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	469a      	mov	sl, r3
 8002e36:	f04f 0b00 	mov.w	fp, #0
 8002e3a:	46d0      	mov	r8, sl
 8002e3c:	46d9      	mov	r9, fp
 8002e3e:	eb18 0308 	adds.w	r3, r8, r8
 8002e42:	eb49 0409 	adc.w	r4, r9, r9
 8002e46:	4698      	mov	r8, r3
 8002e48:	46a1      	mov	r9, r4
 8002e4a:	eb18 080a 	adds.w	r8, r8, sl
 8002e4e:	eb49 090b 	adc.w	r9, r9, fp
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e66:	4688      	mov	r8, r1
 8002e68:	4691      	mov	r9, r2
 8002e6a:	eb1a 0508 	adds.w	r5, sl, r8
 8002e6e:	eb4b 0609 	adc.w	r6, fp, r9
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4619      	mov	r1, r3
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	f04f 0400 	mov.w	r4, #0
 8002e84:	0094      	lsls	r4, r2, #2
 8002e86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e8a:	008b      	lsls	r3, r1, #2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	4631      	mov	r1, r6
 8002e94:	f7fd f9fc 	bl	8000290 <__aeabi_uldivmod>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	469b      	mov	fp, r3
 8002eae:	f04f 0c00 	mov.w	ip, #0
 8002eb2:	46d9      	mov	r9, fp
 8002eb4:	46e2      	mov	sl, ip
 8002eb6:	eb19 0309 	adds.w	r3, r9, r9
 8002eba:	eb4a 040a 	adc.w	r4, sl, sl
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	46a2      	mov	sl, r4
 8002ec2:	eb19 090b 	adds.w	r9, r9, fp
 8002ec6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ede:	4689      	mov	r9, r1
 8002ee0:	4692      	mov	sl, r2
 8002ee2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ee6:	eb4c 060a 	adc.w	r6, ip, sl
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	f04f 0400 	mov.w	r4, #0
 8002efc:	0094      	lsls	r4, r2, #2
 8002efe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f02:	008b      	lsls	r3, r1, #2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	f7fd f9c0 	bl	8000290 <__aeabi_uldivmod>
 8002f10:	4603      	mov	r3, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b32      	ldr	r3, [pc, #200]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002f18:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	2164      	movs	r1, #100	; 0x64
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	3332      	adds	r3, #50	; 0x32
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f36:	4498      	add	r8, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	469b      	mov	fp, r3
 8002f3c:	f04f 0c00 	mov.w	ip, #0
 8002f40:	46d9      	mov	r9, fp
 8002f42:	46e2      	mov	sl, ip
 8002f44:	eb19 0309 	adds.w	r3, r9, r9
 8002f48:	eb4a 040a 	adc.w	r4, sl, sl
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	46a2      	mov	sl, r4
 8002f50:	eb19 090b 	adds.w	r9, r9, fp
 8002f54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f6c:	4689      	mov	r9, r1
 8002f6e:	4692      	mov	sl, r2
 8002f70:	eb1b 0509 	adds.w	r5, fp, r9
 8002f74:	eb4c 060a 	adc.w	r6, ip, sl
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	f04f 0400 	mov.w	r4, #0
 8002f8a:	0094      	lsls	r4, r2, #2
 8002f8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f90:	008b      	lsls	r3, r1, #2
 8002f92:	461a      	mov	r2, r3
 8002f94:	4623      	mov	r3, r4
 8002f96:	4628      	mov	r0, r5
 8002f98:	4631      	mov	r1, r6
 8002f9a:	f7fd f979 	bl	8000290 <__aeabi_uldivmod>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2164      	movs	r1, #100	; 0x64
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	; 0x32
 8002fb8:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <UART_SetConfig+0x6f4>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4442      	add	r2, r8
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	e7ff      	b.n	8002fce <UART_SetConfig+0x6e2>
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd8:	40011000 	.word	0x40011000
 8002fdc:	40011400 	.word	0x40011400
 8002fe0:	51eb851f 	.word	0x51eb851f

08002fe4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff6:	2b84      	cmp	r3, #132	; 0x84
 8002ff8:	d005      	beq.n	8003006 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ffa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	3303      	adds	r3, #3
 8003004:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003018:	f000 ffac 	bl	8003f74 <vTaskStartScheduler>
  
  return osOK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	bd80      	pop	{r7, pc}

08003022 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003022:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003024:	b089      	sub	sp, #36	; 0x24
 8003026:	af04      	add	r7, sp, #16
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <osThreadCreate+0x54>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01c      	beq.n	8003076 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685c      	ldr	r4, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681d      	ldr	r5, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691e      	ldr	r6, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffc8 	bl	8002fe4 <makeFreeRtosPriority>
 8003054:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800305e:	9202      	str	r2, [sp, #8]
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	9100      	str	r1, [sp, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4632      	mov	r2, r6
 8003068:	4629      	mov	r1, r5
 800306a:	4620      	mov	r0, r4
 800306c:	f000 fdbe 	bl	8003bec <xTaskCreateStatic>
 8003070:	4603      	mov	r3, r0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e01c      	b.n	80030b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685c      	ldr	r4, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003082:	b29e      	uxth	r6, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ffaa 	bl	8002fe4 <makeFreeRtosPriority>
 8003090:	4602      	mov	r2, r0
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	9200      	str	r2, [sp, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	4632      	mov	r2, r6
 800309e:	4629      	mov	r1, r5
 80030a0:	4620      	mov	r0, r4
 80030a2:	f000 fdfd 	bl	8003ca0 <xTaskCreate>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030b0:	68fb      	ldr	r3, [r7, #12]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <osDelay+0x16>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	e000      	b.n	80030d2 <osDelay+0x18>
 80030d0:	2301      	movs	r3, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 ff1a 	bl	8003f0c <vTaskDelay>
  
  return osOK;
 80030d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f103 0208 	add.w	r2, r3, #8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f04f 32ff 	mov.w	r2, #4294967295
 80030fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f103 0208 	add.w	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f103 0208 	add.w	r2, r3, #8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	601a      	str	r2, [r3, #0]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d103      	bne.n	80031a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	e00c      	b.n	80031be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3308      	adds	r3, #8
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e002      	b.n	80031b2 <vListInsert+0x2e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d2f6      	bcs.n	80031ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6892      	ldr	r2, [r2, #8]
 800320c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6852      	ldr	r2, [r2, #4]
 8003216:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	d103      	bne.n	800322a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	e7fe      	b.n	8003272 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003274:	f002 f812 	bl	800529c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	3b01      	subs	r3, #1
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d114      	bne.n	80032f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01a      	beq.n	8003308 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3310      	adds	r3, #16
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f8ca 	bl	8004470 <xTaskRemoveFromEventList>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <xQueueGenericReset+0xcc>)
 80032e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	e009      	b.n	8003308 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3310      	adds	r3, #16
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fef2 	bl	80030e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3324      	adds	r3, #36	; 0x24
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff feed 	bl	80030e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003308:	f001 fff6 	bl	80052f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800330c:	2301      	movs	r3, #1
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	; 0x38
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <xQueueGenericCreateStatic+0x28>
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
 8003342:	e7fe      	b.n	8003342 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <xQueueGenericCreateStatic+0x42>
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
 800335c:	e7fe      	b.n	800335c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <xQueueGenericCreateStatic+0x4e>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <xQueueGenericCreateStatic+0x52>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <xQueueGenericCreateStatic+0x54>
 800336e:	2300      	movs	r3, #0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <xQueueGenericCreateStatic+0x6c>
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	e7fe      	b.n	8003386 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <xQueueGenericCreateStatic+0x78>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <xQueueGenericCreateStatic+0x7c>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <xQueueGenericCreateStatic+0x7e>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <xQueueGenericCreateStatic+0x96>
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e7fe      	b.n	80033b0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033b2:	2348      	movs	r3, #72	; 0x48
 80033b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b48      	cmp	r3, #72	; 0x48
 80033ba:	d009      	beq.n	80033d0 <xQueueGenericCreateStatic+0xb4>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	e7fe      	b.n	80033ce <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f805 	bl	8003402 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3730      	adds	r7, #48	; 0x30
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e002      	b.n	8003424 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003430:	2101      	movs	r1, #1
 8003432:	69b8      	ldr	r0, [r7, #24]
 8003434:	f7ff ff0a 	bl	800324c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	; 0x38
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800344e:	2300      	movs	r3, #0
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <xQueueGenericSend+0x30>
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	e7fe      	b.n	800346e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <xQueueGenericSend+0x3e>
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <xQueueGenericSend+0x42>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <xQueueGenericSend+0x44>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <xQueueGenericSend+0x5c>
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
 800349a:	e7fe      	b.n	800349a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d103      	bne.n	80034aa <xQueueGenericSend+0x6a>
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <xQueueGenericSend+0x6e>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <xQueueGenericSend+0x70>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <xQueueGenericSend+0x88>
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	623b      	str	r3, [r7, #32]
 80034c6:	e7fe      	b.n	80034c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034c8:	f001 f988 	bl	80047dc <xTaskGetSchedulerState>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <xQueueGenericSend+0x98>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <xQueueGenericSend+0x9c>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <xQueueGenericSend+0x9e>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <xQueueGenericSend+0xb6>
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	e7fe      	b.n	80034f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034f6:	f001 fed1 	bl	800529c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <xQueueGenericSend+0xcc>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d129      	bne.n	8003560 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003512:	f000 f9ff 	bl	8003914 <prvCopyDataToQueue>
 8003516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	3324      	adds	r3, #36	; 0x24
 8003524:	4618      	mov	r0, r3
 8003526:	f000 ffa3 	bl	8004470 <xTaskRemoveFromEventList>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d013      	beq.n	8003558 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003530:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <xQueueGenericSend+0x1f0>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	e00a      	b.n	8003558 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003548:	4b39      	ldr	r3, [pc, #228]	; (8003630 <xQueueGenericSend+0x1f0>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003558:	f001 fece 	bl	80052f8 <vPortExitCritical>
				return pdPASS;
 800355c:	2301      	movs	r3, #1
 800355e:	e063      	b.n	8003628 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003566:	f001 fec7 	bl	80052f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800356a:	2300      	movs	r3, #0
 800356c:	e05c      	b.n	8003628 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4618      	mov	r0, r3
 800357a:	f000 ffdb 	bl	8004534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800357e:	2301      	movs	r3, #1
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003582:	f001 feb9 	bl	80052f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003586:	f000 fd59 	bl	800403c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800358a:	f001 fe87 	bl	800529c <vPortEnterCritical>
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003594:	b25b      	sxtb	r3, r3
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d103      	bne.n	80035a4 <xQueueGenericSend+0x164>
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d103      	bne.n	80035ba <xQueueGenericSend+0x17a>
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ba:	f001 fe9d 	bl	80052f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035be:	1d3a      	adds	r2, r7, #4
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 ffca 	bl	8004560 <xTaskCheckForTimeOut>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d124      	bne.n	800361c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035d4:	f000 fa96 	bl	8003b04 <prvIsQueueFull>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	3310      	adds	r3, #16
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fef4 	bl	80043d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ee:	f000 fa21 	bl	8003a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035f2:	f000 fd31 	bl	8004058 <xTaskResumeAll>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f af7c 	bne.w	80034f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <xQueueGenericSend+0x1f0>)
 8003600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	e772      	b.n	80034f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003612:	f000 fa0f 	bl	8003a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003616:	f000 fd1f 	bl	8004058 <xTaskResumeAll>
 800361a:	e76c      	b.n	80034f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800361c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800361e:	f000 fa09 	bl	8003a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003622:	f000 fd19 	bl	8004058 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003628:	4618      	mov	r0, r3
 800362a:	3738      	adds	r7, #56	; 0x38
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	e000ed04 	.word	0xe000ed04

08003634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08e      	sub	sp, #56	; 0x38
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <xQueueGenericSendFromISR+0x2c>
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e7fe      	b.n	800365e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <xQueueGenericSendFromISR+0x3a>
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <xQueueGenericSendFromISR+0x3e>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <xQueueGenericSendFromISR+0x40>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <xQueueGenericSendFromISR+0x58>
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	e7fe      	b.n	800368a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d103      	bne.n	800369a <xQueueGenericSendFromISR+0x66>
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <xQueueGenericSendFromISR+0x6a>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <xQueueGenericSendFromISR+0x6c>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <xQueueGenericSendFromISR+0x84>
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	e7fe      	b.n	80036b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036b8:	f001 fecc 	bl	8005454 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036bc:	f3ef 8211 	mrs	r2, BASEPRI
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	61ba      	str	r2, [r7, #24]
 80036d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <xQueueGenericSendFromISR+0xb6>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d12c      	bne.n	8003744 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036fa:	f000 f90b 	bl	8003914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d112      	bne.n	800372e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d016      	beq.n	800373e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	4618      	mov	r0, r3
 8003716:	f000 feab 	bl	8004470 <xTaskRemoveFromEventList>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e007      	b.n	800373e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800372e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003732:	3301      	adds	r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	b25a      	sxtb	r2, r3
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800373e:	2301      	movs	r3, #1
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003742:	e001      	b.n	8003748 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003744:	2300      	movs	r3, #0
 8003746:	637b      	str	r3, [r7, #52]	; 0x34
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003754:	4618      	mov	r0, r3
 8003756:	3738      	adds	r7, #56	; 0x38
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	; 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <xQueueReceive+0x2e>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	e7fe      	b.n	8003788 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <xQueueReceive+0x3c>
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <xQueueReceive+0x40>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <xQueueReceive+0x42>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <xQueueReceive+0x5a>
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	e7fe      	b.n	80037b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037b6:	f001 f811 	bl	80047dc <xTaskGetSchedulerState>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <xQueueReceive+0x6a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <xQueueReceive+0x6e>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <xQueueReceive+0x70>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <xQueueReceive+0x88>
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e7fe      	b.n	80037e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037e4:	f001 fd5a 	bl	800529c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01f      	beq.n	8003834 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f8:	f000 f8f6 	bl	80039e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00f      	beq.n	800382c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	3310      	adds	r3, #16
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fe2d 	bl	8004470 <xTaskRemoveFromEventList>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800381c:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <xQueueReceive+0x1b4>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800382c:	f001 fd64 	bl	80052f8 <vPortExitCritical>
				return pdPASS;
 8003830:	2301      	movs	r3, #1
 8003832:	e069      	b.n	8003908 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800383a:	f001 fd5d 	bl	80052f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800383e:	2300      	movs	r3, #0
 8003840:	e062      	b.n	8003908 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fe71 	bl	8004534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003852:	2301      	movs	r3, #1
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003856:	f001 fd4f 	bl	80052f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800385a:	f000 fbef 	bl	800403c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800385e:	f001 fd1d 	bl	800529c <vPortEnterCritical>
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003868:	b25b      	sxtb	r3, r3
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d103      	bne.n	8003878 <xQueueReceive+0x11c>
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800387e:	b25b      	sxtb	r3, r3
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d103      	bne.n	800388e <xQueueReceive+0x132>
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800388e:	f001 fd33 	bl	80052f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003892:	1d3a      	adds	r2, r7, #4
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fe60 	bl	8004560 <xTaskCheckForTimeOut>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d123      	bne.n	80038ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a8:	f000 f916 	bl	8003ad8 <prvIsQueueEmpty>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d017      	beq.n	80038e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	3324      	adds	r3, #36	; 0x24
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fd8a 	bl	80043d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c2:	f000 f8b7 	bl	8003a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038c6:	f000 fbc7 	bl	8004058 <xTaskResumeAll>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d189      	bne.n	80037e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <xQueueReceive+0x1b4>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	e780      	b.n	80037e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e4:	f000 f8a6 	bl	8003a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e8:	f000 fbb6 	bl	8004058 <xTaskResumeAll>
 80038ec:	e77a      	b.n	80037e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f0:	f000 f8a0 	bl	8003a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038f4:	f000 fbb0 	bl	8004058 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038fa:	f000 f8ed 	bl	8003ad8 <prvIsQueueEmpty>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	f43f af6f 	beq.w	80037e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003906:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003908:	4618      	mov	r0, r3
 800390a:	3730      	adds	r7, #48	; 0x30
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d14d      	bne.n	80039d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 ff6a 	bl	8004818 <xTaskPriorityDisinherit>
 8003944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	e043      	b.n	80039d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d119      	bne.n	8003988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6858      	ldr	r0, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	461a      	mov	r2, r3
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	f001 ffb6 	bl	80058d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	441a      	add	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d32b      	bcc.n	80039d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	e026      	b.n	80039d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68d8      	ldr	r0, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	461a      	mov	r2, r3
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	f001 ff9c 	bl	80058d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	425b      	negs	r3, r3
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d207      	bcs.n	80039c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	425b      	negs	r3, r3
 80039be:	441a      	add	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d105      	bne.n	80039d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039de:	697b      	ldr	r3, [r7, #20]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d018      	beq.n	8003a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	441a      	add	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d303      	bcc.n	8003a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68d9      	ldr	r1, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	461a      	mov	r2, r3
 8003a26:	6838      	ldr	r0, [r7, #0]
 8003a28:	f001 ff52 	bl	80058d0 <memcpy>
	}
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a3c:	f001 fc2e 	bl	800529c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a48:	e011      	b.n	8003a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3324      	adds	r3, #36	; 0x24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fd0a 	bl	8004470 <xTaskRemoveFromEventList>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a62:	f000 fddd 	bl	8004620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dce9      	bgt.n	8003a4a <prvUnlockQueue+0x16>
 8003a76:	e000      	b.n	8003a7a <prvUnlockQueue+0x46>
					break;
 8003a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a82:	f001 fc39 	bl	80052f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a86:	f001 fc09 	bl	800529c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a92:	e011      	b.n	8003ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3310      	adds	r3, #16
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fce5 	bl	8004470 <xTaskRemoveFromEventList>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003aac:	f000 fdb8 	bl	8004620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	dce9      	bgt.n	8003a94 <prvUnlockQueue+0x60>
 8003ac0:	e000      	b.n	8003ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003acc:	f001 fc14 	bl	80052f8 <vPortExitCritical>
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ae0:	f001 fbdc 	bl	800529c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e001      	b.n	8003af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003af6:	f001 fbff 	bl	80052f8 <vPortExitCritical>

	return xReturn;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b0c:	f001 fbc6 	bl	800529c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d102      	bne.n	8003b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e001      	b.n	8003b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b26:	f001 fbe7 	bl	80052f8 <vPortExitCritical>

	return xReturn;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	e014      	b.n	8003b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b44:	4a0e      	ldr	r2, [pc, #56]	; (8003b80 <vQueueAddToRegistry+0x4c>)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b50:	490b      	ldr	r1, [pc, #44]	; (8003b80 <vQueueAddToRegistry+0x4c>)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <vQueueAddToRegistry+0x4c>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b66:	e005      	b.n	8003b74 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b07      	cmp	r3, #7
 8003b72:	d9e7      	bls.n	8003b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20004634 	.word	0x20004634

08003b84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b94:	f001 fb82 	bl	800529c <vPortEnterCritical>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b9e:	b25b      	sxtb	r3, r3
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d103      	bne.n	8003bae <vQueueWaitForMessageRestricted+0x2a>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d103      	bne.n	8003bc4 <vQueueWaitForMessageRestricted+0x40>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc4:	f001 fb98 	bl	80052f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	3324      	adds	r3, #36	; 0x24
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fc1f 	bl	800441c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f7ff ff28 	bl	8003a34 <prvUnlockQueue>
	}
 8003be4:	bf00      	nop
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08e      	sub	sp, #56	; 0x38
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d109      	bne.n	8003c14 <xTaskCreateStatic+0x28>
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	623b      	str	r3, [r7, #32]
 8003c12:	e7fe      	b.n	8003c12 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <xTaskCreateStatic+0x42>
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e7fe      	b.n	8003c2c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c2e:	2354      	movs	r3, #84	; 0x54
 8003c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b54      	cmp	r3, #84	; 0x54
 8003c36:	d009      	beq.n	8003c4c <xTaskCreateStatic+0x60>
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e7fe      	b.n	8003c4a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01e      	beq.n	8003c92 <xTaskCreateStatic+0xa6>
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01b      	beq.n	8003c92 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9303      	str	r3, [sp, #12]
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	9302      	str	r3, [sp, #8]
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f850 	bl	8003d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c8c:	f000 f8d4 	bl	8003e38 <prvAddNewTaskToReadyList>
 8003c90:	e001      	b.n	8003c96 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c96:	697b      	ldr	r3, [r7, #20]
	}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08c      	sub	sp, #48	; 0x30
 8003ca4:	af04      	add	r7, sp, #16
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 fc0b 	bl	80054d0 <pvPortMalloc>
 8003cba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00e      	beq.n	8003ce0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cc2:	2054      	movs	r0, #84	; 0x54
 8003cc4:	f001 fc04 	bl	80054d0 <pvPortMalloc>
 8003cc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd6:	e005      	b.n	8003ce4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f001 fcbb 	bl	8005654 <vPortFree>
 8003cde:	e001      	b.n	8003ce4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d017      	beq.n	8003d1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	9302      	str	r3, [sp, #8]
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f80e 	bl	8003d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d0e:	69f8      	ldr	r0, [r7, #28]
 8003d10:	f000 f892 	bl	8003e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d14:	2301      	movs	r3, #1
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e002      	b.n	8003d20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d20:	69bb      	ldr	r3, [r7, #24]
	}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b088      	sub	sp, #32
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d42:	3b01      	subs	r3, #1
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f023 0307 	bic.w	r3, r3, #7
 8003d50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <prvInitialiseNewTask+0x46>
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e7fe      	b.n	8003d6e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01f      	beq.n	8003db6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	e012      	b.n	8003da2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	7819      	ldrb	r1, [r3, #0]
 8003d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	3334      	adds	r3, #52	; 0x34
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b0f      	cmp	r3, #15
 8003da6:	d9e9      	bls.n	8003d7c <prvInitialiseNewTask+0x52>
 8003da8:	e000      	b.n	8003dac <prvInitialiseNewTask+0x82>
			{
				break;
 8003daa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db4:	e003      	b.n	8003dbe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d901      	bls.n	8003dc8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dc4:	2306      	movs	r3, #6
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f99f 	bl	8003122 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	3318      	adds	r3, #24
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff f99a 	bl	8003122 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	f1c3 0207 	rsb	r2, r3, #7
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	2200      	movs	r2, #0
 8003e08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	f001 f916 	bl	8005048 <pxPortInitialiseStack>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e2e:	bf00      	nop
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e40:	f001 fa2c 	bl	800529c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e44:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <prvAddNewTaskToReadyList+0xb8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <prvAddNewTaskToReadyList+0xb8>)
 8003e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <prvAddNewTaskToReadyList+0xbc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e56:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <prvAddNewTaskToReadyList+0xbc>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <prvAddNewTaskToReadyList+0xb8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d110      	bne.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e64:	f000 fc00 	bl	8004668 <prvInitialiseTaskLists>
 8003e68:	e00d      	b.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <prvAddNewTaskToReadyList+0xc0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e72:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <prvAddNewTaskToReadyList+0xbc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d802      	bhi.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <prvAddNewTaskToReadyList+0xbc>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e86:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	2201      	movs	r2, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <prvAddNewTaskToReadyList+0xcc>)
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f7ff f93f 	bl	800313c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ebe:	f001 fa1b 	bl	80052f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <prvAddNewTaskToReadyList+0xc0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <prvAddNewTaskToReadyList+0xbc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d207      	bcs.n	8003ee8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <prvAddNewTaskToReadyList+0xd0>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	2000083c 	.word	0x2000083c
 8003ef4:	2000073c 	.word	0x2000073c
 8003ef8:	20000848 	.word	0x20000848
 8003efc:	20000858 	.word	0x20000858
 8003f00:	20000844 	.word	0x20000844
 8003f04:	20000740 	.word	0x20000740
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <vTaskDelay+0x60>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <vTaskDelay+0x2e>
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	e7fe      	b.n	8003f38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f3a:	f000 f87f 	bl	800403c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f3e:	2100      	movs	r1, #0
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fced 	bl	8004920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f46:	f000 f887 	bl	8004058 <xTaskResumeAll>
 8003f4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d107      	bne.n	8003f62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <vTaskDelay+0x64>)
 8003f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000864 	.word	0x20000864
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f82:	463a      	mov	r2, r7
 8003f84:	1d39      	adds	r1, r7, #4
 8003f86:	f107 0308 	add.w	r3, r7, #8
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc fb00 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	9202      	str	r2, [sp, #8]
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	4920      	ldr	r1, [pc, #128]	; (8004024 <vTaskStartScheduler+0xb0>)
 8003fa4:	4820      	ldr	r0, [pc, #128]	; (8004028 <vTaskStartScheduler+0xb4>)
 8003fa6:	f7ff fe21 	bl	8003bec <xTaskCreateStatic>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <vTaskStartScheduler+0xb8>)
 8003fae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fb0:	4b1e      	ldr	r3, [pc, #120]	; (800402c <vTaskStartScheduler+0xb8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e001      	b.n	8003fc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d102      	bne.n	8003fce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fc8:	f000 fd10 	bl	80049ec <xTimerCreateTimerTask>
 8003fcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d115      	bne.n	8004000 <vTaskStartScheduler+0x8c>
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <vTaskStartScheduler+0xbc>)
 8003fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <vTaskStartScheduler+0xc0>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <vTaskStartScheduler+0xc4>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ffa:	f001 f8b1 	bl	8005160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ffe:	e00d      	b.n	800401c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d109      	bne.n	800401c <vTaskStartScheduler+0xa8>
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	e7fe      	b.n	800401a <vTaskStartScheduler+0xa6>
}
 800401c:	bf00      	nop
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	08006180 	.word	0x08006180
 8004028:	08004639 	.word	0x08004639
 800402c:	20000860 	.word	0x20000860
 8004030:	2000085c 	.word	0x2000085c
 8004034:	20000848 	.word	0x20000848
 8004038:	20000840 	.word	0x20000840

0800403c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <vTaskSuspendAll+0x18>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a03      	ldr	r2, [pc, #12]	; (8004054 <vTaskSuspendAll+0x18>)
 8004048:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	20000864 	.word	0x20000864

08004058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <xTaskResumeAll+0x114>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <xTaskResumeAll+0x2a>
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	e7fe      	b.n	8004080 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004082:	f001 f90b 	bl	800529c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <xTaskResumeAll+0x114>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3b01      	subs	r3, #1
 800408c:	4a37      	ldr	r2, [pc, #220]	; (800416c <xTaskResumeAll+0x114>)
 800408e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004090:	4b36      	ldr	r3, [pc, #216]	; (800416c <xTaskResumeAll+0x114>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d161      	bne.n	800415c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004098:	4b35      	ldr	r3, [pc, #212]	; (8004170 <xTaskResumeAll+0x118>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05d      	beq.n	800415c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a0:	e02e      	b.n	8004100 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a2:	4b34      	ldr	r3, [pc, #208]	; (8004174 <xTaskResumeAll+0x11c>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3318      	adds	r3, #24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff f8a1 	bl	80031f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff f89c 	bl	80031f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	2201      	movs	r2, #1
 80040c4:	409a      	lsls	r2, r3
 80040c6:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <xTaskResumeAll+0x120>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <xTaskResumeAll+0x120>)
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <xTaskResumeAll+0x124>)
 80040de:	441a      	add	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7ff f828 	bl	800313c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <xTaskResumeAll+0x128>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <xTaskResumeAll+0x12c>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <xTaskResumeAll+0x11c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1cc      	bne.n	80040a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800410e:	f000 fb45 	bl	800479c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <xTaskResumeAll+0x130>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800411e:	f000 f847 	bl	80041b0 <xTaskIncrementTick>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <xTaskResumeAll+0x12c>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3b01      	subs	r3, #1
 8004132:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f1      	bne.n	800411e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <xTaskResumeAll+0x130>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <xTaskResumeAll+0x12c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <xTaskResumeAll+0x134>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800415c:	f001 f8cc 	bl	80052f8 <vPortExitCritical>

	return xAlreadyYielded;
 8004160:	68bb      	ldr	r3, [r7, #8]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000864 	.word	0x20000864
 8004170:	2000083c 	.word	0x2000083c
 8004174:	200007fc 	.word	0x200007fc
 8004178:	20000844 	.word	0x20000844
 800417c:	20000740 	.word	0x20000740
 8004180:	2000073c 	.word	0x2000073c
 8004184:	20000850 	.word	0x20000850
 8004188:	2000084c 	.word	0x2000084c
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <xTaskGetTickCount+0x1c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800419c:	687b      	ldr	r3, [r7, #4]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000840 	.word	0x20000840

080041b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ba:	4b4e      	ldr	r3, [pc, #312]	; (80042f4 <xTaskIncrementTick+0x144>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 8087 	bne.w	80042d2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041c4:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <xTaskIncrementTick+0x148>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041cc:	4a4a      	ldr	r2, [pc, #296]	; (80042f8 <xTaskIncrementTick+0x148>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11f      	bne.n	8004218 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80041d8:	4b48      	ldr	r3, [pc, #288]	; (80042fc <xTaskIncrementTick+0x14c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <xTaskIncrementTick+0x46>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	e7fe      	b.n	80041f4 <xTaskIncrementTick+0x44>
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <xTaskIncrementTick+0x14c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <xTaskIncrementTick+0x150>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3e      	ldr	r2, [pc, #248]	; (80042fc <xTaskIncrementTick+0x14c>)
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4a3e      	ldr	r2, [pc, #248]	; (8004300 <xTaskIncrementTick+0x150>)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <xTaskIncrementTick+0x154>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <xTaskIncrementTick+0x154>)
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	f000 fac2 	bl	800479c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004218:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <xTaskIncrementTick+0x158>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	429a      	cmp	r2, r3
 8004220:	d348      	bcc.n	80042b4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <xTaskIncrementTick+0x14c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <xTaskIncrementTick+0x158>)
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	601a      	str	r2, [r3, #0]
					break;
 8004234:	e03e      	b.n	80042b4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004236:	4b31      	ldr	r3, [pc, #196]	; (80042fc <xTaskIncrementTick+0x14c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d203      	bcs.n	8004256 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800424e:	4a2e      	ldr	r2, [pc, #184]	; (8004308 <xTaskIncrementTick+0x158>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004254:	e02e      	b.n	80042b4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3304      	adds	r3, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe ffcb 	bl	80031f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3318      	adds	r3, #24
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe ffc2 	bl	80031f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <xTaskIncrementTick+0x15c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	4a22      	ldr	r2, [pc, #136]	; (800430c <xTaskIncrementTick+0x15c>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <xTaskIncrementTick+0x160>)
 8004292:	441a      	add	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe ff4e 	bl	800313c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <xTaskIncrementTick+0x164>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d3b9      	bcc.n	8004222 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042b2:	e7b6      	b.n	8004222 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <xTaskIncrementTick+0x164>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	4915      	ldr	r1, [pc, #84]	; (8004310 <xTaskIncrementTick+0x160>)
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d907      	bls.n	80042dc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e004      	b.n	80042dc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <xTaskIncrementTick+0x168>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3301      	adds	r3, #1
 80042d8:	4a0f      	ldr	r2, [pc, #60]	; (8004318 <xTaskIncrementTick+0x168>)
 80042da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <xTaskIncrementTick+0x16c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80042e8:	697b      	ldr	r3, [r7, #20]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000864 	.word	0x20000864
 80042f8:	20000840 	.word	0x20000840
 80042fc:	200007f4 	.word	0x200007f4
 8004300:	200007f8 	.word	0x200007f8
 8004304:	20000854 	.word	0x20000854
 8004308:	2000085c 	.word	0x2000085c
 800430c:	20000844 	.word	0x20000844
 8004310:	20000740 	.word	0x20000740
 8004314:	2000073c 	.word	0x2000073c
 8004318:	2000084c 	.word	0x2000084c
 800431c:	20000850 	.word	0x20000850

08004320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <vTaskSwitchContext+0xa0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800432e:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <vTaskSwitchContext+0xa4>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004334:	e03e      	b.n	80043b4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004336:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <vTaskSwitchContext+0xa4>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433c:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <vTaskSwitchContext+0xa8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	f1c3 031f 	rsb	r3, r3, #31
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	491e      	ldr	r1, [pc, #120]	; (80043cc <vTaskSwitchContext+0xac>)
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	e7fe      	b.n	8004378 <vTaskSwitchContext+0x58>
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <vTaskSwitchContext+0xac>)
 8004386:	4413      	add	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3308      	adds	r3, #8
 800439c:	429a      	cmp	r2, r3
 800439e:	d104      	bne.n	80043aa <vTaskSwitchContext+0x8a>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <vTaskSwitchContext+0xb0>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000864 	.word	0x20000864
 80043c4:	20000850 	.word	0x20000850
 80043c8:	20000844 	.word	0x20000844
 80043cc:	20000740 	.word	0x20000740
 80043d0:	2000073c 	.word	0x2000073c

080043d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <vTaskPlaceOnEventList+0x24>
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e7fe      	b.n	80043f6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <vTaskPlaceOnEventList+0x44>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3318      	adds	r3, #24
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fe febf 	bl	8003184 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004406:	2101      	movs	r1, #1
 8004408:	6838      	ldr	r0, [r7, #0]
 800440a:	f000 fa89 	bl	8004920 <prvAddCurrentTaskToDelayedList>
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	2000073c 	.word	0x2000073c

0800441c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <vTaskPlaceOnEventListRestricted+0x26>
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e7fe      	b.n	8004440 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <vTaskPlaceOnEventListRestricted+0x50>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3318      	adds	r3, #24
 8004448:	4619      	mov	r1, r3
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7fe fe76 	bl	800313c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68b8      	ldr	r0, [r7, #8]
 8004460:	f000 fa5e 	bl	8004920 <prvAddCurrentTaskToDelayedList>
	}
 8004464:	bf00      	nop
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	2000073c 	.word	0x2000073c

08004470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <xTaskRemoveFromEventList+0x2a>
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e7fe      	b.n	8004498 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3318      	adds	r3, #24
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fea9 	bl	80031f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <xTaskRemoveFromEventList+0xac>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d11c      	bne.n	80044e6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fea0 	bl	80031f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	2201      	movs	r2, #1
 80044bc:	409a      	lsls	r2, r3
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <xTaskRemoveFromEventList+0xb0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	4a16      	ldr	r2, [pc, #88]	; (8004520 <xTaskRemoveFromEventList+0xb0>)
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <xTaskRemoveFromEventList+0xb4>)
 80044d6:	441a      	add	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe fe2c 	bl	800313c <vListInsertEnd>
 80044e4:	e005      	b.n	80044f2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3318      	adds	r3, #24
 80044ea:	4619      	mov	r1, r3
 80044ec:	480e      	ldr	r0, [pc, #56]	; (8004528 <xTaskRemoveFromEventList+0xb8>)
 80044ee:	f7fe fe25 	bl	800313c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4b0d      	ldr	r3, [pc, #52]	; (800452c <xTaskRemoveFromEventList+0xbc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d905      	bls.n	800450c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004504:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <xTaskRemoveFromEventList+0xc0>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e001      	b.n	8004510 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004510:	697b      	ldr	r3, [r7, #20]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000864 	.word	0x20000864
 8004520:	20000844 	.word	0x20000844
 8004524:	20000740 	.word	0x20000740
 8004528:	200007fc 	.word	0x200007fc
 800452c:	2000073c 	.word	0x2000073c
 8004530:	20000850 	.word	0x20000850

08004534 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <vTaskInternalSetTimeOutState+0x24>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <vTaskInternalSetTimeOutState+0x28>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	605a      	str	r2, [r3, #4]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	20000854 	.word	0x20000854
 800455c:	20000840 	.word	0x20000840

08004560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <xTaskCheckForTimeOut+0x24>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e7fe      	b.n	8004582 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <xTaskCheckForTimeOut+0x3e>
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e7fe      	b.n	800459c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800459e:	f000 fe7d 	bl	800529c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <xTaskCheckForTimeOut+0xb8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d102      	bne.n	80045c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e023      	b.n	800460a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <xTaskCheckForTimeOut+0xbc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d007      	beq.n	80045de <xTaskCheckForTimeOut+0x7e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	e015      	b.n	800460a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d20b      	bcs.n	8004600 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	1ad2      	subs	r2, r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ff9d 	bl	8004534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e004      	b.n	800460a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004606:	2301      	movs	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800460a:	f000 fe75 	bl	80052f8 <vPortExitCritical>

	return xReturn;
 800460e:	69fb      	ldr	r3, [r7, #28]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000840 	.word	0x20000840
 800461c:	20000854 	.word	0x20000854

08004620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <vTaskMissedYield+0x14>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20000850 	.word	0x20000850

08004638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004640:	f000 f852 	bl	80046e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <prvIdleTask+0x28>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d9f9      	bls.n	8004640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <prvIdleTask+0x2c>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800465c:	e7f0      	b.n	8004640 <prvIdleTask+0x8>
 800465e:	bf00      	nop
 8004660:	20000740 	.word	0x20000740
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	e00c      	b.n	800468e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <prvInitialiseTaskLists+0x60>)
 8004680:	4413      	add	r3, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fd2d 	bl	80030e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3301      	adds	r3, #1
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b06      	cmp	r3, #6
 8004692:	d9ef      	bls.n	8004674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004694:	480d      	ldr	r0, [pc, #52]	; (80046cc <prvInitialiseTaskLists+0x64>)
 8004696:	f7fe fd24 	bl	80030e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800469a:	480d      	ldr	r0, [pc, #52]	; (80046d0 <prvInitialiseTaskLists+0x68>)
 800469c:	f7fe fd21 	bl	80030e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046a0:	480c      	ldr	r0, [pc, #48]	; (80046d4 <prvInitialiseTaskLists+0x6c>)
 80046a2:	f7fe fd1e 	bl	80030e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046a6:	480c      	ldr	r0, [pc, #48]	; (80046d8 <prvInitialiseTaskLists+0x70>)
 80046a8:	f7fe fd1b 	bl	80030e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046ac:	480b      	ldr	r0, [pc, #44]	; (80046dc <prvInitialiseTaskLists+0x74>)
 80046ae:	f7fe fd18 	bl	80030e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <prvInitialiseTaskLists+0x78>)
 80046b4:	4a05      	ldr	r2, [pc, #20]	; (80046cc <prvInitialiseTaskLists+0x64>)
 80046b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <prvInitialiseTaskLists+0x7c>)
 80046ba:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <prvInitialiseTaskLists+0x68>)
 80046bc:	601a      	str	r2, [r3, #0]
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000740 	.word	0x20000740
 80046cc:	200007cc 	.word	0x200007cc
 80046d0:	200007e0 	.word	0x200007e0
 80046d4:	200007fc 	.word	0x200007fc
 80046d8:	20000810 	.word	0x20000810
 80046dc:	20000828 	.word	0x20000828
 80046e0:	200007f4 	.word	0x200007f4
 80046e4:	200007f8 	.word	0x200007f8

080046e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ee:	e019      	b.n	8004724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046f0:	f000 fdd4 	bl	800529c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <prvCheckTasksWaitingTermination+0x4c>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe fd78 	bl	80031f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <prvCheckTasksWaitingTermination+0x50>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3b01      	subs	r3, #1
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <prvCheckTasksWaitingTermination+0x50>)
 800470e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvCheckTasksWaitingTermination+0x54>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	4a09      	ldr	r2, [pc, #36]	; (800473c <prvCheckTasksWaitingTermination+0x54>)
 8004718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800471a:	f000 fded 	bl	80052f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f80e 	bl	8004740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <prvCheckTasksWaitingTermination+0x54>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e1      	bne.n	80046f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000810 	.word	0x20000810
 8004738:	2000083c 	.word	0x2000083c
 800473c:	20000824 	.word	0x20000824

08004740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4618      	mov	r0, r3
 8004758:	f000 ff7c 	bl	8005654 <vPortFree>
				vPortFree( pxTCB );
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 ff79 	bl	8005654 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004762:	e017      	b.n	8004794 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476a:	2b01      	cmp	r3, #1
 800476c:	d103      	bne.n	8004776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 ff70 	bl	8005654 <vPortFree>
	}
 8004774:	e00e      	b.n	8004794 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800477c:	2b02      	cmp	r3, #2
 800477e:	d009      	beq.n	8004794 <prvDeleteTCB+0x54>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e7fe      	b.n	8004792 <prvDeleteTCB+0x52>
	}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <prvResetNextTaskUnblockTime+0x38>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <prvResetNextTaskUnblockTime+0x3c>)
 80047ae:	f04f 32ff 	mov.w	r2, #4294967295
 80047b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047b4:	e008      	b.n	80047c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <prvResetNextTaskUnblockTime+0x38>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <prvResetNextTaskUnblockTime+0x3c>)
 80047c6:	6013      	str	r3, [r2, #0]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	200007f4 	.word	0x200007f4
 80047d8:	2000085c 	.word	0x2000085c

080047dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <xTaskGetSchedulerState+0x34>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047ea:	2301      	movs	r3, #1
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	e008      	b.n	8004802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <xTaskGetSchedulerState+0x38>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047f8:	2302      	movs	r3, #2
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	e001      	b.n	8004802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004802:	687b      	ldr	r3, [r7, #4]
	}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20000848 	.word	0x20000848
 8004814:	20000864 	.word	0x20000864

08004818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d06c      	beq.n	8004908 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800482e:	4b39      	ldr	r3, [pc, #228]	; (8004914 <xTaskPriorityDisinherit+0xfc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	429a      	cmp	r2, r3
 8004836:	d009      	beq.n	800484c <xTaskPriorityDisinherit+0x34>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e7fe      	b.n	800484a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <xTaskPriorityDisinherit+0x50>
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	e7fe      	b.n	8004866 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486c:	1e5a      	subs	r2, r3, #1
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	429a      	cmp	r2, r3
 800487c:	d044      	beq.n	8004908 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004882:	2b00      	cmp	r3, #0
 8004884:	d140      	bne.n	8004908 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fcb3 	bl	80031f6 <uxListRemove>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d115      	bne.n	80048c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	491f      	ldr	r1, [pc, #124]	; (8004918 <xTaskPriorityDisinherit+0x100>)
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <xTaskPriorityDisinherit+0xaa>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2201      	movs	r2, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	4b18      	ldr	r3, [pc, #96]	; (800491c <xTaskPriorityDisinherit+0x104>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4013      	ands	r3, r2
 80048be:	4a17      	ldr	r2, [pc, #92]	; (800491c <xTaskPriorityDisinherit+0x104>)
 80048c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	f1c3 0207 	rsb	r2, r3, #7
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	2201      	movs	r2, #1
 80048dc:	409a      	lsls	r2, r3
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <xTaskPriorityDisinherit+0x104>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <xTaskPriorityDisinherit+0x104>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <xTaskPriorityDisinherit+0x100>)
 80048f6:	441a      	add	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7fe fc1c 	bl	800313c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004908:	697b      	ldr	r3, [r7, #20]
	}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000073c 	.word	0x2000073c
 8004918:	20000740 	.word	0x20000740
 800491c:	20000844 	.word	0x20000844

08004920 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fc5d 	bl	80031f6 <uxListRemove>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	2201      	movs	r2, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43da      	mvns	r2, r3
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4013      	ands	r3, r2
 8004956:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d10a      	bne.n	8004978 <prvAddCurrentTaskToDelayedList+0x58>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3304      	adds	r3, #4
 800496e:	4619      	mov	r1, r3
 8004970:	481a      	ldr	r0, [pc, #104]	; (80049dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004972:	f7fe fbe3 	bl	800313c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004976:	e026      	b.n	80049c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	429a      	cmp	r2, r3
 800498e:	d209      	bcs.n	80049a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe fbf1 	bl	8003184 <vListInsert>
}
 80049a2:	e010      	b.n	80049c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fe fbe7 	bl	8003184 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d202      	bcs.n	80049c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000840 	.word	0x20000840
 80049d4:	2000073c 	.word	0x2000073c
 80049d8:	20000844 	.word	0x20000844
 80049dc:	20000828 	.word	0x20000828
 80049e0:	200007f8 	.word	0x200007f8
 80049e4:	200007f4 	.word	0x200007f4
 80049e8:	2000085c 	.word	0x2000085c

080049ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049f6:	f000 fae7 	bl	8004fc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <xTimerCreateTimerTask+0x80>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d021      	beq.n	8004a46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a0a:	1d3a      	adds	r2, r7, #4
 8004a0c:	f107 0108 	add.w	r1, r7, #8
 8004a10:	f107 030c 	add.w	r3, r7, #12
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fb fdd5 	bl	80005c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	9202      	str	r2, [sp, #8]
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	2302      	movs	r3, #2
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	4910      	ldr	r1, [pc, #64]	; (8004a70 <xTimerCreateTimerTask+0x84>)
 8004a2e:	4811      	ldr	r0, [pc, #68]	; (8004a74 <xTimerCreateTimerTask+0x88>)
 8004a30:	f7ff f8dc 	bl	8003bec <xTaskCreateStatic>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <xTimerCreateTimerTask+0x8c>)
 8004a38:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <xTimerCreateTimerTask+0x8c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a42:	2301      	movs	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <xTimerCreateTimerTask+0x74>
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	e7fe      	b.n	8004a5e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004a60:	697b      	ldr	r3, [r7, #20]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000898 	.word	0x20000898
 8004a70:	08006188 	.word	0x08006188
 8004a74:	08004bad 	.word	0x08004bad
 8004a78:	2000089c 	.word	0x2000089c

08004a7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <xTimerGenericCommand+0x2c>
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	e7fe      	b.n	8004aa6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <xTimerGenericCommand+0x94>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d02a      	beq.n	8004b06 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	dc18      	bgt.n	8004af4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ac2:	f7ff fe8b 	bl	80047dc <xTaskGetSchedulerState>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d109      	bne.n	8004ae0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <xTimerGenericCommand+0x94>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	f107 0114 	add.w	r1, r7, #20
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad8:	f7fe fcb2 	bl	8003440 <xQueueGenericSend>
 8004adc:	6278      	str	r0, [r7, #36]	; 0x24
 8004ade:	e012      	b.n	8004b06 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <xTimerGenericCommand+0x94>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f107 0114 	add.w	r1, r7, #20
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2200      	movs	r2, #0
 8004aec:	f7fe fca8 	bl	8003440 <xQueueGenericSend>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24
 8004af2:	e008      	b.n	8004b06 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <xTimerGenericCommand+0x94>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	f107 0114 	add.w	r1, r7, #20
 8004afc:	2300      	movs	r3, #0
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	f7fe fd98 	bl	8003634 <xQueueGenericSendFromISR>
 8004b04:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	; 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000898 	.word	0x20000898

08004b14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <prvProcessExpiredTimer+0x94>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fb62 	bl	80031f6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d021      	beq.n	8004b84 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	18d1      	adds	r1, r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	f000 f8d1 	bl	8004cf4 <prvInsertTimerInActiveList>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01e      	beq.n	8004b96 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	2100      	movs	r1, #0
 8004b62:	6978      	ldr	r0, [r7, #20]
 8004b64:	f7ff ff8a 	bl	8004a7c <xTimerGenericCommand>
 8004b68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d112      	bne.n	8004b96 <prvProcessExpiredTimer+0x82>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e7fe      	b.n	8004b82 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	4798      	blx	r3
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000890 	.word	0x20000890

08004bac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb4:	f107 0308 	add.w	r3, r7, #8
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 f857 	bl	8004c6c <prvGetNextExpireTime>
 8004bbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f803 	bl	8004bd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bca:	f000 f8d5 	bl	8004d78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bce:	e7f1      	b.n	8004bb4 <prvTimerTask+0x8>

08004bd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bda:	f7ff fa2f 	bl	800403c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bde:	f107 0308 	add.w	r3, r7, #8
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f866 	bl	8004cb4 <prvSampleTimeNow>
 8004be8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d130      	bne.n	8004c52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <prvProcessTimerOrBlockTask+0x3c>
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d806      	bhi.n	8004c0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bfe:	f7ff fa2b 	bl	8004058 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ff85 	bl	8004b14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c0a:	e024      	b.n	8004c56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <prvProcessTimerOrBlockTask+0x90>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <prvProcessTimerOrBlockTask+0x50>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <prvProcessTimerOrBlockTask+0x52>
 8004c20:	2300      	movs	r3, #0
 8004c22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <prvProcessTimerOrBlockTask+0x94>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f7fe ffa7 	bl	8003b84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c36:	f7ff fa0f 	bl	8004058 <xTaskResumeAll>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <prvProcessTimerOrBlockTask+0x98>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
}
 8004c50:	e001      	b.n	8004c56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c52:	f7ff fa01 	bl	8004058 <xTaskResumeAll>
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000894 	.word	0x20000894
 8004c64:	20000898 	.word	0x20000898
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <prvGetNextExpireTime+0x44>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <prvGetNextExpireTime+0x16>
 8004c7e:	2201      	movs	r2, #1
 8004c80:	e000      	b.n	8004c84 <prvGetNextExpireTime+0x18>
 8004c82:	2200      	movs	r2, #0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <prvGetNextExpireTime+0x44>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e001      	b.n	8004ca0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000890 	.word	0x20000890

08004cb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cbc:	f7ff fa68 	bl	8004190 <xTaskGetTickCount>
 8004cc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <prvSampleTimeNow+0x3c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d205      	bcs.n	8004cd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ccc:	f000 f918 	bl	8004f00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cde:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <prvSampleTimeNow+0x3c>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200008a0 	.word	0x200008a0

08004cf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d812      	bhi.n	8004d40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d302      	bcc.n	8004d2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	e01b      	b.n	8004d66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <prvInsertTimerInActiveList+0x7c>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fe fa23 	bl	8003184 <vListInsert>
 8004d3e:	e012      	b.n	8004d66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d206      	bcs.n	8004d56 <prvInsertTimerInActiveList+0x62>
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e007      	b.n	8004d66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <prvInsertTimerInActiveList+0x80>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fe fa0f 	bl	8003184 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d66:	697b      	ldr	r3, [r7, #20]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000894 	.word	0x20000894
 8004d74:	20000890 	.word	0x20000890

08004d78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	; 0x30
 8004d7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d7e:	e0ac      	b.n	8004eda <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f2c0 80a8 	blt.w	8004ed8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	3304      	adds	r3, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fa2c 	bl	80031f6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff87 	bl	8004cb4 <prvSampleTimeNow>
 8004da6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	f200 8095 	bhi.w	8004eda <prvProcessReceivedCommands+0x162>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <prvProcessReceivedCommands+0x40>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004e53 	.word	0x08004e53
 8004dc8:	08004e67 	.word	0x08004e67
 8004dcc:	08004eaf 	.word	0x08004eaf
 8004dd0:	08004de1 	.word	0x08004de1
 8004dd4:	08004de1 	.word	0x08004de1
 8004dd8:	08004e53 	.word	0x08004e53
 8004ddc:	08004e67 	.word	0x08004e67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	18d1      	adds	r1, r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e00:	f7ff ff78 	bl	8004cf4 <prvInsertTimerInActiveList>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d067      	beq.n	8004eda <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05c      	beq.n	8004eda <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	441a      	add	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2100      	movs	r1, #0
 8004e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e32:	f7ff fe23 	bl	8004a7c <xTimerGenericCommand>
 8004e36:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d14d      	bne.n	8004eda <prvProcessReceivedCommands+0x162>
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	e7fe      	b.n	8004e50 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004e64:	e039      	b.n	8004eda <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <prvProcessReceivedCommands+0x122>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e7fe      	b.n	8004e98 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	18d1      	adds	r1, r2, r3
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ea8:	f7ff ff24 	bl	8004cf4 <prvInsertTimerInActiveList>
					break;
 8004eac:	e015      	b.n	8004eda <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ebe:	f000 fbc9 	bl	8005654 <vPortFree>
 8004ec2:	e00a      	b.n	8004eda <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ed6:	e000      	b.n	8004eda <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ed8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <prvProcessReceivedCommands+0x184>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f107 0108 	add.w	r1, r7, #8
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe fc39 	bl	800375c <xQueueReceive>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f47f af47 	bne.w	8004d80 <prvProcessReceivedCommands+0x8>
	}
}
 8004ef2:	bf00      	nop
 8004ef4:	3728      	adds	r7, #40	; 0x28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000898 	.word	0x20000898

08004f00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f06:	e047      	b.n	8004f98 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f08:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <prvSwitchTimerLists+0xc0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f12:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <prvSwitchTimerLists+0xc0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe f968 	bl	80031f6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02d      	beq.n	8004f98 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d90e      	bls.n	8004f6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f5a:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <prvSwitchTimerLists+0xc0>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3304      	adds	r3, #4
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7fe f90d 	bl	8003184 <vListInsert>
 8004f6a:	e015      	b.n	8004f98 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	2100      	movs	r1, #0
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f7ff fd80 	bl	8004a7c <xTimerGenericCommand>
 8004f7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <prvSwitchTimerLists+0x98>
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	e7fe      	b.n	8004f96 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <prvSwitchTimerLists+0xc0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1b2      	bne.n	8004f08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <prvSwitchTimerLists+0xc0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvSwitchTimerLists+0xc4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvSwitchTimerLists+0xc0>)
 8004fae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fb0:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <prvSwitchTimerLists+0xc4>)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6013      	str	r3, [r2, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000890 	.word	0x20000890
 8004fc4:	20000894 	.word	0x20000894

08004fc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fce:	f000 f965 	bl	800529c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d120      	bne.n	800501c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fda:	4814      	ldr	r0, [pc, #80]	; (800502c <prvCheckForValidListAndQueue+0x64>)
 8004fdc:	f7fe f881 	bl	80030e2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fe0:	4813      	ldr	r0, [pc, #76]	; (8005030 <prvCheckForValidListAndQueue+0x68>)
 8004fe2:	f7fe f87e 	bl	80030e2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <prvCheckForValidListAndQueue+0x6c>)
 8004fe8:	4a10      	ldr	r2, [pc, #64]	; (800502c <prvCheckForValidListAndQueue+0x64>)
 8004fea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <prvCheckForValidListAndQueue+0x70>)
 8004fee:	4a10      	ldr	r2, [pc, #64]	; (8005030 <prvCheckForValidListAndQueue+0x68>)
 8004ff0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <prvCheckForValidListAndQueue+0x74>)
 8004ff8:	4a11      	ldr	r2, [pc, #68]	; (8005040 <prvCheckForValidListAndQueue+0x78>)
 8004ffa:	210c      	movs	r1, #12
 8004ffc:	200a      	movs	r0, #10
 8004ffe:	f7fe f98d 	bl	800331c <xQueueGenericCreateStatic>
 8005002:	4602      	mov	r2, r0
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 8005006:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005008:	4b07      	ldr	r3, [pc, #28]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <prvCheckForValidListAndQueue+0x60>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	490b      	ldr	r1, [pc, #44]	; (8005044 <prvCheckForValidListAndQueue+0x7c>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fd8c 	bl	8003b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800501c:	f000 f96c 	bl	80052f8 <vPortExitCritical>
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000898 	.word	0x20000898
 800502c:	20000868 	.word	0x20000868
 8005030:	2000087c 	.word	0x2000087c
 8005034:	20000890 	.word	0x20000890
 8005038:	20000894 	.word	0x20000894
 800503c:	2000091c 	.word	0x2000091c
 8005040:	200008a4 	.word	0x200008a4
 8005044:	08006190 	.word	0x08006190

08005048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b04      	subs	r3, #4
 8005058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b04      	subs	r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3b04      	subs	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005078:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <pxPortInitialiseStack+0x64>)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b14      	subs	r3, #20
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b04      	subs	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f06f 0202 	mvn.w	r2, #2
 8005096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b20      	subs	r3, #32
 800509c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800509e:	68fb      	ldr	r3, [r7, #12]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	080050b1 	.word	0x080050b1

080050b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <prvTaskExitError+0x50>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d009      	beq.n	80050d8 <prvTaskExitError+0x28>
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e7fe      	b.n	80050d6 <prvTaskExitError+0x26>
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050ea:	bf00      	nop
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0fc      	beq.n	80050ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	2000000c 	.word	0x2000000c
	...

08005110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <pxCurrentTCBConst2>)
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6808      	ldr	r0, [r1, #0]
 8005116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	f380 8809 	msr	PSP, r0
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	4770      	bx	lr
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst2>:
 8005130:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005138:	4808      	ldr	r0, [pc, #32]	; (800515c <prvPortStartFirstTask+0x24>)
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f380 8808 	msr	MSP, r0
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8814 	msr	CONTROL, r0
 800514a:	b662      	cpsie	i
 800514c:	b661      	cpsie	f
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	df00      	svc	0
 8005158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800515a:	bf00      	nop
 800515c:	e000ed08 	.word	0xe000ed08

08005160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005166:	4b44      	ldr	r3, [pc, #272]	; (8005278 <xPortStartScheduler+0x118>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a44      	ldr	r2, [pc, #272]	; (800527c <xPortStartScheduler+0x11c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d109      	bne.n	8005184 <xPortStartScheduler+0x24>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	e7fe      	b.n	8005182 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005184:	4b3c      	ldr	r3, [pc, #240]	; (8005278 <xPortStartScheduler+0x118>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3d      	ldr	r2, [pc, #244]	; (8005280 <xPortStartScheduler+0x120>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d109      	bne.n	80051a2 <xPortStartScheduler+0x42>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e7fe      	b.n	80051a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <xPortStartScheduler+0x124>)
 80051a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4b30      	ldr	r3, [pc, #192]	; (8005288 <xPortStartScheduler+0x128>)
 80051c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051ca:	4b30      	ldr	r3, [pc, #192]	; (800528c <xPortStartScheduler+0x12c>)
 80051cc:	2207      	movs	r2, #7
 80051ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051d0:	e009      	b.n	80051e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80051d2:	4b2e      	ldr	r3, [pc, #184]	; (800528c <xPortStartScheduler+0x12c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4a2c      	ldr	r2, [pc, #176]	; (800528c <xPortStartScheduler+0x12c>)
 80051da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b80      	cmp	r3, #128	; 0x80
 80051f0:	d0ef      	beq.n	80051d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <xPortStartScheduler+0x12c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1c3 0307 	rsb	r3, r3, #7
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d009      	beq.n	8005212 <xPortStartScheduler+0xb2>
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	e7fe      	b.n	8005210 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005212:	4b1e      	ldr	r3, [pc, #120]	; (800528c <xPortStartScheduler+0x12c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	4a1c      	ldr	r2, [pc, #112]	; (800528c <xPortStartScheduler+0x12c>)
 800521a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <xPortStartScheduler+0x12c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <xPortStartScheduler+0x12c>)
 8005226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005230:	4b17      	ldr	r3, [pc, #92]	; (8005290 <xPortStartScheduler+0x130>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <xPortStartScheduler+0x130>)
 8005236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800523a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800523c:	4b14      	ldr	r3, [pc, #80]	; (8005290 <xPortStartScheduler+0x130>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <xPortStartScheduler+0x130>)
 8005242:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005248:	f000 f8d6 	bl	80053f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <xPortStartScheduler+0x134>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005252:	f000 f8f5 	bl	8005440 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <xPortStartScheduler+0x138>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <xPortStartScheduler+0x138>)
 800525c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005260:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005262:	f7ff ff69 	bl	8005138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005266:	f7ff f85b 	bl	8004320 <vTaskSwitchContext>
	prvTaskExitError();
 800526a:	f7ff ff21 	bl	80050b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed00 	.word	0xe000ed00
 800527c:	410fc271 	.word	0x410fc271
 8005280:	410fc270 	.word	0x410fc270
 8005284:	e000e400 	.word	0xe000e400
 8005288:	20000964 	.word	0x20000964
 800528c:	20000968 	.word	0x20000968
 8005290:	e000ed20 	.word	0xe000ed20
 8005294:	2000000c 	.word	0x2000000c
 8005298:	e000ef34 	.word	0xe000ef34

0800529c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <vPortEnterCritical+0x54>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <vPortEnterCritical+0x54>)
 80052bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <vPortEnterCritical+0x54>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10e      	bne.n	80052e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <vPortEnterCritical+0x58>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <vPortEnterCritical+0x48>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	e7fe      	b.n	80052e2 <vPortEnterCritical+0x46>
	}
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <vPortExitCritical+0x4c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <vPortExitCritical+0x22>
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e7fe      	b.n	8005318 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <vPortExitCritical+0x4c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3b01      	subs	r3, #1
 8005320:	4a08      	ldr	r2, [pc, #32]	; (8005344 <vPortExitCritical+0x4c>)
 8005322:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <vPortExitCritical+0x4c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <vPortExitCritical+0x3e>
 800532c:	2300      	movs	r3, #0
 800532e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c
	...

08005350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005350:	f3ef 8009 	mrs	r0, PSP
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <pxCurrentTCBConst>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	f01e 0f10 	tst.w	lr, #16
 8005360:	bf08      	it	eq
 8005362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	6010      	str	r0, [r2, #0]
 800536c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005374:	f380 8811 	msr	BASEPRI, r0
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f7fe ffce 	bl	8004320 <vTaskSwitchContext>
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f380 8811 	msr	BASEPRI, r0
 800538c:	bc09      	pop	{r0, r3}
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	6808      	ldr	r0, [r1, #0]
 8005392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005396:	f01e 0f10 	tst.w	lr, #16
 800539a:	bf08      	it	eq
 800539c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053a0:	f380 8809 	msr	PSP, r0
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst>:
 80053b0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053d0:	f7fe feee 	bl	80041b0 <xTaskIncrementTick>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <xPortSysTickHandler+0x3c>)
 80053dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <vPortSetupTimerInterrupt+0x34>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <vPortSetupTimerInterrupt+0x38>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vPortSetupTimerInterrupt+0x3c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <vPortSetupTimerInterrupt+0x40>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	099b      	lsrs	r3, r3, #6
 8005414:	4a09      	ldr	r2, [pc, #36]	; (800543c <vPortSetupTimerInterrupt+0x44>)
 8005416:	3b01      	subs	r3, #1
 8005418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <vPortSetupTimerInterrupt+0x34>)
 800541c:	2207      	movs	r2, #7
 800541e:	601a      	str	r2, [r3, #0]
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000e010 	.word	0xe000e010
 8005430:	e000e018 	.word	0xe000e018
 8005434:	20000000 	.word	0x20000000
 8005438:	10624dd3 	.word	0x10624dd3
 800543c:	e000e014 	.word	0xe000e014

08005440 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005440:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005450 <vPortEnableVFP+0x10>
 8005444:	6801      	ldr	r1, [r0, #0]
 8005446:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800544a:	6001      	str	r1, [r0, #0]
 800544c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800544e:	bf00      	nop
 8005450:	e000ed88 	.word	0xe000ed88

08005454 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800545a:	f3ef 8305 	mrs	r3, IPSR
 800545e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b0f      	cmp	r3, #15
 8005464:	d913      	bls.n	800548e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <vPortValidateInterruptPriority+0x6c>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005470:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <vPortValidateInterruptPriority+0x70>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	7afa      	ldrb	r2, [r7, #11]
 8005476:	429a      	cmp	r2, r3
 8005478:	d209      	bcs.n	800548e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e7fe      	b.n	800548c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <vPortValidateInterruptPriority+0x74>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <vPortValidateInterruptPriority+0x78>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d909      	bls.n	80054b2 <vPortValidateInterruptPriority+0x5e>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	e7fe      	b.n	80054b0 <vPortValidateInterruptPriority+0x5c>
	}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	e000e3f0 	.word	0xe000e3f0
 80054c4:	20000964 	.word	0x20000964
 80054c8:	e000ed0c 	.word	0xe000ed0c
 80054cc:	20000968 	.word	0x20000968

080054d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054dc:	f7fe fdae 	bl	800403c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054e0:	4b57      	ldr	r3, [pc, #348]	; (8005640 <pvPortMalloc+0x170>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054e8:	f000 f90c 	bl	8005704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054ec:	4b55      	ldr	r3, [pc, #340]	; (8005644 <pvPortMalloc+0x174>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f040 808c 	bne.w	8005612 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01c      	beq.n	800553a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005500:	2208      	movs	r2, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4413      	add	r3, r2
 8005506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b00      	cmp	r3, #0
 8005510:	d013      	beq.n	800553a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f023 0307 	bic.w	r3, r3, #7
 8005518:	3308      	adds	r3, #8
 800551a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <pvPortMalloc+0x6a>
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e7fe      	b.n	8005538 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d068      	beq.n	8005612 <pvPortMalloc+0x142>
 8005540:	4b41      	ldr	r3, [pc, #260]	; (8005648 <pvPortMalloc+0x178>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d863      	bhi.n	8005612 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800554a:	4b40      	ldr	r3, [pc, #256]	; (800564c <pvPortMalloc+0x17c>)
 800554c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800554e:	4b3f      	ldr	r3, [pc, #252]	; (800564c <pvPortMalloc+0x17c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005554:	e004      	b.n	8005560 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d903      	bls.n	8005572 <pvPortMalloc+0xa2>
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f1      	bne.n	8005556 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005572:	4b33      	ldr	r3, [pc, #204]	; (8005640 <pvPortMalloc+0x170>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005578:	429a      	cmp	r2, r3
 800557a:	d04a      	beq.n	8005612 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2208      	movs	r2, #8
 8005582:	4413      	add	r3, r2
 8005584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1ad2      	subs	r2, r2, r3
 8005596:	2308      	movs	r3, #8
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	429a      	cmp	r2, r3
 800559c:	d91e      	bls.n	80055dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <pvPortMalloc+0xf4>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e7fe      	b.n	80055c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055d6:	69b8      	ldr	r0, [r7, #24]
 80055d8:	f000 f8f6 	bl	80057c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <pvPortMalloc+0x178>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <pvPortMalloc+0x178>)
 80055e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055ea:	4b17      	ldr	r3, [pc, #92]	; (8005648 <pvPortMalloc+0x178>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <pvPortMalloc+0x180>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d203      	bcs.n	80055fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <pvPortMalloc+0x178>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <pvPortMalloc+0x180>)
 80055fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <pvPortMalloc+0x174>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	431a      	orrs	r2, r3
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005612:	f7fe fd21 	bl	8004058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <pvPortMalloc+0x164>
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e7fe      	b.n	8005632 <pvPortMalloc+0x162>
	return pvReturn;
 8005634:	69fb      	ldr	r3, [r7, #28]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3728      	adds	r7, #40	; 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20004574 	.word	0x20004574
 8005644:	20004580 	.word	0x20004580
 8005648:	20004578 	.word	0x20004578
 800564c:	2000456c 	.word	0x2000456c
 8005650:	2000457c 	.word	0x2000457c

08005654 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d046      	beq.n	80056f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005666:	2308      	movs	r3, #8
 8005668:	425b      	negs	r3, r3
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4b20      	ldr	r3, [pc, #128]	; (80056fc <vPortFree+0xa8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <vPortFree+0x42>
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e7fe      	b.n	8005694 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <vPortFree+0x5e>
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	e7fe      	b.n	80056b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <vPortFree+0xa8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d019      	beq.n	80056f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d115      	bne.n	80056f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <vPortFree+0xa8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	401a      	ands	r2, r3
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056d8:	f7fe fcb0 	bl	800403c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <vPortFree+0xac>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	4a06      	ldr	r2, [pc, #24]	; (8005700 <vPortFree+0xac>)
 80056e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ea:	6938      	ldr	r0, [r7, #16]
 80056ec:	f000 f86c 	bl	80057c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056f0:	f7fe fcb2 	bl	8004058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056f4:	bf00      	nop
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20004580 	.word	0x20004580
 8005700:	20004578 	.word	0x20004578

08005704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800570a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800570e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <prvHeapInit+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3307      	adds	r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <prvHeapInit+0xac>)
 8005734:	4413      	add	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800573c:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <prvHeapInit+0xb0>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <prvHeapInit+0xb0>)
 8005744:	2200      	movs	r2, #0
 8005746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005750:	2208      	movs	r2, #8
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvHeapInit+0xb4>)
 8005764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvHeapInit+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvHeapInit+0xb4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvHeapInit+0xb4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <prvHeapInit+0xb8>)
 8005792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <prvHeapInit+0xbc>)
 800579a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <prvHeapInit+0xc0>)
 800579e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	2000096c 	.word	0x2000096c
 80057b4:	2000456c 	.word	0x2000456c
 80057b8:	20004574 	.word	0x20004574
 80057bc:	2000457c 	.word	0x2000457c
 80057c0:	20004578 	.word	0x20004578
 80057c4:	20004580 	.word	0x20004580

080057c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <prvInsertBlockIntoFreeList+0xac>)
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e002      	b.n	80057dc <prvInsertBlockIntoFreeList+0x14>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d8f7      	bhi.n	80057d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d108      	bne.n	800580a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	441a      	add	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	441a      	add	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d118      	bne.n	8005850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d00d      	beq.n	8005846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e008      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e003      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d002      	beq.n	8005866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2000456c 	.word	0x2000456c
 8005878:	20004574 	.word	0x20004574

0800587c <__errno>:
 800587c:	4b01      	ldr	r3, [pc, #4]	; (8005884 <__errno+0x8>)
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000010 	.word	0x20000010

08005888 <__libc_init_array>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4e0d      	ldr	r6, [pc, #52]	; (80058c0 <__libc_init_array+0x38>)
 800588c:	4c0d      	ldr	r4, [pc, #52]	; (80058c4 <__libc_init_array+0x3c>)
 800588e:	1ba4      	subs	r4, r4, r6
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	2500      	movs	r5, #0
 8005894:	42a5      	cmp	r5, r4
 8005896:	d109      	bne.n	80058ac <__libc_init_array+0x24>
 8005898:	4e0b      	ldr	r6, [pc, #44]	; (80058c8 <__libc_init_array+0x40>)
 800589a:	4c0c      	ldr	r4, [pc, #48]	; (80058cc <__libc_init_array+0x44>)
 800589c:	f000 fc28 	bl	80060f0 <_init>
 80058a0:	1ba4      	subs	r4, r4, r6
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	2500      	movs	r5, #0
 80058a6:	42a5      	cmp	r5, r4
 80058a8:	d105      	bne.n	80058b6 <__libc_init_array+0x2e>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058b0:	4798      	blx	r3
 80058b2:	3501      	adds	r5, #1
 80058b4:	e7ee      	b.n	8005894 <__libc_init_array+0xc>
 80058b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ba:	4798      	blx	r3
 80058bc:	3501      	adds	r5, #1
 80058be:	e7f2      	b.n	80058a6 <__libc_init_array+0x1e>
 80058c0:	080061ec 	.word	0x080061ec
 80058c4:	080061ec 	.word	0x080061ec
 80058c8:	080061ec 	.word	0x080061ec
 80058cc:	080061f0 	.word	0x080061f0

080058d0 <memcpy>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	1e43      	subs	r3, r0, #1
 80058d4:	440a      	add	r2, r1
 80058d6:	4291      	cmp	r1, r2
 80058d8:	d100      	bne.n	80058dc <memcpy+0xc>
 80058da:	bd10      	pop	{r4, pc}
 80058dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e4:	e7f7      	b.n	80058d6 <memcpy+0x6>

080058e6 <memset>:
 80058e6:	4402      	add	r2, r0
 80058e8:	4603      	mov	r3, r0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d100      	bne.n	80058f0 <memset+0xa>
 80058ee:	4770      	bx	lr
 80058f0:	f803 1b01 	strb.w	r1, [r3], #1
 80058f4:	e7f9      	b.n	80058ea <memset+0x4>
	...

080058f8 <siprintf>:
 80058f8:	b40e      	push	{r1, r2, r3}
 80058fa:	b500      	push	{lr}
 80058fc:	b09c      	sub	sp, #112	; 0x70
 80058fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005900:	9002      	str	r0, [sp, #8]
 8005902:	9006      	str	r0, [sp, #24]
 8005904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005908:	4809      	ldr	r0, [pc, #36]	; (8005930 <siprintf+0x38>)
 800590a:	9107      	str	r1, [sp, #28]
 800590c:	9104      	str	r1, [sp, #16]
 800590e:	4909      	ldr	r1, [pc, #36]	; (8005934 <siprintf+0x3c>)
 8005910:	f853 2b04 	ldr.w	r2, [r3], #4
 8005914:	9105      	str	r1, [sp, #20]
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	a902      	add	r1, sp, #8
 800591c:	f000 f866 	bl	80059ec <_svfiprintf_r>
 8005920:	9b02      	ldr	r3, [sp, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	b01c      	add	sp, #112	; 0x70
 8005928:	f85d eb04 	ldr.w	lr, [sp], #4
 800592c:	b003      	add	sp, #12
 800592e:	4770      	bx	lr
 8005930:	20000010 	.word	0x20000010
 8005934:	ffff0208 	.word	0xffff0208

08005938 <__ssputs_r>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	688e      	ldr	r6, [r1, #8]
 800593e:	429e      	cmp	r6, r3
 8005940:	4682      	mov	sl, r0
 8005942:	460c      	mov	r4, r1
 8005944:	4690      	mov	r8, r2
 8005946:	4699      	mov	r9, r3
 8005948:	d837      	bhi.n	80059ba <__ssputs_r+0x82>
 800594a:	898a      	ldrh	r2, [r1, #12]
 800594c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005950:	d031      	beq.n	80059b6 <__ssputs_r+0x7e>
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	6909      	ldr	r1, [r1, #16]
 8005956:	1a6f      	subs	r7, r5, r1
 8005958:	6965      	ldr	r5, [r4, #20]
 800595a:	2302      	movs	r3, #2
 800595c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005960:	fb95 f5f3 	sdiv	r5, r5, r3
 8005964:	f109 0301 	add.w	r3, r9, #1
 8005968:	443b      	add	r3, r7
 800596a:	429d      	cmp	r5, r3
 800596c:	bf38      	it	cc
 800596e:	461d      	movcc	r5, r3
 8005970:	0553      	lsls	r3, r2, #21
 8005972:	d530      	bpl.n	80059d6 <__ssputs_r+0x9e>
 8005974:	4629      	mov	r1, r5
 8005976:	f000 fb21 	bl	8005fbc <_malloc_r>
 800597a:	4606      	mov	r6, r0
 800597c:	b950      	cbnz	r0, 8005994 <__ssputs_r+0x5c>
 800597e:	230c      	movs	r3, #12
 8005980:	f8ca 3000 	str.w	r3, [sl]
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598a:	81a3      	strh	r3, [r4, #12]
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005994:	463a      	mov	r2, r7
 8005996:	6921      	ldr	r1, [r4, #16]
 8005998:	f7ff ff9a 	bl	80058d0 <memcpy>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	6126      	str	r6, [r4, #16]
 80059aa:	6165      	str	r5, [r4, #20]
 80059ac:	443e      	add	r6, r7
 80059ae:	1bed      	subs	r5, r5, r7
 80059b0:	6026      	str	r6, [r4, #0]
 80059b2:	60a5      	str	r5, [r4, #8]
 80059b4:	464e      	mov	r6, r9
 80059b6:	454e      	cmp	r6, r9
 80059b8:	d900      	bls.n	80059bc <__ssputs_r+0x84>
 80059ba:	464e      	mov	r6, r9
 80059bc:	4632      	mov	r2, r6
 80059be:	4641      	mov	r1, r8
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	f000 fa93 	bl	8005eec <memmove>
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	1b9b      	subs	r3, r3, r6
 80059ca:	60a3      	str	r3, [r4, #8]
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	441e      	add	r6, r3
 80059d0:	6026      	str	r6, [r4, #0]
 80059d2:	2000      	movs	r0, #0
 80059d4:	e7dc      	b.n	8005990 <__ssputs_r+0x58>
 80059d6:	462a      	mov	r2, r5
 80059d8:	f000 fb4a 	bl	8006070 <_realloc_r>
 80059dc:	4606      	mov	r6, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	d1e2      	bne.n	80059a8 <__ssputs_r+0x70>
 80059e2:	6921      	ldr	r1, [r4, #16]
 80059e4:	4650      	mov	r0, sl
 80059e6:	f000 fa9b 	bl	8005f20 <_free_r>
 80059ea:	e7c8      	b.n	800597e <__ssputs_r+0x46>

080059ec <_svfiprintf_r>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	461d      	mov	r5, r3
 80059f2:	898b      	ldrh	r3, [r1, #12]
 80059f4:	061f      	lsls	r7, r3, #24
 80059f6:	b09d      	sub	sp, #116	; 0x74
 80059f8:	4680      	mov	r8, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4616      	mov	r6, r2
 80059fe:	d50f      	bpl.n	8005a20 <_svfiprintf_r+0x34>
 8005a00:	690b      	ldr	r3, [r1, #16]
 8005a02:	b96b      	cbnz	r3, 8005a20 <_svfiprintf_r+0x34>
 8005a04:	2140      	movs	r1, #64	; 0x40
 8005a06:	f000 fad9 	bl	8005fbc <_malloc_r>
 8005a0a:	6020      	str	r0, [r4, #0]
 8005a0c:	6120      	str	r0, [r4, #16]
 8005a0e:	b928      	cbnz	r0, 8005a1c <_svfiprintf_r+0x30>
 8005a10:	230c      	movs	r3, #12
 8005a12:	f8c8 3000 	str.w	r3, [r8]
 8005a16:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1a:	e0c8      	b.n	8005bae <_svfiprintf_r+0x1c2>
 8005a1c:	2340      	movs	r3, #64	; 0x40
 8005a1e:	6163      	str	r3, [r4, #20]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9309      	str	r3, [sp, #36]	; 0x24
 8005a24:	2320      	movs	r3, #32
 8005a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a2a:	2330      	movs	r3, #48	; 0x30
 8005a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a30:	9503      	str	r5, [sp, #12]
 8005a32:	f04f 0b01 	mov.w	fp, #1
 8005a36:	4637      	mov	r7, r6
 8005a38:	463d      	mov	r5, r7
 8005a3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a3e:	b10b      	cbz	r3, 8005a44 <_svfiprintf_r+0x58>
 8005a40:	2b25      	cmp	r3, #37	; 0x25
 8005a42:	d13e      	bne.n	8005ac2 <_svfiprintf_r+0xd6>
 8005a44:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a48:	d00b      	beq.n	8005a62 <_svfiprintf_r+0x76>
 8005a4a:	4653      	mov	r3, sl
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4640      	mov	r0, r8
 8005a52:	f7ff ff71 	bl	8005938 <__ssputs_r>
 8005a56:	3001      	adds	r0, #1
 8005a58:	f000 80a4 	beq.w	8005ba4 <_svfiprintf_r+0x1b8>
 8005a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5e:	4453      	add	r3, sl
 8005a60:	9309      	str	r3, [sp, #36]	; 0x24
 8005a62:	783b      	ldrb	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 809d 	beq.w	8005ba4 <_svfiprintf_r+0x1b8>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a7e:	462f      	mov	r7, r5
 8005a80:	2205      	movs	r2, #5
 8005a82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a86:	4850      	ldr	r0, [pc, #320]	; (8005bc8 <_svfiprintf_r+0x1dc>)
 8005a88:	f7fa fbb2 	bl	80001f0 <memchr>
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	b9d0      	cbnz	r0, 8005ac6 <_svfiprintf_r+0xda>
 8005a90:	06d9      	lsls	r1, r3, #27
 8005a92:	bf44      	itt	mi
 8005a94:	2220      	movmi	r2, #32
 8005a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a9a:	071a      	lsls	r2, r3, #28
 8005a9c:	bf44      	itt	mi
 8005a9e:	222b      	movmi	r2, #43	; 0x2b
 8005aa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005aa4:	782a      	ldrb	r2, [r5, #0]
 8005aa6:	2a2a      	cmp	r2, #42	; 0x2a
 8005aa8:	d015      	beq.n	8005ad6 <_svfiprintf_r+0xea>
 8005aaa:	9a07      	ldr	r2, [sp, #28]
 8005aac:	462f      	mov	r7, r5
 8005aae:	2000      	movs	r0, #0
 8005ab0:	250a      	movs	r5, #10
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ab8:	3b30      	subs	r3, #48	; 0x30
 8005aba:	2b09      	cmp	r3, #9
 8005abc:	d94d      	bls.n	8005b5a <_svfiprintf_r+0x16e>
 8005abe:	b1b8      	cbz	r0, 8005af0 <_svfiprintf_r+0x104>
 8005ac0:	e00f      	b.n	8005ae2 <_svfiprintf_r+0xf6>
 8005ac2:	462f      	mov	r7, r5
 8005ac4:	e7b8      	b.n	8005a38 <_svfiprintf_r+0x4c>
 8005ac6:	4a40      	ldr	r2, [pc, #256]	; (8005bc8 <_svfiprintf_r+0x1dc>)
 8005ac8:	1a80      	subs	r0, r0, r2
 8005aca:	fa0b f000 	lsl.w	r0, fp, r0
 8005ace:	4318      	orrs	r0, r3
 8005ad0:	9004      	str	r0, [sp, #16]
 8005ad2:	463d      	mov	r5, r7
 8005ad4:	e7d3      	b.n	8005a7e <_svfiprintf_r+0x92>
 8005ad6:	9a03      	ldr	r2, [sp, #12]
 8005ad8:	1d11      	adds	r1, r2, #4
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	9103      	str	r1, [sp, #12]
 8005ade:	2a00      	cmp	r2, #0
 8005ae0:	db01      	blt.n	8005ae6 <_svfiprintf_r+0xfa>
 8005ae2:	9207      	str	r2, [sp, #28]
 8005ae4:	e004      	b.n	8005af0 <_svfiprintf_r+0x104>
 8005ae6:	4252      	negs	r2, r2
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	9207      	str	r2, [sp, #28]
 8005aee:	9304      	str	r3, [sp, #16]
 8005af0:	783b      	ldrb	r3, [r7, #0]
 8005af2:	2b2e      	cmp	r3, #46	; 0x2e
 8005af4:	d10c      	bne.n	8005b10 <_svfiprintf_r+0x124>
 8005af6:	787b      	ldrb	r3, [r7, #1]
 8005af8:	2b2a      	cmp	r3, #42	; 0x2a
 8005afa:	d133      	bne.n	8005b64 <_svfiprintf_r+0x178>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	9203      	str	r2, [sp, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bfb8      	it	lt
 8005b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b0c:	3702      	adds	r7, #2
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	4d2e      	ldr	r5, [pc, #184]	; (8005bcc <_svfiprintf_r+0x1e0>)
 8005b12:	7839      	ldrb	r1, [r7, #0]
 8005b14:	2203      	movs	r2, #3
 8005b16:	4628      	mov	r0, r5
 8005b18:	f7fa fb6a 	bl	80001f0 <memchr>
 8005b1c:	b138      	cbz	r0, 8005b2e <_svfiprintf_r+0x142>
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	1b40      	subs	r0, r0, r5
 8005b22:	fa03 f000 	lsl.w	r0, r3, r0
 8005b26:	9b04      	ldr	r3, [sp, #16]
 8005b28:	4303      	orrs	r3, r0
 8005b2a:	3701      	adds	r7, #1
 8005b2c:	9304      	str	r3, [sp, #16]
 8005b2e:	7839      	ldrb	r1, [r7, #0]
 8005b30:	4827      	ldr	r0, [pc, #156]	; (8005bd0 <_svfiprintf_r+0x1e4>)
 8005b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b36:	2206      	movs	r2, #6
 8005b38:	1c7e      	adds	r6, r7, #1
 8005b3a:	f7fa fb59 	bl	80001f0 <memchr>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d038      	beq.n	8005bb4 <_svfiprintf_r+0x1c8>
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <_svfiprintf_r+0x1e8>)
 8005b44:	bb13      	cbnz	r3, 8005b8c <_svfiprintf_r+0x1a0>
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	3307      	adds	r3, #7
 8005b4a:	f023 0307 	bic.w	r3, r3, #7
 8005b4e:	3308      	adds	r3, #8
 8005b50:	9303      	str	r3, [sp, #12]
 8005b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b54:	444b      	add	r3, r9
 8005b56:	9309      	str	r3, [sp, #36]	; 0x24
 8005b58:	e76d      	b.n	8005a36 <_svfiprintf_r+0x4a>
 8005b5a:	fb05 3202 	mla	r2, r5, r2, r3
 8005b5e:	2001      	movs	r0, #1
 8005b60:	460f      	mov	r7, r1
 8005b62:	e7a6      	b.n	8005ab2 <_svfiprintf_r+0xc6>
 8005b64:	2300      	movs	r3, #0
 8005b66:	3701      	adds	r7, #1
 8005b68:	9305      	str	r3, [sp, #20]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	250a      	movs	r5, #10
 8005b6e:	4638      	mov	r0, r7
 8005b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b74:	3a30      	subs	r2, #48	; 0x30
 8005b76:	2a09      	cmp	r2, #9
 8005b78:	d903      	bls.n	8005b82 <_svfiprintf_r+0x196>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0c8      	beq.n	8005b10 <_svfiprintf_r+0x124>
 8005b7e:	9105      	str	r1, [sp, #20]
 8005b80:	e7c6      	b.n	8005b10 <_svfiprintf_r+0x124>
 8005b82:	fb05 2101 	mla	r1, r5, r1, r2
 8005b86:	2301      	movs	r3, #1
 8005b88:	4607      	mov	r7, r0
 8005b8a:	e7f0      	b.n	8005b6e <_svfiprintf_r+0x182>
 8005b8c:	ab03      	add	r3, sp, #12
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4622      	mov	r2, r4
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <_svfiprintf_r+0x1ec>)
 8005b94:	a904      	add	r1, sp, #16
 8005b96:	4640      	mov	r0, r8
 8005b98:	f3af 8000 	nop.w
 8005b9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ba0:	4681      	mov	r9, r0
 8005ba2:	d1d6      	bne.n	8005b52 <_svfiprintf_r+0x166>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	065b      	lsls	r3, r3, #25
 8005ba8:	f53f af35 	bmi.w	8005a16 <_svfiprintf_r+0x2a>
 8005bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bae:	b01d      	add	sp, #116	; 0x74
 8005bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb4:	ab03      	add	r3, sp, #12
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4622      	mov	r2, r4
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <_svfiprintf_r+0x1ec>)
 8005bbc:	a904      	add	r1, sp, #16
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f000 f882 	bl	8005cc8 <_printf_i>
 8005bc4:	e7ea      	b.n	8005b9c <_svfiprintf_r+0x1b0>
 8005bc6:	bf00      	nop
 8005bc8:	080061b0 	.word	0x080061b0
 8005bcc:	080061b6 	.word	0x080061b6
 8005bd0:	080061ba 	.word	0x080061ba
 8005bd4:	00000000 	.word	0x00000000
 8005bd8:	08005939 	.word	0x08005939

08005bdc <_printf_common>:
 8005bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be0:	4691      	mov	r9, r2
 8005be2:	461f      	mov	r7, r3
 8005be4:	688a      	ldr	r2, [r1, #8]
 8005be6:	690b      	ldr	r3, [r1, #16]
 8005be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	bfb8      	it	lt
 8005bf0:	4613      	movlt	r3, r2
 8005bf2:	f8c9 3000 	str.w	r3, [r9]
 8005bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	b112      	cbz	r2, 8005c06 <_printf_common+0x2a>
 8005c00:	3301      	adds	r3, #1
 8005c02:	f8c9 3000 	str.w	r3, [r9]
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	0699      	lsls	r1, r3, #26
 8005c0a:	bf42      	ittt	mi
 8005c0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c10:	3302      	addmi	r3, #2
 8005c12:	f8c9 3000 	strmi.w	r3, [r9]
 8005c16:	6825      	ldr	r5, [r4, #0]
 8005c18:	f015 0506 	ands.w	r5, r5, #6
 8005c1c:	d107      	bne.n	8005c2e <_printf_common+0x52>
 8005c1e:	f104 0a19 	add.w	sl, r4, #25
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	f8d9 2000 	ldr.w	r2, [r9]
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	42ab      	cmp	r3, r5
 8005c2c:	dc28      	bgt.n	8005c80 <_printf_common+0xa4>
 8005c2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	3300      	adds	r3, #0
 8005c36:	bf18      	it	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	0692      	lsls	r2, r2, #26
 8005c3c:	d42d      	bmi.n	8005c9a <_printf_common+0xbe>
 8005c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c42:	4639      	mov	r1, r7
 8005c44:	4630      	mov	r0, r6
 8005c46:	47c0      	blx	r8
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d020      	beq.n	8005c8e <_printf_common+0xb2>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	68e5      	ldr	r5, [r4, #12]
 8005c50:	f8d9 2000 	ldr.w	r2, [r9]
 8005c54:	f003 0306 	and.w	r3, r3, #6
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	bf08      	it	eq
 8005c5c:	1aad      	subeq	r5, r5, r2
 8005c5e:	68a3      	ldr	r3, [r4, #8]
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	bf0c      	ite	eq
 8005c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c68:	2500      	movne	r5, #0
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	bfc4      	itt	gt
 8005c6e:	1a9b      	subgt	r3, r3, r2
 8005c70:	18ed      	addgt	r5, r5, r3
 8005c72:	f04f 0900 	mov.w	r9, #0
 8005c76:	341a      	adds	r4, #26
 8005c78:	454d      	cmp	r5, r9
 8005c7a:	d11a      	bne.n	8005cb2 <_printf_common+0xd6>
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	e008      	b.n	8005c92 <_printf_common+0xb6>
 8005c80:	2301      	movs	r3, #1
 8005c82:	4652      	mov	r2, sl
 8005c84:	4639      	mov	r1, r7
 8005c86:	4630      	mov	r0, r6
 8005c88:	47c0      	blx	r8
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d103      	bne.n	8005c96 <_printf_common+0xba>
 8005c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c96:	3501      	adds	r5, #1
 8005c98:	e7c3      	b.n	8005c22 <_printf_common+0x46>
 8005c9a:	18e1      	adds	r1, r4, r3
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	2030      	movs	r0, #48	; 0x30
 8005ca0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca4:	4422      	add	r2, r4
 8005ca6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005caa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cae:	3302      	adds	r3, #2
 8005cb0:	e7c5      	b.n	8005c3e <_printf_common+0x62>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	4630      	mov	r0, r6
 8005cba:	47c0      	blx	r8
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d0e6      	beq.n	8005c8e <_printf_common+0xb2>
 8005cc0:	f109 0901 	add.w	r9, r9, #1
 8005cc4:	e7d8      	b.n	8005c78 <_printf_common+0x9c>
	...

08005cc8 <_printf_i>:
 8005cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ccc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	7e09      	ldrb	r1, [r1, #24]
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	296e      	cmp	r1, #110	; 0x6e
 8005cd8:	4617      	mov	r7, r2
 8005cda:	4606      	mov	r6, r0
 8005cdc:	4698      	mov	r8, r3
 8005cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ce0:	f000 80b3 	beq.w	8005e4a <_printf_i+0x182>
 8005ce4:	d822      	bhi.n	8005d2c <_printf_i+0x64>
 8005ce6:	2963      	cmp	r1, #99	; 0x63
 8005ce8:	d036      	beq.n	8005d58 <_printf_i+0x90>
 8005cea:	d80a      	bhi.n	8005d02 <_printf_i+0x3a>
 8005cec:	2900      	cmp	r1, #0
 8005cee:	f000 80b9 	beq.w	8005e64 <_printf_i+0x19c>
 8005cf2:	2958      	cmp	r1, #88	; 0x58
 8005cf4:	f000 8083 	beq.w	8005dfe <_printf_i+0x136>
 8005cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d00:	e032      	b.n	8005d68 <_printf_i+0xa0>
 8005d02:	2964      	cmp	r1, #100	; 0x64
 8005d04:	d001      	beq.n	8005d0a <_printf_i+0x42>
 8005d06:	2969      	cmp	r1, #105	; 0x69
 8005d08:	d1f6      	bne.n	8005cf8 <_printf_i+0x30>
 8005d0a:	6820      	ldr	r0, [r4, #0]
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	0605      	lsls	r5, r0, #24
 8005d10:	f103 0104 	add.w	r1, r3, #4
 8005d14:	d52a      	bpl.n	8005d6c <_printf_i+0xa4>
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6011      	str	r1, [r2, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da03      	bge.n	8005d26 <_printf_i+0x5e>
 8005d1e:	222d      	movs	r2, #45	; 0x2d
 8005d20:	425b      	negs	r3, r3
 8005d22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d26:	486f      	ldr	r0, [pc, #444]	; (8005ee4 <_printf_i+0x21c>)
 8005d28:	220a      	movs	r2, #10
 8005d2a:	e039      	b.n	8005da0 <_printf_i+0xd8>
 8005d2c:	2973      	cmp	r1, #115	; 0x73
 8005d2e:	f000 809d 	beq.w	8005e6c <_printf_i+0x1a4>
 8005d32:	d808      	bhi.n	8005d46 <_printf_i+0x7e>
 8005d34:	296f      	cmp	r1, #111	; 0x6f
 8005d36:	d020      	beq.n	8005d7a <_printf_i+0xb2>
 8005d38:	2970      	cmp	r1, #112	; 0x70
 8005d3a:	d1dd      	bne.n	8005cf8 <_printf_i+0x30>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	f043 0320 	orr.w	r3, r3, #32
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	e003      	b.n	8005d4e <_printf_i+0x86>
 8005d46:	2975      	cmp	r1, #117	; 0x75
 8005d48:	d017      	beq.n	8005d7a <_printf_i+0xb2>
 8005d4a:	2978      	cmp	r1, #120	; 0x78
 8005d4c:	d1d4      	bne.n	8005cf8 <_printf_i+0x30>
 8005d4e:	2378      	movs	r3, #120	; 0x78
 8005d50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d54:	4864      	ldr	r0, [pc, #400]	; (8005ee8 <_printf_i+0x220>)
 8005d56:	e055      	b.n	8005e04 <_printf_i+0x13c>
 8005d58:	6813      	ldr	r3, [r2, #0]
 8005d5a:	1d19      	adds	r1, r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6011      	str	r1, [r2, #0]
 8005d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e08c      	b.n	8005e86 <_printf_i+0x1be>
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6011      	str	r1, [r2, #0]
 8005d70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d74:	bf18      	it	ne
 8005d76:	b21b      	sxthne	r3, r3
 8005d78:	e7cf      	b.n	8005d1a <_printf_i+0x52>
 8005d7a:	6813      	ldr	r3, [r2, #0]
 8005d7c:	6825      	ldr	r5, [r4, #0]
 8005d7e:	1d18      	adds	r0, r3, #4
 8005d80:	6010      	str	r0, [r2, #0]
 8005d82:	0628      	lsls	r0, r5, #24
 8005d84:	d501      	bpl.n	8005d8a <_printf_i+0xc2>
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	e002      	b.n	8005d90 <_printf_i+0xc8>
 8005d8a:	0668      	lsls	r0, r5, #25
 8005d8c:	d5fb      	bpl.n	8005d86 <_printf_i+0xbe>
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	4854      	ldr	r0, [pc, #336]	; (8005ee4 <_printf_i+0x21c>)
 8005d92:	296f      	cmp	r1, #111	; 0x6f
 8005d94:	bf14      	ite	ne
 8005d96:	220a      	movne	r2, #10
 8005d98:	2208      	moveq	r2, #8
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005da0:	6865      	ldr	r5, [r4, #4]
 8005da2:	60a5      	str	r5, [r4, #8]
 8005da4:	2d00      	cmp	r5, #0
 8005da6:	f2c0 8095 	blt.w	8005ed4 <_printf_i+0x20c>
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	f021 0104 	bic.w	r1, r1, #4
 8005db0:	6021      	str	r1, [r4, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d13d      	bne.n	8005e32 <_printf_i+0x16a>
 8005db6:	2d00      	cmp	r5, #0
 8005db8:	f040 808e 	bne.w	8005ed8 <_printf_i+0x210>
 8005dbc:	4665      	mov	r5, ip
 8005dbe:	2a08      	cmp	r2, #8
 8005dc0:	d10b      	bne.n	8005dda <_printf_i+0x112>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	07db      	lsls	r3, r3, #31
 8005dc6:	d508      	bpl.n	8005dda <_printf_i+0x112>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	6862      	ldr	r2, [r4, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	bfde      	ittt	le
 8005dd0:	2330      	movle	r3, #48	; 0x30
 8005dd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dda:	ebac 0305 	sub.w	r3, ip, r5
 8005dde:	6123      	str	r3, [r4, #16]
 8005de0:	f8cd 8000 	str.w	r8, [sp]
 8005de4:	463b      	mov	r3, r7
 8005de6:	aa03      	add	r2, sp, #12
 8005de8:	4621      	mov	r1, r4
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7ff fef6 	bl	8005bdc <_printf_common>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d14d      	bne.n	8005e90 <_printf_i+0x1c8>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	b005      	add	sp, #20
 8005dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dfe:	4839      	ldr	r0, [pc, #228]	; (8005ee4 <_printf_i+0x21c>)
 8005e00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e04:	6813      	ldr	r3, [r2, #0]
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	1d1d      	adds	r5, r3, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6015      	str	r5, [r2, #0]
 8005e0e:	060a      	lsls	r2, r1, #24
 8005e10:	d50b      	bpl.n	8005e2a <_printf_i+0x162>
 8005e12:	07ca      	lsls	r2, r1, #31
 8005e14:	bf44      	itt	mi
 8005e16:	f041 0120 	orrmi.w	r1, r1, #32
 8005e1a:	6021      	strmi	r1, [r4, #0]
 8005e1c:	b91b      	cbnz	r3, 8005e26 <_printf_i+0x15e>
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	f022 0220 	bic.w	r2, r2, #32
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	2210      	movs	r2, #16
 8005e28:	e7b7      	b.n	8005d9a <_printf_i+0xd2>
 8005e2a:	064d      	lsls	r5, r1, #25
 8005e2c:	bf48      	it	mi
 8005e2e:	b29b      	uxthmi	r3, r3
 8005e30:	e7ef      	b.n	8005e12 <_printf_i+0x14a>
 8005e32:	4665      	mov	r5, ip
 8005e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e38:	fb02 3311 	mls	r3, r2, r1, r3
 8005e3c:	5cc3      	ldrb	r3, [r0, r3]
 8005e3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e42:	460b      	mov	r3, r1
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d1f5      	bne.n	8005e34 <_printf_i+0x16c>
 8005e48:	e7b9      	b.n	8005dbe <_printf_i+0xf6>
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	6825      	ldr	r5, [r4, #0]
 8005e4e:	6961      	ldr	r1, [r4, #20]
 8005e50:	1d18      	adds	r0, r3, #4
 8005e52:	6010      	str	r0, [r2, #0]
 8005e54:	0628      	lsls	r0, r5, #24
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	d501      	bpl.n	8005e5e <_printf_i+0x196>
 8005e5a:	6019      	str	r1, [r3, #0]
 8005e5c:	e002      	b.n	8005e64 <_printf_i+0x19c>
 8005e5e:	066a      	lsls	r2, r5, #25
 8005e60:	d5fb      	bpl.n	8005e5a <_printf_i+0x192>
 8005e62:	8019      	strh	r1, [r3, #0]
 8005e64:	2300      	movs	r3, #0
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	4665      	mov	r5, ip
 8005e6a:	e7b9      	b.n	8005de0 <_printf_i+0x118>
 8005e6c:	6813      	ldr	r3, [r2, #0]
 8005e6e:	1d19      	adds	r1, r3, #4
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	681d      	ldr	r5, [r3, #0]
 8005e74:	6862      	ldr	r2, [r4, #4]
 8005e76:	2100      	movs	r1, #0
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7fa f9b9 	bl	80001f0 <memchr>
 8005e7e:	b108      	cbz	r0, 8005e84 <_printf_i+0x1bc>
 8005e80:	1b40      	subs	r0, r0, r5
 8005e82:	6060      	str	r0, [r4, #4]
 8005e84:	6863      	ldr	r3, [r4, #4]
 8005e86:	6123      	str	r3, [r4, #16]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8e:	e7a7      	b.n	8005de0 <_printf_i+0x118>
 8005e90:	6923      	ldr	r3, [r4, #16]
 8005e92:	462a      	mov	r2, r5
 8005e94:	4639      	mov	r1, r7
 8005e96:	4630      	mov	r0, r6
 8005e98:	47c0      	blx	r8
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d0aa      	beq.n	8005df4 <_printf_i+0x12c>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	079b      	lsls	r3, r3, #30
 8005ea2:	d413      	bmi.n	8005ecc <_printf_i+0x204>
 8005ea4:	68e0      	ldr	r0, [r4, #12]
 8005ea6:	9b03      	ldr	r3, [sp, #12]
 8005ea8:	4298      	cmp	r0, r3
 8005eaa:	bfb8      	it	lt
 8005eac:	4618      	movlt	r0, r3
 8005eae:	e7a3      	b.n	8005df8 <_printf_i+0x130>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	464a      	mov	r2, r9
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	47c0      	blx	r8
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d09a      	beq.n	8005df4 <_printf_i+0x12c>
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	68e3      	ldr	r3, [r4, #12]
 8005ec2:	9a03      	ldr	r2, [sp, #12]
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	42ab      	cmp	r3, r5
 8005ec8:	dcf2      	bgt.n	8005eb0 <_printf_i+0x1e8>
 8005eca:	e7eb      	b.n	8005ea4 <_printf_i+0x1dc>
 8005ecc:	2500      	movs	r5, #0
 8005ece:	f104 0919 	add.w	r9, r4, #25
 8005ed2:	e7f5      	b.n	8005ec0 <_printf_i+0x1f8>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1ac      	bne.n	8005e32 <_printf_i+0x16a>
 8005ed8:	7803      	ldrb	r3, [r0, #0]
 8005eda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ede:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee2:	e76c      	b.n	8005dbe <_printf_i+0xf6>
 8005ee4:	080061c1 	.word	0x080061c1
 8005ee8:	080061d2 	.word	0x080061d2

08005eec <memmove>:
 8005eec:	4288      	cmp	r0, r1
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	eb01 0302 	add.w	r3, r1, r2
 8005ef4:	d807      	bhi.n	8005f06 <memmove+0x1a>
 8005ef6:	1e42      	subs	r2, r0, #1
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	d00a      	beq.n	8005f12 <memmove+0x26>
 8005efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f00:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f04:	e7f8      	b.n	8005ef8 <memmove+0xc>
 8005f06:	4283      	cmp	r3, r0
 8005f08:	d9f5      	bls.n	8005ef6 <memmove+0xa>
 8005f0a:	1881      	adds	r1, r0, r2
 8005f0c:	1ad2      	subs	r2, r2, r3
 8005f0e:	42d3      	cmn	r3, r2
 8005f10:	d100      	bne.n	8005f14 <memmove+0x28>
 8005f12:	bd10      	pop	{r4, pc}
 8005f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f1c:	e7f7      	b.n	8005f0e <memmove+0x22>
	...

08005f20 <_free_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4605      	mov	r5, r0
 8005f24:	2900      	cmp	r1, #0
 8005f26:	d045      	beq.n	8005fb4 <_free_r+0x94>
 8005f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f2c:	1f0c      	subs	r4, r1, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bfb8      	it	lt
 8005f32:	18e4      	addlt	r4, r4, r3
 8005f34:	f000 f8d2 	bl	80060dc <__malloc_lock>
 8005f38:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <_free_r+0x98>)
 8005f3a:	6813      	ldr	r3, [r2, #0]
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	b933      	cbnz	r3, 8005f4e <_free_r+0x2e>
 8005f40:	6063      	str	r3, [r4, #4]
 8005f42:	6014      	str	r4, [r2, #0]
 8005f44:	4628      	mov	r0, r5
 8005f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f4a:	f000 b8c8 	b.w	80060de <__malloc_unlock>
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	d90c      	bls.n	8005f6c <_free_r+0x4c>
 8005f52:	6821      	ldr	r1, [r4, #0]
 8005f54:	1862      	adds	r2, r4, r1
 8005f56:	4293      	cmp	r3, r2
 8005f58:	bf04      	itt	eq
 8005f5a:	681a      	ldreq	r2, [r3, #0]
 8005f5c:	685b      	ldreq	r3, [r3, #4]
 8005f5e:	6063      	str	r3, [r4, #4]
 8005f60:	bf04      	itt	eq
 8005f62:	1852      	addeq	r2, r2, r1
 8005f64:	6022      	streq	r2, [r4, #0]
 8005f66:	6004      	str	r4, [r0, #0]
 8005f68:	e7ec      	b.n	8005f44 <_free_r+0x24>
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	b10a      	cbz	r2, 8005f74 <_free_r+0x54>
 8005f70:	42a2      	cmp	r2, r4
 8005f72:	d9fa      	bls.n	8005f6a <_free_r+0x4a>
 8005f74:	6819      	ldr	r1, [r3, #0]
 8005f76:	1858      	adds	r0, r3, r1
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d10b      	bne.n	8005f94 <_free_r+0x74>
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	4401      	add	r1, r0
 8005f80:	1858      	adds	r0, r3, r1
 8005f82:	4282      	cmp	r2, r0
 8005f84:	6019      	str	r1, [r3, #0]
 8005f86:	d1dd      	bne.n	8005f44 <_free_r+0x24>
 8005f88:	6810      	ldr	r0, [r2, #0]
 8005f8a:	6852      	ldr	r2, [r2, #4]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	4401      	add	r1, r0
 8005f90:	6019      	str	r1, [r3, #0]
 8005f92:	e7d7      	b.n	8005f44 <_free_r+0x24>
 8005f94:	d902      	bls.n	8005f9c <_free_r+0x7c>
 8005f96:	230c      	movs	r3, #12
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	e7d3      	b.n	8005f44 <_free_r+0x24>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	1821      	adds	r1, r4, r0
 8005fa0:	428a      	cmp	r2, r1
 8005fa2:	bf04      	itt	eq
 8005fa4:	6811      	ldreq	r1, [r2, #0]
 8005fa6:	6852      	ldreq	r2, [r2, #4]
 8005fa8:	6062      	str	r2, [r4, #4]
 8005faa:	bf04      	itt	eq
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	605c      	str	r4, [r3, #4]
 8005fb2:	e7c7      	b.n	8005f44 <_free_r+0x24>
 8005fb4:	bd38      	pop	{r3, r4, r5, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20004584 	.word	0x20004584

08005fbc <_malloc_r>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	1ccd      	adds	r5, r1, #3
 8005fc0:	f025 0503 	bic.w	r5, r5, #3
 8005fc4:	3508      	adds	r5, #8
 8005fc6:	2d0c      	cmp	r5, #12
 8005fc8:	bf38      	it	cc
 8005fca:	250c      	movcc	r5, #12
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	4606      	mov	r6, r0
 8005fd0:	db01      	blt.n	8005fd6 <_malloc_r+0x1a>
 8005fd2:	42a9      	cmp	r1, r5
 8005fd4:	d903      	bls.n	8005fde <_malloc_r+0x22>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	2000      	movs	r0, #0
 8005fdc:	bd70      	pop	{r4, r5, r6, pc}
 8005fde:	f000 f87d 	bl	80060dc <__malloc_lock>
 8005fe2:	4a21      	ldr	r2, [pc, #132]	; (8006068 <_malloc_r+0xac>)
 8005fe4:	6814      	ldr	r4, [r2, #0]
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	b991      	cbnz	r1, 8006010 <_malloc_r+0x54>
 8005fea:	4c20      	ldr	r4, [pc, #128]	; (800606c <_malloc_r+0xb0>)
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	b91b      	cbnz	r3, 8005ff8 <_malloc_r+0x3c>
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 f863 	bl	80060bc <_sbrk_r>
 8005ff6:	6020      	str	r0, [r4, #0]
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f000 f85e 	bl	80060bc <_sbrk_r>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d124      	bne.n	800604e <_malloc_r+0x92>
 8006004:	230c      	movs	r3, #12
 8006006:	6033      	str	r3, [r6, #0]
 8006008:	4630      	mov	r0, r6
 800600a:	f000 f868 	bl	80060de <__malloc_unlock>
 800600e:	e7e4      	b.n	8005fda <_malloc_r+0x1e>
 8006010:	680b      	ldr	r3, [r1, #0]
 8006012:	1b5b      	subs	r3, r3, r5
 8006014:	d418      	bmi.n	8006048 <_malloc_r+0x8c>
 8006016:	2b0b      	cmp	r3, #11
 8006018:	d90f      	bls.n	800603a <_malloc_r+0x7e>
 800601a:	600b      	str	r3, [r1, #0]
 800601c:	50cd      	str	r5, [r1, r3]
 800601e:	18cc      	adds	r4, r1, r3
 8006020:	4630      	mov	r0, r6
 8006022:	f000 f85c 	bl	80060de <__malloc_unlock>
 8006026:	f104 000b 	add.w	r0, r4, #11
 800602a:	1d23      	adds	r3, r4, #4
 800602c:	f020 0007 	bic.w	r0, r0, #7
 8006030:	1ac3      	subs	r3, r0, r3
 8006032:	d0d3      	beq.n	8005fdc <_malloc_r+0x20>
 8006034:	425a      	negs	r2, r3
 8006036:	50e2      	str	r2, [r4, r3]
 8006038:	e7d0      	b.n	8005fdc <_malloc_r+0x20>
 800603a:	428c      	cmp	r4, r1
 800603c:	684b      	ldr	r3, [r1, #4]
 800603e:	bf16      	itet	ne
 8006040:	6063      	strne	r3, [r4, #4]
 8006042:	6013      	streq	r3, [r2, #0]
 8006044:	460c      	movne	r4, r1
 8006046:	e7eb      	b.n	8006020 <_malloc_r+0x64>
 8006048:	460c      	mov	r4, r1
 800604a:	6849      	ldr	r1, [r1, #4]
 800604c:	e7cc      	b.n	8005fe8 <_malloc_r+0x2c>
 800604e:	1cc4      	adds	r4, r0, #3
 8006050:	f024 0403 	bic.w	r4, r4, #3
 8006054:	42a0      	cmp	r0, r4
 8006056:	d005      	beq.n	8006064 <_malloc_r+0xa8>
 8006058:	1a21      	subs	r1, r4, r0
 800605a:	4630      	mov	r0, r6
 800605c:	f000 f82e 	bl	80060bc <_sbrk_r>
 8006060:	3001      	adds	r0, #1
 8006062:	d0cf      	beq.n	8006004 <_malloc_r+0x48>
 8006064:	6025      	str	r5, [r4, #0]
 8006066:	e7db      	b.n	8006020 <_malloc_r+0x64>
 8006068:	20004584 	.word	0x20004584
 800606c:	20004588 	.word	0x20004588

08006070 <_realloc_r>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	4607      	mov	r7, r0
 8006074:	4614      	mov	r4, r2
 8006076:	460e      	mov	r6, r1
 8006078:	b921      	cbnz	r1, 8006084 <_realloc_r+0x14>
 800607a:	4611      	mov	r1, r2
 800607c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006080:	f7ff bf9c 	b.w	8005fbc <_malloc_r>
 8006084:	b922      	cbnz	r2, 8006090 <_realloc_r+0x20>
 8006086:	f7ff ff4b 	bl	8005f20 <_free_r>
 800608a:	4625      	mov	r5, r4
 800608c:	4628      	mov	r0, r5
 800608e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006090:	f000 f826 	bl	80060e0 <_malloc_usable_size_r>
 8006094:	42a0      	cmp	r0, r4
 8006096:	d20f      	bcs.n	80060b8 <_realloc_r+0x48>
 8006098:	4621      	mov	r1, r4
 800609a:	4638      	mov	r0, r7
 800609c:	f7ff ff8e 	bl	8005fbc <_malloc_r>
 80060a0:	4605      	mov	r5, r0
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d0f2      	beq.n	800608c <_realloc_r+0x1c>
 80060a6:	4631      	mov	r1, r6
 80060a8:	4622      	mov	r2, r4
 80060aa:	f7ff fc11 	bl	80058d0 <memcpy>
 80060ae:	4631      	mov	r1, r6
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff ff35 	bl	8005f20 <_free_r>
 80060b6:	e7e9      	b.n	800608c <_realloc_r+0x1c>
 80060b8:	4635      	mov	r5, r6
 80060ba:	e7e7      	b.n	800608c <_realloc_r+0x1c>

080060bc <_sbrk_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4c06      	ldr	r4, [pc, #24]	; (80060d8 <_sbrk_r+0x1c>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	4605      	mov	r5, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	f7fa fdaa 	bl	8000c20 <_sbrk>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_sbrk_r+0x1a>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_sbrk_r+0x1a>
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20004674 	.word	0x20004674

080060dc <__malloc_lock>:
 80060dc:	4770      	bx	lr

080060de <__malloc_unlock>:
 80060de:	4770      	bx	lr

080060e0 <_malloc_usable_size_r>:
 80060e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e4:	1f18      	subs	r0, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	bfbc      	itt	lt
 80060ea:	580b      	ldrlt	r3, [r1, r0]
 80060ec:	18c0      	addlt	r0, r0, r3
 80060ee:	4770      	bx	lr

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr
