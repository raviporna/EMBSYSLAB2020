
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c54  08004c54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004594  20000010  08004c6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045a4  08004c6c  000245a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6fe  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025a8  00000000  00000000  0002f73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  00031ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  00032968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000166d5  00000000  00000000  000334d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a645  00000000  00000000  00049ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d36f  00000000  00000000  000541ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000323c  00000000  00000000  000e15d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b7c 	.word	0x08004b7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004b7c 	.word	0x08004b7c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetTimerTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetTimerTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000532:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	20000280 	.word	0x20000280
 8000544:	200002d4 	.word	0x200002d4

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fa77 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f81d 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8af 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f883 	bl	8000664 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <main+0x40>)
 8000560:	1d3c      	adds	r4, r7, #4
 8000562:	461d      	mov	r5, r3
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fe9e 	bl	80022b6 <osThreadCreate>
 800057a:	4602      	mov	r2, r0
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <main+0x44>)
 800057e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000580:	f001 fe92 	bl	80022a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x3c>
 8000586:	bf00      	nop
 8000588:	08004ba0 	.word	0x08004ba0
 800058c:	2000451c 	.word	0x2000451c

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fae3 	bl	8004b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000600:	2310      	movs	r3, #16
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060a:	2304      	movs	r3, #4
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060e:	2304      	movs	r3, #4
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fd20 	bl	800105c <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 f931 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 ff7a 	bl	800153c <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800064e:	f000 f91b 	bl	8000888 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 f940 	bl	8001920 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f8ef 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20004520 	.word	0x20004520
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd4>)
 8000744:	f000 fc56 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_GPIO_Init+0xdc>)
 800075e:	f000 fac7 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000762:	2320      	movs	r3, #32
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
 800077a:	f000 fab9 	bl	8000cf0 <HAL_GPIO_Init>

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	10210000 	.word	0x10210000
 8000794:	40020800 	.word	0x40020800

08000798 <t1_thread>:

/* USER CODE BEGIN 4 */

void t1_thread(void const *args){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	char c = 'A';
 80007a0:	2341      	movs	r3, #65	; 0x41
 80007a2:	73fb      	strb	r3, [r7, #15]
	while(1){
		HAL_UART_Transmit(&huart2,&c,1,50);
 80007a4:	f107 010f 	add.w	r1, r7, #15
 80007a8:	2332      	movs	r3, #50	; 0x32
 80007aa:	2201      	movs	r2, #1
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <t1_thread+0x24>)
 80007ae:	f001 f904 	bl	80019ba <HAL_UART_Transmit>
		osDelay(50);
 80007b2:	2032      	movs	r0, #50	; 0x32
 80007b4:	f001 fdcb 	bl	800234e <osDelay>
		HAL_UART_Transmit(&huart2,&c,1,50);
 80007b8:	e7f4      	b.n	80007a4 <t1_thread+0xc>
 80007ba:	bf00      	nop
 80007bc:	20004520 	.word	0x20004520

080007c0 <t2_thread>:
	}
}
void t2_thread(void const *args){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80007c8:	2120      	movs	r1, #32
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <t2_thread+0x18>)
 80007cc:	f000 fc2b 	bl	8001026 <HAL_GPIO_TogglePin>
		osDelay(18);
 80007d0:	2012      	movs	r0, #18
 80007d2:	f001 fdbc 	bl	800234e <osDelay>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80007d6:	e7f7      	b.n	80007c8 <t2_thread+0x8>
 80007d8:	40020000 	.word	0x40020000

080007dc <t3_thread>:
	}
}
void t3_thread(void const *args){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	char c = 'B';
 80007e4:	2342      	movs	r3, #66	; 0x42
 80007e6:	73fb      	strb	r3, [r7, #15]
	while(1){
		HAL_UART_Transmit(&huart2,&c,1,128);
 80007e8:	f107 010f 	add.w	r1, r7, #15
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	2201      	movs	r2, #1
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <t3_thread+0x24>)
 80007f2:	f001 f8e2 	bl	80019ba <HAL_UART_Transmit>
		osDelay(128);
 80007f6:	2080      	movs	r0, #128	; 0x80
 80007f8:	f001 fda9 	bl	800234e <osDelay>
		HAL_UART_Transmit(&huart2,&c,1,128);
 80007fc:	e7f4      	b.n	80007e8 <t3_thread+0xc>
 80007fe:	bf00      	nop
 8000800:	20004520 	.word	0x20004520

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b09a      	sub	sp, #104	; 0x68
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osThreadDef(t1, t1_thread, osPriorityNormal, 0, 128);
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <StartDefaultTask+0x78>)
 800080e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000812:	461d      	mov	r5, r3
 8000814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId t1TaskHandle = osThreadCreate(osThread(t1), NULL);
 8000820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fd45 	bl	80022b6 <osThreadCreate>
 800082c:	6678      	str	r0, [r7, #100]	; 0x64
  osThreadDef(t2, t2_thread, osPriorityNormal, 0, 128);
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <StartDefaultTask+0x7c>)
 8000830:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000834:	461d      	mov	r5, r3
 8000836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId t2TaskHandle = osThreadCreate(osThread(t2), NULL);
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fd34 	bl	80022b6 <osThreadCreate>
 800084e:	6638      	str	r0, [r7, #96]	; 0x60
  osThreadDef(t3, t3_thread, osPriorityNormal, 0, 128);
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <StartDefaultTask+0x80>)
 8000852:	f107 0408 	add.w	r4, r7, #8
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId t3TaskHandle = osThreadCreate(osThread(t3), NULL);
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fd23 	bl	80022b6 <osThreadCreate>
 8000870:	65f8      	str	r0, [r7, #92]	; 0x5c
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f001 fd6b 	bl	800234e <osDelay>
 8000878:	e7fb      	b.n	8000872 <StartDefaultTask+0x6e>
 800087a:	bf00      	nop
 800087c:	08004bc0 	.word	0x08004bc0
 8000880:	08004be0 	.word	0x08004be0
 8000884:	08004c00 	.word	0x08004c00

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088e:	e7fe      	b.n	800088e <Error_Handler+0x6>

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_MspInit+0x54>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x54>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_MspInit+0x54>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_MspInit+0x54>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 f9e2 	bl	8000c9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12b      	bne.n	8000962 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_UART_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000942:	230c      	movs	r3, #12
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000952:	2307      	movs	r3, #7
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0x8c>)
 800095e:	f000 f9c7 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f89c 	bl	8000ae4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ac:	f003 f860 	bl	8003a70 <xTaskGetSchedulerState>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d001      	beq.n	80009ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009b6:	f003 fe47 	bl	8004648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <SystemInit+0x28>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <SystemInit+0x28>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SystemInit+0x28>)
 80009d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009da:	609a      	str	r2, [r3, #8]
#endif
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009f2:	e003      	b.n	80009fc <LoopCopyDataInit>

080009f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009fa:	3104      	adds	r1, #4

080009fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a04:	d3f6      	bcc.n	80009f4 <CopyDataInit>
  ldr  r2, =_sbss
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a08:	e002      	b.n	8000a10 <LoopFillZerobss>

08000a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a0c:	f842 3b04 	str.w	r3, [r2], #4

08000a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a14:	d3f9      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a16:	f7ff ffd3 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f004 f877 	bl	8004b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1e:	f7ff fd93 	bl	8000548 <main>
  bx  lr    
 8000a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a28:	08004c5c 	.word	0x08004c5c
  ldr  r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a30:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a34:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a38:	200045a4 	.word	0x200045a4

08000a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_Init+0x40>)
 8000a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_Init+0x40>)
 8000a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_Init+0x40>)
 8000a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f90d 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f808 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff ff0c 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023c00 	.word	0x40023c00

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x54>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x58>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f917 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00e      	b.n	8000ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d80a      	bhi.n	8000ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f000 f8ed 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_InitTick+0x5c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20004560 	.word	0x20004560

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20004560 	.word	0x20004560

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff47 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff5c 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffb0 	bl	8000c44 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	e159      	b.n	8000fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	f040 8148 	bne.w	8000fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d00b      	beq.n	8000d4a <HAL_GPIO_Init+0x5a>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d007      	beq.n	8000d4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3e:	2b11      	cmp	r3, #17
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d130      	bne.n	8000dac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68da      	ldr	r2, [r3, #12]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	f003 0201 	and.w	r2, r3, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0xfc>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b12      	cmp	r3, #18
 8000dea:	d123      	bne.n	8000e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	69b9      	ldr	r1, [r7, #24]
 8000e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0203 	and.w	r2, r3, #3
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80a2 	beq.w	8000fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x2e4>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a55      	ldr	r2, [pc, #340]	; (8000fd4 <HAL_GPIO_Init+0x2e4>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_GPIO_Init+0x2e4>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e92:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x2ec>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x202>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x1fe>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a46      	ldr	r2, [pc, #280]	; (8000fe4 <HAL_GPIO_Init+0x2f4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x1fa>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a45      	ldr	r2, [pc, #276]	; (8000fe8 <HAL_GPIO_Init+0x2f8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x1f6>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a44      	ldr	r2, [pc, #272]	; (8000fec <HAL_GPIO_Init+0x2fc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x1f2>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e008      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	f002 0203 	and.w	r2, r2, #3
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f04:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f36:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f60:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	f67f aea2 	bls.w	8000d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3724      	adds	r7, #36	; 0x24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	041a      	lsls	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	401a      	ands	r2, r3
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	429a      	cmp	r2, r3
 800103e:	d104      	bne.n	800104a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	041a      	lsls	r2, r3, #16
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001048:	e002      	b.n	8001050 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e25b      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d075      	beq.n	8001166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107a:	4ba3      	ldr	r3, [pc, #652]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	2b08      	cmp	r3, #8
 8001090:	d112      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b99      	ldr	r3, [pc, #612]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d05b      	beq.n	8001164 <HAL_RCC_OscConfig+0x108>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d157      	bne.n	8001164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e236      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x74>
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a90      	ldr	r2, [pc, #576]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e01d      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a8a      	ldr	r2, [pc, #552]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a87      	ldr	r2, [pc, #540]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010f4:	4b84      	ldr	r3, [pc, #528]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a83      	ldr	r2, [pc, #524]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b81      	ldr	r3, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a80      	ldr	r2, [pc, #512]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fcfa 	bl	8000b0c <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fcf6 	bl	8000b0c <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1fb      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0xc0>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fce6 	bl	8000b0c <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fce2 	bl	8000b0c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1e7      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b6c      	ldr	r3, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0xe8>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e1bb      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b56      	ldr	r3, [pc, #344]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4952      	ldr	r1, [pc, #328]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e03a      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc9b 	bl	8000b0c <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fc97 	bl	8000b0c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e19c      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4940      	ldr	r1, [pc, #256]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc7a 	bl	8000b0c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fc76 	bl	8000b0c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e17b      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d030      	beq.n	80012a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fc5a 	bl	8000b0c <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc56 	bl	8000b0c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e15b      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x200>
 800127a:	e015      	b.n	80012a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fc43 	bl	8000b0c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fc3f 	bl	8000b0c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e144      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a0 	beq.w	80013f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d121      	bne.n	8001336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc05 	bl	8000b0c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e011      	b.n	800132a <HAL_RCC_OscConfig+0x2ce>
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
 8001310:	42470e80 	.word	0x42470e80
 8001314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001318:	f7ff fbf8 	bl	8000b0c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0fd      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b81      	ldr	r3, [pc, #516]	; (8001530 <HAL_RCC_OscConfig+0x4d4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x2f0>
 800133e:	4b7d      	ldr	r3, [pc, #500]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a7c      	ldr	r2, [pc, #496]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
 800134a:	e01c      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x312>
 8001354:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	4a76      	ldr	r2, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6713      	str	r3, [r2, #112]	; 0x70
 8001360:	4b74      	ldr	r3, [pc, #464]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a73      	ldr	r2, [pc, #460]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800136e:	4b71      	ldr	r3, [pc, #452]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a70      	ldr	r2, [pc, #448]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	4b6e      	ldr	r3, [pc, #440]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a6d      	ldr	r2, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d015      	beq.n	80013ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138e:	f7ff fbbd 	bl	8000b0c <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fbb9 	bl	8000b0c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0bc      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ee      	beq.n	8001396 <HAL_RCC_OscConfig+0x33a>
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fba7 	bl	8000b0c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fba3 	bl	8000b0c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0a6      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ea:	4b52      	ldr	r3, [pc, #328]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80013f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8092 	beq.w	8001524 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001400:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d05c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d141      	bne.n	8001498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b48      	ldr	r3, [pc, #288]	; (8001538 <HAL_RCC_OscConfig+0x4dc>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb77 	bl	8000b0c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fb73 	bl	8000b0c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e078      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001434:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	019b      	lsls	r3, r3, #6
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	061b      	lsls	r3, r3, #24
 8001464:	4933      	ldr	r1, [pc, #204]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_OscConfig+0x4dc>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fb4c 	bl	8000b0c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fb48 	bl	8000b0c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e04d      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x41c>
 8001496:	e045      	b.n	8001524 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x4dc>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb35 	bl	8000b0c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb31 	bl	8000b0c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e036      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x44a>
 80014c4:	e02e      	b.n	8001524 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e029      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_OscConfig+0x4d8>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d11c      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d115      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014fa:	4013      	ands	r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001500:	4293      	cmp	r3, r2
 8001502:	d10d      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40007000 	.word	0x40007000
 8001534:	40023800 	.word	0x40023800
 8001538:	42470060 	.word	0x42470060

0800153c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0cc      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d90c      	bls.n	8001578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b63      	ldr	r3, [pc, #396]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0b8      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800159a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	494d      	ldr	r1, [pc, #308]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d044      	beq.n	800165c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e067      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 0203 	bic.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4934      	ldr	r1, [pc, #208]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800162c:	f7ff fa6e 	bl	8000b0c <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff fa6a 	bl	8000b0c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e04f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 020c 	and.w	r2, r3, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	429a      	cmp	r2, r3
 800165a:	d1eb      	bne.n	8001634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d20c      	bcs.n	8001684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e032      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4916      	ldr	r1, [pc, #88]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	490e      	ldr	r1, [pc, #56]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c2:	f000 f821 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016c6:	4601      	mov	r1, r0
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	fa21 f303 	lsr.w	r3, r1, r3
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f9ce 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	08004c34 	.word	0x08004c34
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d007      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x32>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d008      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x38>
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80b4 	bne.w	800189c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001736:	60bb      	str	r3, [r7, #8]
       break;
 8001738:	e0b3      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800173a:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800173c:	60bb      	str	r3, [r7, #8]
      break;
 800173e:	e0b0      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174a:	4b58      	ldr	r3, [pc, #352]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04a      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b55      	ldr	r3, [pc, #340]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	ea03 0501 	and.w	r5, r3, r1
 800176c:	ea04 0602 	and.w	r6, r4, r2
 8001770:	4629      	mov	r1, r5
 8001772:	4632      	mov	r2, r6
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	f04f 0400 	mov.w	r4, #0
 800177c:	0154      	lsls	r4, r2, #5
 800177e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001782:	014b      	lsls	r3, r1, #5
 8001784:	4619      	mov	r1, r3
 8001786:	4622      	mov	r2, r4
 8001788:	1b49      	subs	r1, r1, r5
 800178a:	eb62 0206 	sbc.w	r2, r2, r6
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f04f 0400 	mov.w	r4, #0
 8001796:	0194      	lsls	r4, r2, #6
 8001798:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800179c:	018b      	lsls	r3, r1, #6
 800179e:	1a5b      	subs	r3, r3, r1
 80017a0:	eb64 0402 	sbc.w	r4, r4, r2
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	00e2      	lsls	r2, r4, #3
 80017ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017b2:	00d9      	lsls	r1, r3, #3
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	195b      	adds	r3, r3, r5
 80017ba:	eb44 0406 	adc.w	r4, r4, r6
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	0262      	lsls	r2, r4, #9
 80017c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017cc:	0259      	lsls	r1, r3, #9
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	4621      	mov	r1, r4
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	461a      	mov	r2, r3
 80017de:	4623      	mov	r3, r4
 80017e0:	f7fe fcfe 	bl	80001e0 <__aeabi_uldivmod>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e049      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	ea03 0501 	and.w	r5, r3, r1
 8001802:	ea04 0602 	and.w	r6, r4, r2
 8001806:	4629      	mov	r1, r5
 8001808:	4632      	mov	r2, r6
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	0154      	lsls	r4, r2, #5
 8001814:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001818:	014b      	lsls	r3, r1, #5
 800181a:	4619      	mov	r1, r3
 800181c:	4622      	mov	r2, r4
 800181e:	1b49      	subs	r1, r1, r5
 8001820:	eb62 0206 	sbc.w	r2, r2, r6
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	0194      	lsls	r4, r2, #6
 800182e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001832:	018b      	lsls	r3, r1, #6
 8001834:	1a5b      	subs	r3, r3, r1
 8001836:	eb64 0402 	sbc.w	r4, r4, r2
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	00e2      	lsls	r2, r4, #3
 8001844:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001848:	00d9      	lsls	r1, r3, #3
 800184a:	460b      	mov	r3, r1
 800184c:	4614      	mov	r4, r2
 800184e:	195b      	adds	r3, r3, r5
 8001850:	eb44 0406 	adc.w	r4, r4, r6
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	02a2      	lsls	r2, r4, #10
 800185e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001862:	0299      	lsls	r1, r3, #10
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	4618      	mov	r0, r3
 800186a:	4621      	mov	r1, r4
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	461a      	mov	r2, r3
 8001874:	4623      	mov	r3, r4
 8001876:	f7fe fcb3 	bl	80001e0 <__aeabi_uldivmod>
 800187a:	4603      	mov	r3, r0
 800187c:	460c      	mov	r4, r1
 800187e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	60bb      	str	r3, [r7, #8]
      break;
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800189e:	60bb      	str	r3, [r7, #8]
      break;
 80018a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a2:	68bb      	ldr	r3, [r7, #8]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	007a1200 	.word	0x007a1200

080018b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_GetHCLKFreq+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d8:	4601      	mov	r1, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0a9b      	lsrs	r3, r3, #10
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08004c44 	.word	0x08004c44

080018f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018fc:	f7ff ffdc 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 8001900:	4601      	mov	r1, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	0b5b      	lsrs	r3, r3, #13
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_RCC_GetPCLK2Freq+0x24>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	08004c44 	.word	0x08004c44

08001920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e03f      	b.n	80019b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe ffce 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2224      	movs	r2, #36	; 0x24
 8001950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f90b 	bl	8001b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b088      	sub	sp, #32
 80019be:	af02      	add	r7, sp, #8
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4613      	mov	r3, r2
 80019c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	f040 8083 	bne.w	8001ae2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_UART_Transmit+0x2e>
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e07b      	b.n	8001ae4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_UART_Transmit+0x40>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e074      	b.n	8001ae4 <HAL_UART_Transmit+0x12a>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2221      	movs	r2, #33	; 0x21
 8001a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a10:	f7ff f87c 	bl	8000b0c <HAL_GetTick>
 8001a14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a2a:	e042      	b.n	8001ab2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a42:	d122      	bne.n	8001a8a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f84c 	bl	8001aec <UART_WaitOnFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e042      	b.n	8001ae4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	e017      	b.n	8001ab2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3301      	adds	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	e013      	b.n	8001ab2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2200      	movs	r2, #0
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 f829 	bl	8001aec <UART_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e01f      	b.n	8001ae4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1b7      	bne.n	8001a2c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2140      	movs	r1, #64	; 0x40
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f810 	bl	8001aec <UART_WaitOnFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e006      	b.n	8001ae4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001ae2:	2302      	movs	r3, #2
  }
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001afc:	e02c      	b.n	8001b58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d028      	beq.n	8001b58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8001b0c:	f7fe fffe 	bl	8000b0c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d21d      	bcs.n	8001b58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e00f      	b.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4013      	ands	r3, r2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d0c3      	beq.n	8001afe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001bc2:	f023 030c 	bic.w	r3, r3, #12
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bee:	f040 818b 	bne.w	8001f08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4ac1      	ldr	r2, [pc, #772]	; (8001efc <UART_SetConfig+0x37c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d005      	beq.n	8001c08 <UART_SetConfig+0x88>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4abf      	ldr	r2, [pc, #764]	; (8001f00 <UART_SetConfig+0x380>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	f040 80bd 	bne.w	8001d82 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c08:	f7ff fe76 	bl	80018f8 <HAL_RCC_GetPCLK2Freq>
 8001c0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	461d      	mov	r5, r3
 8001c12:	f04f 0600 	mov.w	r6, #0
 8001c16:	46a8      	mov	r8, r5
 8001c18:	46b1      	mov	r9, r6
 8001c1a:	eb18 0308 	adds.w	r3, r8, r8
 8001c1e:	eb49 0409 	adc.w	r4, r9, r9
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a1      	mov	r9, r4
 8001c26:	eb18 0805 	adds.w	r8, r8, r5
 8001c2a:	eb49 0906 	adc.w	r9, r9, r6
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001c3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001c3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001c42:	4688      	mov	r8, r1
 8001c44:	4691      	mov	r9, r2
 8001c46:	eb18 0005 	adds.w	r0, r8, r5
 8001c4a:	eb49 0106 	adc.w	r1, r9, r6
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	461d      	mov	r5, r3
 8001c54:	f04f 0600 	mov.w	r6, #0
 8001c58:	196b      	adds	r3, r5, r5
 8001c5a:	eb46 0406 	adc.w	r4, r6, r6
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe fabd 	bl	80001e0 <__aeabi_uldivmod>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4ba5      	ldr	r3, [pc, #660]	; (8001f04 <UART_SetConfig+0x384>)
 8001c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	f04f 0600 	mov.w	r6, #0
 8001c80:	46a9      	mov	r9, r5
 8001c82:	46b2      	mov	sl, r6
 8001c84:	eb19 0309 	adds.w	r3, r9, r9
 8001c88:	eb4a 040a 	adc.w	r4, sl, sl
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	46a2      	mov	sl, r4
 8001c90:	eb19 0905 	adds.w	r9, r9, r5
 8001c94:	eb4a 0a06 	adc.w	sl, sl, r6
 8001c98:	f04f 0100 	mov.w	r1, #0
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001cac:	4689      	mov	r9, r1
 8001cae:	4692      	mov	sl, r2
 8001cb0:	eb19 0005 	adds.w	r0, r9, r5
 8001cb4:	eb4a 0106 	adc.w	r1, sl, r6
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	461d      	mov	r5, r3
 8001cbe:	f04f 0600 	mov.w	r6, #0
 8001cc2:	196b      	adds	r3, r5, r5
 8001cc4:	eb46 0406 	adc.w	r4, r6, r6
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4623      	mov	r3, r4
 8001ccc:	f7fe fa88 	bl	80001e0 <__aeabi_uldivmod>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <UART_SetConfig+0x384>)
 8001cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cdc:	095b      	lsrs	r3, r3, #5
 8001cde:	2164      	movs	r1, #100	; 0x64
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	3332      	adds	r3, #50	; 0x32
 8001cea:	4a86      	ldr	r2, [pc, #536]	; (8001f04 <UART_SetConfig+0x384>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cf8:	4498      	add	r8, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	461d      	mov	r5, r3
 8001cfe:	f04f 0600 	mov.w	r6, #0
 8001d02:	46a9      	mov	r9, r5
 8001d04:	46b2      	mov	sl, r6
 8001d06:	eb19 0309 	adds.w	r3, r9, r9
 8001d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8001d0e:	4699      	mov	r9, r3
 8001d10:	46a2      	mov	sl, r4
 8001d12:	eb19 0905 	adds.w	r9, r9, r5
 8001d16:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d2e:	4689      	mov	r9, r1
 8001d30:	4692      	mov	sl, r2
 8001d32:	eb19 0005 	adds.w	r0, r9, r5
 8001d36:	eb4a 0106 	adc.w	r1, sl, r6
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	461d      	mov	r5, r3
 8001d40:	f04f 0600 	mov.w	r6, #0
 8001d44:	196b      	adds	r3, r5, r5
 8001d46:	eb46 0406 	adc.w	r4, r6, r6
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4623      	mov	r3, r4
 8001d4e:	f7fe fa47 	bl	80001e0 <__aeabi_uldivmod>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <UART_SetConfig+0x384>)
 8001d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2164      	movs	r1, #100	; 0x64
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	3332      	adds	r3, #50	; 0x32
 8001d6c:	4a65      	ldr	r2, [pc, #404]	; (8001f04 <UART_SetConfig+0x384>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	f003 0207 	and.w	r2, r3, #7
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4442      	add	r2, r8
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	e26f      	b.n	8002262 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d82:	f7ff fda5 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8001d86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	f04f 0600 	mov.w	r6, #0
 8001d90:	46a8      	mov	r8, r5
 8001d92:	46b1      	mov	r9, r6
 8001d94:	eb18 0308 	adds.w	r3, r8, r8
 8001d98:	eb49 0409 	adc.w	r4, r9, r9
 8001d9c:	4698      	mov	r8, r3
 8001d9e:	46a1      	mov	r9, r4
 8001da0:	eb18 0805 	adds.w	r8, r8, r5
 8001da4:	eb49 0906 	adc.w	r9, r9, r6
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001db4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001db8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001dbc:	4688      	mov	r8, r1
 8001dbe:	4691      	mov	r9, r2
 8001dc0:	eb18 0005 	adds.w	r0, r8, r5
 8001dc4:	eb49 0106 	adc.w	r1, r9, r6
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	461d      	mov	r5, r3
 8001dce:	f04f 0600 	mov.w	r6, #0
 8001dd2:	196b      	adds	r3, r5, r5
 8001dd4:	eb46 0406 	adc.w	r4, r6, r6
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4623      	mov	r3, r4
 8001ddc:	f7fe fa00 	bl	80001e0 <__aeabi_uldivmod>
 8001de0:	4603      	mov	r3, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <UART_SetConfig+0x384>)
 8001de8:	fba3 2302 	umull	r2, r3, r3, r2
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	461d      	mov	r5, r3
 8001df6:	f04f 0600 	mov.w	r6, #0
 8001dfa:	46a9      	mov	r9, r5
 8001dfc:	46b2      	mov	sl, r6
 8001dfe:	eb19 0309 	adds.w	r3, r9, r9
 8001e02:	eb4a 040a 	adc.w	r4, sl, sl
 8001e06:	4699      	mov	r9, r3
 8001e08:	46a2      	mov	sl, r4
 8001e0a:	eb19 0905 	adds.w	r9, r9, r5
 8001e0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e26:	4689      	mov	r9, r1
 8001e28:	4692      	mov	sl, r2
 8001e2a:	eb19 0005 	adds.w	r0, r9, r5
 8001e2e:	eb4a 0106 	adc.w	r1, sl, r6
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	461d      	mov	r5, r3
 8001e38:	f04f 0600 	mov.w	r6, #0
 8001e3c:	196b      	adds	r3, r5, r5
 8001e3e:	eb46 0406 	adc.w	r4, r6, r6
 8001e42:	461a      	mov	r2, r3
 8001e44:	4623      	mov	r3, r4
 8001e46:	f7fe f9cb 	bl	80001e0 <__aeabi_uldivmod>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <UART_SetConfig+0x384>)
 8001e52:	fba3 1302 	umull	r1, r3, r3, r2
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2164      	movs	r1, #100	; 0x64
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	3332      	adds	r3, #50	; 0x32
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <UART_SetConfig+0x384>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e72:	4498      	add	r8, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	461d      	mov	r5, r3
 8001e78:	f04f 0600 	mov.w	r6, #0
 8001e7c:	46a9      	mov	r9, r5
 8001e7e:	46b2      	mov	sl, r6
 8001e80:	eb19 0309 	adds.w	r3, r9, r9
 8001e84:	eb4a 040a 	adc.w	r4, sl, sl
 8001e88:	4699      	mov	r9, r3
 8001e8a:	46a2      	mov	sl, r4
 8001e8c:	eb19 0905 	adds.w	r9, r9, r5
 8001e90:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ea0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ea4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ea8:	4689      	mov	r9, r1
 8001eaa:	4692      	mov	sl, r2
 8001eac:	eb19 0005 	adds.w	r0, r9, r5
 8001eb0:	eb4a 0106 	adc.w	r1, sl, r6
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	461d      	mov	r5, r3
 8001eba:	f04f 0600 	mov.w	r6, #0
 8001ebe:	196b      	adds	r3, r5, r5
 8001ec0:	eb46 0406 	adc.w	r4, r6, r6
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4623      	mov	r3, r4
 8001ec8:	f7fe f98a 	bl	80001e0 <__aeabi_uldivmod>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <UART_SetConfig+0x384>)
 8001ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	2164      	movs	r1, #100	; 0x64
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	3332      	adds	r3, #50	; 0x32
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <UART_SetConfig+0x384>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	f003 0207 	and.w	r2, r3, #7
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4442      	add	r2, r8
 8001ef8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001efa:	e1b2      	b.n	8002262 <UART_SetConfig+0x6e2>
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40011400 	.word	0x40011400
 8001f04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4ad7      	ldr	r2, [pc, #860]	; (800226c <UART_SetConfig+0x6ec>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d005      	beq.n	8001f1e <UART_SetConfig+0x39e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4ad6      	ldr	r2, [pc, #856]	; (8002270 <UART_SetConfig+0x6f0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 80d1 	bne.w	80020c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f1e:	f7ff fceb 	bl	80018f8 <HAL_RCC_GetPCLK2Freq>
 8001f22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	469a      	mov	sl, r3
 8001f28:	f04f 0b00 	mov.w	fp, #0
 8001f2c:	46d0      	mov	r8, sl
 8001f2e:	46d9      	mov	r9, fp
 8001f30:	eb18 0308 	adds.w	r3, r8, r8
 8001f34:	eb49 0409 	adc.w	r4, r9, r9
 8001f38:	4698      	mov	r8, r3
 8001f3a:	46a1      	mov	r9, r4
 8001f3c:	eb18 080a 	adds.w	r8, r8, sl
 8001f40:	eb49 090b 	adc.w	r9, r9, fp
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f58:	4688      	mov	r8, r1
 8001f5a:	4691      	mov	r9, r2
 8001f5c:	eb1a 0508 	adds.w	r5, sl, r8
 8001f60:	eb4b 0609 	adc.w	r6, fp, r9
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	f04f 0400 	mov.w	r4, #0
 8001f76:	0094      	lsls	r4, r2, #2
 8001f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f7c:	008b      	lsls	r3, r1, #2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4623      	mov	r3, r4
 8001f82:	4628      	mov	r0, r5
 8001f84:	4631      	mov	r1, r6
 8001f86:	f7fe f92b 	bl	80001e0 <__aeabi_uldivmod>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4bb8      	ldr	r3, [pc, #736]	; (8002274 <UART_SetConfig+0x6f4>)
 8001f92:	fba3 2302 	umull	r2, r3, r3, r2
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	469b      	mov	fp, r3
 8001fa0:	f04f 0c00 	mov.w	ip, #0
 8001fa4:	46d9      	mov	r9, fp
 8001fa6:	46e2      	mov	sl, ip
 8001fa8:	eb19 0309 	adds.w	r3, r9, r9
 8001fac:	eb4a 040a 	adc.w	r4, sl, sl
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	46a2      	mov	sl, r4
 8001fb4:	eb19 090b 	adds.w	r9, r9, fp
 8001fb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fd0:	4689      	mov	r9, r1
 8001fd2:	4692      	mov	sl, r2
 8001fd4:	eb1b 0509 	adds.w	r5, fp, r9
 8001fd8:	eb4c 060a 	adc.w	r6, ip, sl
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f04f 0400 	mov.w	r4, #0
 8001fee:	0094      	lsls	r4, r2, #2
 8001ff0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001ff4:	008b      	lsls	r3, r1, #2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	4631      	mov	r1, r6
 8001ffe:	f7fe f8ef 	bl	80001e0 <__aeabi_uldivmod>
 8002002:	4603      	mov	r3, r0
 8002004:	460c      	mov	r4, r1
 8002006:	461a      	mov	r2, r3
 8002008:	4b9a      	ldr	r3, [pc, #616]	; (8002274 <UART_SetConfig+0x6f4>)
 800200a:	fba3 1302 	umull	r1, r3, r3, r2
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2164      	movs	r1, #100	; 0x64
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	3332      	adds	r3, #50	; 0x32
 800201c:	4a95      	ldr	r2, [pc, #596]	; (8002274 <UART_SetConfig+0x6f4>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002028:	4498      	add	r8, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	469b      	mov	fp, r3
 800202e:	f04f 0c00 	mov.w	ip, #0
 8002032:	46d9      	mov	r9, fp
 8002034:	46e2      	mov	sl, ip
 8002036:	eb19 0309 	adds.w	r3, r9, r9
 800203a:	eb4a 040a 	adc.w	r4, sl, sl
 800203e:	4699      	mov	r9, r3
 8002040:	46a2      	mov	sl, r4
 8002042:	eb19 090b 	adds.w	r9, r9, fp
 8002046:	eb4a 0a0c 	adc.w	sl, sl, ip
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800205a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800205e:	4689      	mov	r9, r1
 8002060:	4692      	mov	sl, r2
 8002062:	eb1b 0509 	adds.w	r5, fp, r9
 8002066:	eb4c 060a 	adc.w	r6, ip, sl
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	0094      	lsls	r4, r2, #2
 800207e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002082:	008b      	lsls	r3, r1, #2
 8002084:	461a      	mov	r2, r3
 8002086:	4623      	mov	r3, r4
 8002088:	4628      	mov	r0, r5
 800208a:	4631      	mov	r1, r6
 800208c:	f7fe f8a8 	bl	80001e0 <__aeabi_uldivmod>
 8002090:	4603      	mov	r3, r0
 8002092:	460c      	mov	r4, r1
 8002094:	461a      	mov	r2, r3
 8002096:	4b77      	ldr	r3, [pc, #476]	; (8002274 <UART_SetConfig+0x6f4>)
 8002098:	fba3 1302 	umull	r1, r3, r3, r2
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	2164      	movs	r1, #100	; 0x64
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	3332      	adds	r3, #50	; 0x32
 80020aa:	4a72      	ldr	r2, [pc, #456]	; (8002274 <UART_SetConfig+0x6f4>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	f003 020f 	and.w	r2, r3, #15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4442      	add	r2, r8
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	e0d0      	b.n	8002262 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80020c0:	f7ff fc06 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80020c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	469a      	mov	sl, r3
 80020ca:	f04f 0b00 	mov.w	fp, #0
 80020ce:	46d0      	mov	r8, sl
 80020d0:	46d9      	mov	r9, fp
 80020d2:	eb18 0308 	adds.w	r3, r8, r8
 80020d6:	eb49 0409 	adc.w	r4, r9, r9
 80020da:	4698      	mov	r8, r3
 80020dc:	46a1      	mov	r9, r4
 80020de:	eb18 080a 	adds.w	r8, r8, sl
 80020e2:	eb49 090b 	adc.w	r9, r9, fp
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020fa:	4688      	mov	r8, r1
 80020fc:	4691      	mov	r9, r2
 80020fe:	eb1a 0508 	adds.w	r5, sl, r8
 8002102:	eb4b 0609 	adc.w	r6, fp, r9
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4619      	mov	r1, r3
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	f04f 0400 	mov.w	r4, #0
 8002118:	0094      	lsls	r4, r2, #2
 800211a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800211e:	008b      	lsls	r3, r1, #2
 8002120:	461a      	mov	r2, r3
 8002122:	4623      	mov	r3, r4
 8002124:	4628      	mov	r0, r5
 8002126:	4631      	mov	r1, r6
 8002128:	f7fe f85a 	bl	80001e0 <__aeabi_uldivmod>
 800212c:	4603      	mov	r3, r0
 800212e:	460c      	mov	r4, r1
 8002130:	461a      	mov	r2, r3
 8002132:	4b50      	ldr	r3, [pc, #320]	; (8002274 <UART_SetConfig+0x6f4>)
 8002134:	fba3 2302 	umull	r2, r3, r3, r2
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	469b      	mov	fp, r3
 8002142:	f04f 0c00 	mov.w	ip, #0
 8002146:	46d9      	mov	r9, fp
 8002148:	46e2      	mov	sl, ip
 800214a:	eb19 0309 	adds.w	r3, r9, r9
 800214e:	eb4a 040a 	adc.w	r4, sl, sl
 8002152:	4699      	mov	r9, r3
 8002154:	46a2      	mov	sl, r4
 8002156:	eb19 090b 	adds.w	r9, r9, fp
 800215a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800216e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002172:	4689      	mov	r9, r1
 8002174:	4692      	mov	sl, r2
 8002176:	eb1b 0509 	adds.w	r5, fp, r9
 800217a:	eb4c 060a 	adc.w	r6, ip, sl
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	f04f 0400 	mov.w	r4, #0
 8002190:	0094      	lsls	r4, r2, #2
 8002192:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002196:	008b      	lsls	r3, r1, #2
 8002198:	461a      	mov	r2, r3
 800219a:	4623      	mov	r3, r4
 800219c:	4628      	mov	r0, r5
 800219e:	4631      	mov	r1, r6
 80021a0:	f7fe f81e 	bl	80001e0 <__aeabi_uldivmod>
 80021a4:	4603      	mov	r3, r0
 80021a6:	460c      	mov	r4, r1
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <UART_SetConfig+0x6f4>)
 80021ac:	fba3 1302 	umull	r1, r3, r3, r2
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	2164      	movs	r1, #100	; 0x64
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	3332      	adds	r3, #50	; 0x32
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <UART_SetConfig+0x6f4>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ca:	4498      	add	r8, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	469b      	mov	fp, r3
 80021d0:	f04f 0c00 	mov.w	ip, #0
 80021d4:	46d9      	mov	r9, fp
 80021d6:	46e2      	mov	sl, ip
 80021d8:	eb19 0309 	adds.w	r3, r9, r9
 80021dc:	eb4a 040a 	adc.w	r4, sl, sl
 80021e0:	4699      	mov	r9, r3
 80021e2:	46a2      	mov	sl, r4
 80021e4:	eb19 090b 	adds.w	r9, r9, fp
 80021e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002200:	4689      	mov	r9, r1
 8002202:	4692      	mov	sl, r2
 8002204:	eb1b 0509 	adds.w	r5, fp, r9
 8002208:	eb4c 060a 	adc.w	r6, ip, sl
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f04f 0400 	mov.w	r4, #0
 800221e:	0094      	lsls	r4, r2, #2
 8002220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002224:	008b      	lsls	r3, r1, #2
 8002226:	461a      	mov	r2, r3
 8002228:	4623      	mov	r3, r4
 800222a:	4628      	mov	r0, r5
 800222c:	4631      	mov	r1, r6
 800222e:	f7fd ffd7 	bl	80001e0 <__aeabi_uldivmod>
 8002232:	4603      	mov	r3, r0
 8002234:	460c      	mov	r4, r1
 8002236:	461a      	mov	r2, r3
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <UART_SetConfig+0x6f4>)
 800223a:	fba3 1302 	umull	r1, r3, r3, r2
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2164      	movs	r1, #100	; 0x64
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	3332      	adds	r3, #50	; 0x32
 800224c:	4a09      	ldr	r2, [pc, #36]	; (8002274 <UART_SetConfig+0x6f4>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4442      	add	r2, r8
 800225e:	609a      	str	r2, [r3, #8]
}
 8002260:	e7ff      	b.n	8002262 <UART_SetConfig+0x6e2>
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800226c:	40011000 	.word	0x40011000
 8002270:	40011400 	.word	0x40011400
 8002274:	51eb851f 	.word	0x51eb851f

08002278 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228a:	2b84      	cmp	r3, #132	; 0x84
 800228c:	d005      	beq.n	800229a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800228e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	3303      	adds	r3, #3
 8002298:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80022ac:	f000 ffac 	bl	8003208 <vTaskStartScheduler>
  
  return osOK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80022b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b8:	b089      	sub	sp, #36	; 0x24
 80022ba:	af04      	add	r7, sp, #16
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <osThreadCreate+0x54>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685c      	ldr	r4, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681d      	ldr	r5, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691e      	ldr	r6, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ffc8 	bl	8002278 <makeFreeRtosPriority>
 80022e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022f2:	9202      	str	r2, [sp, #8]
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	9100      	str	r1, [sp, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4632      	mov	r2, r6
 80022fc:	4629      	mov	r1, r5
 80022fe:	4620      	mov	r0, r4
 8002300:	f000 fdbe 	bl	8002e80 <xTaskCreateStatic>
 8002304:	4603      	mov	r3, r0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e01c      	b.n	8002344 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685c      	ldr	r4, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002316:	b29e      	uxth	r6, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffaa 	bl	8002278 <makeFreeRtosPriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	9200      	str	r2, [sp, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	4632      	mov	r2, r6
 8002332:	4629      	mov	r1, r5
 8002334:	4620      	mov	r0, r4
 8002336:	f000 fdfd 	bl	8002f34 <xTaskCreate>
 800233a:	4603      	mov	r3, r0
 800233c:	2b01      	cmp	r3, #1
 800233e:	d001      	beq.n	8002344 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002344:	68fb      	ldr	r3, [r7, #12]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800234e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <osDelay+0x16>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	e000      	b.n	8002366 <osDelay+0x18>
 8002364:	2301      	movs	r3, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f000 ff1a 	bl	80031a0 <vTaskDelay>
  
  return osOK;
 800236c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f103 0208 	add.w	r2, r3, #8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f04f 32ff 	mov.w	r2, #4294967295
 800238e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0208 	add.w	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f103 0208 	add.w	r2, r3, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d103      	bne.n	8002438 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e00c      	b.n	8002452 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3308      	adds	r3, #8
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e002      	b.n	8002446 <vListInsert+0x2e>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	d2f6      	bcs.n	8002440 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6852      	ldr	r2, [r2, #4]
 80024aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d103      	bne.n	80024be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	e7fe      	b.n	8002506 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002508:	f002 f810 	bl	800452c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	441a      	add	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	3b01      	subs	r3, #1
 800253a:	68f9      	ldr	r1, [r7, #12]
 800253c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	22ff      	movs	r2, #255	; 0xff
 800254c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	22ff      	movs	r2, #255	; 0xff
 8002554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d114      	bne.n	8002588 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01a      	beq.n	800259c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3310      	adds	r3, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f001 f8ca 	bl	8003704 <xTaskRemoveFromEventList>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <xQueueGenericReset+0xcc>)
 8002578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	e009      	b.n	800259c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3310      	adds	r3, #16
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fef2 	bl	8002376 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3324      	adds	r3, #36	; 0x24
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff feed 	bl	8002376 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800259c:	f001 fff4 	bl	8004588 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025a0:	2301      	movs	r3, #1
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <xQueueGenericCreateStatic+0x28>
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d6:	e7fe      	b.n	80025d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <xQueueGenericCreateStatic+0x42>
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <xQueueGenericCreateStatic+0x4e>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <xQueueGenericCreateStatic+0x52>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <xQueueGenericCreateStatic+0x54>
 8002602:	2300      	movs	r3, #0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <xQueueGenericCreateStatic+0x6c>
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	e7fe      	b.n	800261a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <xQueueGenericCreateStatic+0x78>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <xQueueGenericCreateStatic+0x7c>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <xQueueGenericCreateStatic+0x7e>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <xQueueGenericCreateStatic+0x96>
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	e7fe      	b.n	8002644 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002646:	2348      	movs	r3, #72	; 0x48
 8002648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b48      	cmp	r3, #72	; 0x48
 800264e:	d009      	beq.n	8002664 <xQueueGenericCreateStatic+0xb4>
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	e7fe      	b.n	8002662 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002664:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002678:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f805 	bl	8002696 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800268e:	4618      	mov	r0, r3
 8002690:	3730      	adds	r7, #48	; 0x30
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e002      	b.n	80026b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026c4:	2101      	movs	r1, #1
 80026c6:	69b8      	ldr	r0, [r7, #24]
 80026c8:	f7ff ff0a 	bl	80024e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	; 0x38
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <xQueueGenericSend+0x30>
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	e7fe      	b.n	8002702 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <xQueueGenericSend+0x3e>
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <xQueueGenericSend+0x42>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueGenericSend+0x44>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <xQueueGenericSend+0x5c>
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	e7fe      	b.n	800272e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d103      	bne.n	800273e <xQueueGenericSend+0x6a>
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <xQueueGenericSend+0x6e>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <xQueueGenericSend+0x70>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <xQueueGenericSend+0x88>
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	e7fe      	b.n	800275a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800275c:	f001 f988 	bl	8003a70 <xTaskGetSchedulerState>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <xQueueGenericSend+0x98>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <xQueueGenericSend+0x9c>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <xQueueGenericSend+0x9e>
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <xQueueGenericSend+0xb6>
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	e7fe      	b.n	8002788 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800278a:	f001 fecf 	bl	800452c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	429a      	cmp	r2, r3
 8002798:	d302      	bcc.n	80027a0 <xQueueGenericSend+0xcc>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d129      	bne.n	80027f4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027a6:	f000 f9ff 	bl	8002ba8 <prvCopyDataToQueue>
 80027aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	3324      	adds	r3, #36	; 0x24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 ffa3 	bl	8003704 <xTaskRemoveFromEventList>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027c4:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <xQueueGenericSend+0x1f0>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	e00a      	b.n	80027ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027dc:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <xQueueGenericSend+0x1f0>)
 80027de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027ec:	f001 fecc 	bl	8004588 <vPortExitCritical>
				return pdPASS;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e063      	b.n	80028bc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027fa:	f001 fec5 	bl	8004588 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	e05c      	b.n	80028bc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4618      	mov	r0, r3
 800280e:	f000 ffdb 	bl	80037c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002812:	2301      	movs	r3, #1
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002816:	f001 feb7 	bl	8004588 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800281a:	f000 fd59 	bl	80032d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800281e:	f001 fe85 	bl	800452c <vPortEnterCritical>
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002828:	b25b      	sxtb	r3, r3
 800282a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282e:	d103      	bne.n	8002838 <xQueueGenericSend+0x164>
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800283e:	b25b      	sxtb	r3, r3
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d103      	bne.n	800284e <xQueueGenericSend+0x17a>
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800284e:	f001 fe9b 	bl	8004588 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002852:	1d3a      	adds	r2, r7, #4
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f000 ffca 	bl	80037f4 <xTaskCheckForTimeOut>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d124      	bne.n	80028b0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002868:	f000 fa96 	bl	8002d98 <prvIsQueueFull>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d018      	beq.n	80028a4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	3310      	adds	r3, #16
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fef4 	bl	8003668 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002882:	f000 fa21 	bl	8002cc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002886:	f000 fd31 	bl	80032ec <xTaskResumeAll>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f47f af7c 	bne.w	800278a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <xQueueGenericSend+0x1f0>)
 8002894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	e772      	b.n	800278a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a6:	f000 fa0f 	bl	8002cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028aa:	f000 fd1f 	bl	80032ec <xTaskResumeAll>
 80028ae:	e76c      	b.n	800278a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028b2:	f000 fa09 	bl	8002cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028b6:	f000 fd19 	bl	80032ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3738      	adds	r7, #56	; 0x38
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	; 0x38
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <xQueueGenericSendFromISR+0x2c>
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e7fe      	b.n	80028f2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <xQueueGenericSendFromISR+0x3a>
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <xQueueGenericSendFromISR+0x3e>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <xQueueGenericSendFromISR+0x40>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <xQueueGenericSendFromISR+0x58>
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	623b      	str	r3, [r7, #32]
 800291e:	e7fe      	b.n	800291e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d103      	bne.n	800292e <xQueueGenericSendFromISR+0x66>
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <xQueueGenericSendFromISR+0x6a>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <xQueueGenericSendFromISR+0x6c>
 8002932:	2300      	movs	r3, #0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <xQueueGenericSendFromISR+0x84>
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e7fe      	b.n	800294a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800294c:	f001 feca 	bl	80046e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002950:	f3ef 8211 	mrs	r2, BASEPRI
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	61ba      	str	r2, [r7, #24]
 8002966:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002968:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	429a      	cmp	r2, r3
 8002976:	d302      	bcc.n	800297e <xQueueGenericSendFromISR+0xb6>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d12c      	bne.n	80029d8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800298e:	f000 f90b 	bl	8002ba8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002992:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d112      	bne.n	80029c2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d016      	beq.n	80029d2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	3324      	adds	r3, #36	; 0x24
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 feab 	bl	8003704 <xTaskRemoveFromEventList>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00e      	beq.n	80029d2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e007      	b.n	80029d2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029c6:	3301      	adds	r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	b25a      	sxtb	r2, r3
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029d2:	2301      	movs	r3, #1
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80029d6:	e001      	b.n	80029dc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3738      	adds	r7, #56	; 0x38
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <xQueueReceive+0x2e>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	e7fe      	b.n	8002a1c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <xQueueReceive+0x3c>
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <xQueueReceive+0x40>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <xQueueReceive+0x42>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <xQueueReceive+0x5a>
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	e7fe      	b.n	8002a48 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a4a:	f001 f811 	bl	8003a70 <xTaskGetSchedulerState>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <xQueueReceive+0x6a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <xQueueReceive+0x6e>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <xQueueReceive+0x70>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <xQueueReceive+0x88>
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	e7fe      	b.n	8002a76 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a78:	f001 fd58 	bl	800452c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01f      	beq.n	8002ac8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8c:	f000 f8f6 	bl	8002c7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1e5a      	subs	r2, r3, #1
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00f      	beq.n	8002ac0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	3310      	adds	r3, #16
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fe2d 	bl	8003704 <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <xQueueReceive+0x1b4>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ac0:	f001 fd62 	bl	8004588 <vPortExitCritical>
				return pdPASS;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e069      	b.n	8002b9c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ace:	f001 fd5b 	bl	8004588 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e062      	b.n	8002b9c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fe71 	bl	80037c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aea:	f001 fd4d 	bl	8004588 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aee:	f000 fbef 	bl	80032d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002af2:	f001 fd1b 	bl	800452c <vPortEnterCritical>
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002afc:	b25b      	sxtb	r3, r3
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d103      	bne.n	8002b0c <xQueueReceive+0x11c>
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d103      	bne.n	8002b22 <xQueueReceive+0x132>
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b22:	f001 fd31 	bl	8004588 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b26:	1d3a      	adds	r2, r7, #4
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fe60 	bl	80037f4 <xTaskCheckForTimeOut>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d123      	bne.n	8002b82 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3c:	f000 f916 	bl	8002d6c <prvIsQueueEmpty>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d017      	beq.n	8002b76 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	3324      	adds	r3, #36	; 0x24
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fd8a 	bl	8003668 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b56:	f000 f8b7 	bl	8002cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b5a:	f000 fbc7 	bl	80032ec <xTaskResumeAll>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d189      	bne.n	8002a78 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <xQueueReceive+0x1b4>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	e780      	b.n	8002a78 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b78:	f000 f8a6 	bl	8002cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b7c:	f000 fbb6 	bl	80032ec <xTaskResumeAll>
 8002b80:	e77a      	b.n	8002a78 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b84:	f000 f8a0 	bl	8002cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b88:	f000 fbb0 	bl	80032ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8e:	f000 f8ed 	bl	8002d6c <prvIsQueueEmpty>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f43f af6f 	beq.w	8002a78 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3730      	adds	r7, #48	; 0x30
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d14d      	bne.n	8002c6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 ff6a 	bl	8003aac <xTaskPriorityDisinherit>
 8002bd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	e043      	b.n	8002c6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d119      	bne.n	8002c1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6858      	ldr	r0, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	f001 ffae 	bl	8004b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	441a      	add	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d32b      	bcc.n	8002c6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	e026      	b.n	8002c6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68d8      	ldr	r0, [r3, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	461a      	mov	r2, r3
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	f001 ff94 	bl	8004b54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	425b      	negs	r3, r3
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	425b      	negs	r3, r3
 8002c52:	441a      	add	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d105      	bne.n	8002c6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c72:	697b      	ldr	r3, [r7, #20]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d018      	beq.n	8002cc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	441a      	add	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d303      	bcc.n	8002cb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68d9      	ldr	r1, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	f001 ff4a 	bl	8004b54 <memcpy>
	}
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cd0:	f001 fc2c 	bl	800452c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cdc:	e011      	b.n	8002d02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3324      	adds	r3, #36	; 0x24
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fd0a 	bl	8003704 <xTaskRemoveFromEventList>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cf6:	f000 fddd 	bl	80038b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	dce9      	bgt.n	8002cde <prvUnlockQueue+0x16>
 8002d0a:	e000      	b.n	8002d0e <prvUnlockQueue+0x46>
					break;
 8002d0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	22ff      	movs	r2, #255	; 0xff
 8002d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d16:	f001 fc37 	bl	8004588 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d1a:	f001 fc07 	bl	800452c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d26:	e011      	b.n	8002d4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3310      	adds	r3, #16
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fce5 	bl	8003704 <xTaskRemoveFromEventList>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d40:	f000 fdb8 	bl	80038b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	dce9      	bgt.n	8002d28 <prvUnlockQueue+0x60>
 8002d54:	e000      	b.n	8002d58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	22ff      	movs	r2, #255	; 0xff
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d60:	f001 fc12 	bl	8004588 <vPortExitCritical>
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d74:	f001 fbda 	bl	800452c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e001      	b.n	8002d8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d8a:	f001 fbfd 	bl	8004588 <vPortExitCritical>

	return xReturn;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002da0:	f001 fbc4 	bl	800452c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d102      	bne.n	8002db6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002db0:	2301      	movs	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e001      	b.n	8002dba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dba:	f001 fbe5 	bl	8004588 <vPortExitCritical>

	return xReturn;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e014      	b.n	8002e02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <vQueueAddToRegistry+0x4c>)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002de4:	490b      	ldr	r1, [pc, #44]	; (8002e14 <vQueueAddToRegistry+0x4c>)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <vQueueAddToRegistry+0x4c>)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002dfa:	e005      	b.n	8002e08 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b07      	cmp	r3, #7
 8002e06:	d9e7      	bls.n	8002dd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	20004564 	.word	0x20004564

08002e18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e28:	f001 fb80 	bl	800452c <vPortEnterCritical>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e32:	b25b      	sxtb	r3, r3
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d103      	bne.n	8002e42 <vQueueWaitForMessageRestricted+0x2a>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d103      	bne.n	8002e58 <vQueueWaitForMessageRestricted+0x40>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e58:	f001 fb96 	bl	8004588 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fc1f 	bl	80036b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e72:	6978      	ldr	r0, [r7, #20]
 8002e74:	f7ff ff28 	bl	8002cc8 <prvUnlockQueue>
	}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	; 0x38
 8002e84:	af04      	add	r7, sp, #16
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <xTaskCreateStatic+0x28>
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	e7fe      	b.n	8002ea6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <xTaskCreateStatic+0x42>
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	e7fe      	b.n	8002ec0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ec2:	2354      	movs	r3, #84	; 0x54
 8002ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b54      	cmp	r3, #84	; 0x54
 8002eca:	d009      	beq.n	8002ee0 <xTaskCreateStatic+0x60>
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e7fe      	b.n	8002ede <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ee0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01e      	beq.n	8002f26 <xTaskCreateStatic+0xa6>
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01b      	beq.n	8002f26 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f00:	2300      	movs	r3, #0
 8002f02:	9303      	str	r3, [sp, #12]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f850 	bl	8002fbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f20:	f000 f8d4 	bl	80030cc <prvAddNewTaskToReadyList>
 8002f24:	e001      	b.n	8002f2a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f2a:	697b      	ldr	r3, [r7, #20]
	}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fc09 	bl	8004760 <pvPortMalloc>
 8002f4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f56:	2054      	movs	r0, #84	; 0x54
 8002f58:	f001 fc02 	bl	8004760 <pvPortMalloc>
 8002f5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
 8002f6a:	e005      	b.n	8002f78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f6c:	6978      	ldr	r0, [r7, #20]
 8002f6e:	f001 fcb9 	bl	80048e4 <vPortFree>
 8002f72:	e001      	b.n	8002f78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d017      	beq.n	8002fae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9303      	str	r3, [sp, #12]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	9302      	str	r3, [sp, #8]
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f80e 	bl	8002fbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fa2:	69f8      	ldr	r0, [r7, #28]
 8002fa4:	f000 f892 	bl	80030cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e002      	b.n	8002fb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b088      	sub	sp, #32
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f023 0307 	bic.w	r3, r3, #7
 8002fe4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <prvInitialiseNewTask+0x46>
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e7fe      	b.n	8003002 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01f      	beq.n	800304a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e012      	b.n	8003036 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	7819      	ldrb	r1, [r3, #0]
 8003018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	3334      	adds	r3, #52	; 0x34
 8003020:	460a      	mov	r2, r1
 8003022:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3301      	adds	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d9e9      	bls.n	8003010 <prvInitialiseNewTask+0x52>
 800303c:	e000      	b.n	8003040 <prvInitialiseNewTask+0x82>
			{
				break;
 800303e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003048:	e003      	b.n	8003052 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	2b06      	cmp	r3, #6
 8003056:	d901      	bls.n	800305c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003058:	2306      	movs	r3, #6
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	3304      	adds	r3, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f99f 	bl	80023b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	3318      	adds	r3, #24
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f99a 	bl	80023b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	f1c3 0207 	rsb	r2, r3, #7
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	2200      	movs	r2, #0
 800309c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	69b8      	ldr	r0, [r7, #24]
 80030ac:	f001 f916 	bl	80042dc <pxPortInitialiseStack>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030c2:	bf00      	nop
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030d4:	f001 fa2a 	bl	800452c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <prvAddNewTaskToReadyList+0xb8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a29      	ldr	r2, [pc, #164]	; (8003184 <prvAddNewTaskToReadyList+0xb8>)
 80030e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030e2:	4b29      	ldr	r3, [pc, #164]	; (8003188 <prvAddNewTaskToReadyList+0xbc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030ea:	4a27      	ldr	r2, [pc, #156]	; (8003188 <prvAddNewTaskToReadyList+0xbc>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <prvAddNewTaskToReadyList+0xb8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d110      	bne.n	800311a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030f8:	f000 fc00 	bl	80038fc <prvInitialiseTaskLists>
 80030fc:	e00d      	b.n	800311a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <prvAddNewTaskToReadyList+0xc0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <prvAddNewTaskToReadyList+0xbc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	429a      	cmp	r2, r3
 8003112:	d802      	bhi.n	800311a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003114:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <prvAddNewTaskToReadyList+0xbc>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <prvAddNewTaskToReadyList+0xc4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <prvAddNewTaskToReadyList+0xc4>)
 8003122:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	2201      	movs	r2, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <prvAddNewTaskToReadyList+0xc8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4313      	orrs	r3, r2
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <prvAddNewTaskToReadyList+0xc8>)
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4a15      	ldr	r2, [pc, #84]	; (8003198 <prvAddNewTaskToReadyList+0xcc>)
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7ff f93f 	bl	80023d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003152:	f001 fa19 	bl	8004588 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <prvAddNewTaskToReadyList+0xc0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00e      	beq.n	800317c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <prvAddNewTaskToReadyList+0xbc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <prvAddNewTaskToReadyList+0xd0>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200007d4 	.word	0x200007d4
 8003188:	200006d4 	.word	0x200006d4
 800318c:	200007e0 	.word	0x200007e0
 8003190:	200007f0 	.word	0x200007f0
 8003194:	200007dc 	.word	0x200007dc
 8003198:	200006d8 	.word	0x200006d8
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <vTaskDelay+0x60>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <vTaskDelay+0x2e>
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	e7fe      	b.n	80031cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80031ce:	f000 f87f 	bl	80032d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fced 	bl	8003bb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031da:	f000 f887 	bl	80032ec <xTaskResumeAll>
 80031de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <vTaskDelay+0x64>)
 80031e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200007fc 	.word	0x200007fc
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003216:	463a      	mov	r2, r7
 8003218:	1d39      	adds	r1, r7, #4
 800321a:	f107 0308 	add.w	r3, r7, #8
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f95e 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	9202      	str	r2, [sp, #8]
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2300      	movs	r3, #0
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	460a      	mov	r2, r1
 8003236:	4920      	ldr	r1, [pc, #128]	; (80032b8 <vTaskStartScheduler+0xb0>)
 8003238:	4820      	ldr	r0, [pc, #128]	; (80032bc <vTaskStartScheduler+0xb4>)
 800323a:	f7ff fe21 	bl	8002e80 <xTaskCreateStatic>
 800323e:	4602      	mov	r2, r0
 8003240:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <vTaskStartScheduler+0xb8>)
 8003242:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <vTaskStartScheduler+0xb8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800324c:	2301      	movs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e001      	b.n	8003256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800325c:	f000 fd10 	bl	8003c80 <xTimerCreateTimerTask>
 8003260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d115      	bne.n	8003294 <vTaskStartScheduler+0x8c>
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <vTaskStartScheduler+0xbc>)
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <vTaskStartScheduler+0xc0>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <vTaskStartScheduler+0xc4>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800328e:	f001 f8af 	bl	80043f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003292:	e00d      	b.n	80032b0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d109      	bne.n	80032b0 <vTaskStartScheduler+0xa8>
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e7fe      	b.n	80032ae <vTaskStartScheduler+0xa6>
}
 80032b0:	bf00      	nop
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	08004c1c 	.word	0x08004c1c
 80032bc:	080038cd 	.word	0x080038cd
 80032c0:	200007f8 	.word	0x200007f8
 80032c4:	200007f4 	.word	0x200007f4
 80032c8:	200007e0 	.word	0x200007e0
 80032cc:	200007d8 	.word	0x200007d8

080032d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <vTaskSuspendAll+0x18>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <vTaskSuspendAll+0x18>)
 80032dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	200007fc 	.word	0x200007fc

080032ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <xTaskResumeAll+0x114>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <xTaskResumeAll+0x2a>
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	e7fe      	b.n	8003314 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003316:	f001 f909 	bl	800452c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800331a:	4b39      	ldr	r3, [pc, #228]	; (8003400 <xTaskResumeAll+0x114>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3b01      	subs	r3, #1
 8003320:	4a37      	ldr	r2, [pc, #220]	; (8003400 <xTaskResumeAll+0x114>)
 8003322:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <xTaskResumeAll+0x114>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d161      	bne.n	80033f0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <xTaskResumeAll+0x118>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05d      	beq.n	80033f0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003334:	e02e      	b.n	8003394 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <xTaskResumeAll+0x11c>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3318      	adds	r3, #24
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f8a1 	bl	800248a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3304      	adds	r3, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff f89c 	bl	800248a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	2201      	movs	r2, #1
 8003358:	409a      	lsls	r2, r3
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <xTaskResumeAll+0x120>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	4a2a      	ldr	r2, [pc, #168]	; (800340c <xTaskResumeAll+0x120>)
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4a27      	ldr	r2, [pc, #156]	; (8003410 <xTaskResumeAll+0x124>)
 8003372:	441a      	add	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7ff f828 	bl	80023d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4b23      	ldr	r3, [pc, #140]	; (8003414 <xTaskResumeAll+0x128>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <xTaskResumeAll+0x12c>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <xTaskResumeAll+0x11c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1cc      	bne.n	8003336 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033a2:	f000 fb45 	bl	8003a30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <xTaskResumeAll+0x130>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d010      	beq.n	80033d4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033b2:	f000 f847 	bl	8003444 <xTaskIncrementTick>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <xTaskResumeAll+0x12c>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f1      	bne.n	80033b2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <xTaskResumeAll+0x130>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <xTaskResumeAll+0x12c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033dc:	2301      	movs	r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <xTaskResumeAll+0x134>)
 80033e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033f0:	f001 f8ca 	bl	8004588 <vPortExitCritical>

	return xAlreadyYielded;
 80033f4:	68bb      	ldr	r3, [r7, #8]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200007fc 	.word	0x200007fc
 8003404:	200007d4 	.word	0x200007d4
 8003408:	20000794 	.word	0x20000794
 800340c:	200007dc 	.word	0x200007dc
 8003410:	200006d8 	.word	0x200006d8
 8003414:	200006d4 	.word	0x200006d4
 8003418:	200007e8 	.word	0x200007e8
 800341c:	200007e4 	.word	0x200007e4
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <xTaskGetTickCount+0x1c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003430:	687b      	ldr	r3, [r7, #4]
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	200007d8 	.word	0x200007d8

08003444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344e:	4b4e      	ldr	r3, [pc, #312]	; (8003588 <xTaskIncrementTick+0x144>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8087 	bne.w	8003566 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003458:	4b4c      	ldr	r3, [pc, #304]	; (800358c <xTaskIncrementTick+0x148>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003460:	4a4a      	ldr	r2, [pc, #296]	; (800358c <xTaskIncrementTick+0x148>)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11f      	bne.n	80034ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800346c:	4b48      	ldr	r3, [pc, #288]	; (8003590 <xTaskIncrementTick+0x14c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <xTaskIncrementTick+0x46>
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	e7fe      	b.n	8003488 <xTaskIncrementTick+0x44>
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <xTaskIncrementTick+0x14c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	4b40      	ldr	r3, [pc, #256]	; (8003594 <xTaskIncrementTick+0x150>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3e      	ldr	r2, [pc, #248]	; (8003590 <xTaskIncrementTick+0x14c>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <xTaskIncrementTick+0x150>)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <xTaskIncrementTick+0x154>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	4a3c      	ldr	r2, [pc, #240]	; (8003598 <xTaskIncrementTick+0x154>)
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	f000 fac2 	bl	8003a30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034ac:	4b3b      	ldr	r3, [pc, #236]	; (800359c <xTaskIncrementTick+0x158>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d348      	bcc.n	8003548 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <xTaskIncrementTick+0x14c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c0:	4b36      	ldr	r3, [pc, #216]	; (800359c <xTaskIncrementTick+0x158>)
 80034c2:	f04f 32ff 	mov.w	r2, #4294967295
 80034c6:	601a      	str	r2, [r3, #0]
					break;
 80034c8:	e03e      	b.n	8003548 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ca:	4b31      	ldr	r3, [pc, #196]	; (8003590 <xTaskIncrementTick+0x14c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d203      	bcs.n	80034ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034e2:	4a2e      	ldr	r2, [pc, #184]	; (800359c <xTaskIncrementTick+0x158>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034e8:	e02e      	b.n	8003548 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe ffcb 	bl	800248a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	3318      	adds	r3, #24
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe ffc2 	bl	800248a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	2201      	movs	r2, #1
 800350c:	409a      	lsls	r2, r3
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <xTaskIncrementTick+0x15c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <xTaskIncrementTick+0x15c>)
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <xTaskIncrementTick+0x160>)
 8003526:	441a      	add	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f7fe ff4e 	bl	80023d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <xTaskIncrementTick+0x164>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	429a      	cmp	r2, r3
 8003540:	d3b9      	bcc.n	80034b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003546:	e7b6      	b.n	80034b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003548:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <xTaskIncrementTick+0x164>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354e:	4915      	ldr	r1, [pc, #84]	; (80035a4 <xTaskIncrementTick+0x160>)
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d907      	bls.n	8003570 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e004      	b.n	8003570 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <xTaskIncrementTick+0x168>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <xTaskIncrementTick+0x168>)
 800356e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <xTaskIncrementTick+0x16c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800357c:	697b      	ldr	r3, [r7, #20]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200007fc 	.word	0x200007fc
 800358c:	200007d8 	.word	0x200007d8
 8003590:	2000078c 	.word	0x2000078c
 8003594:	20000790 	.word	0x20000790
 8003598:	200007ec 	.word	0x200007ec
 800359c:	200007f4 	.word	0x200007f4
 80035a0:	200007dc 	.word	0x200007dc
 80035a4:	200006d8 	.word	0x200006d8
 80035a8:	200006d4 	.word	0x200006d4
 80035ac:	200007e4 	.word	0x200007e4
 80035b0:	200007e8 	.word	0x200007e8

080035b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035ba:	4b26      	ldr	r3, [pc, #152]	; (8003654 <vTaskSwitchContext+0xa0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035c2:	4b25      	ldr	r3, [pc, #148]	; (8003658 <vTaskSwitchContext+0xa4>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035c8:	e03e      	b.n	8003648 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80035ca:	4b23      	ldr	r3, [pc, #140]	; (8003658 <vTaskSwitchContext+0xa4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d0:	4b22      	ldr	r3, [pc, #136]	; (800365c <vTaskSwitchContext+0xa8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	f1c3 031f 	rsb	r3, r3, #31
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	491e      	ldr	r1, [pc, #120]	; (8003660 <vTaskSwitchContext+0xac>)
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <vTaskSwitchContext+0x5a>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	e7fe      	b.n	800360c <vTaskSwitchContext+0x58>
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <vTaskSwitchContext+0xac>)
 800361a:	4413      	add	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3308      	adds	r3, #8
 8003630:	429a      	cmp	r2, r3
 8003632:	d104      	bne.n	800363e <vTaskSwitchContext+0x8a>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a07      	ldr	r2, [pc, #28]	; (8003664 <vTaskSwitchContext+0xb0>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	200007fc 	.word	0x200007fc
 8003658:	200007e8 	.word	0x200007e8
 800365c:	200007dc 	.word	0x200007dc
 8003660:	200006d8 	.word	0x200006d8
 8003664:	200006d4 	.word	0x200006d4

08003668 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <vTaskPlaceOnEventList+0x24>
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e7fe      	b.n	800368a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <vTaskPlaceOnEventList+0x44>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3318      	adds	r3, #24
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fe febf 	bl	8002418 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800369a:	2101      	movs	r1, #1
 800369c:	6838      	ldr	r0, [r7, #0]
 800369e:	f000 fa89 	bl	8003bb4 <prvAddCurrentTaskToDelayedList>
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200006d4 	.word	0x200006d4

080036b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <vTaskPlaceOnEventListRestricted+0x26>
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e7fe      	b.n	80036d4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <vTaskPlaceOnEventListRestricted+0x50>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3318      	adds	r3, #24
 80036dc:	4619      	mov	r1, r3
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7fe fe76 	bl	80023d0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	68b8      	ldr	r0, [r7, #8]
 80036f4:	f000 fa5e 	bl	8003bb4 <prvAddCurrentTaskToDelayedList>
	}
 80036f8:	bf00      	nop
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200006d4 	.word	0x200006d4

08003704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <xTaskRemoveFromEventList+0x2a>
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e7fe      	b.n	800372c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	3318      	adds	r3, #24
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fea9 	bl	800248a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <xTaskRemoveFromEventList+0xac>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11c      	bne.n	800377a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3304      	adds	r3, #4
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fea0 	bl	800248a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <xTaskRemoveFromEventList+0xb0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <xTaskRemoveFromEventList+0xb0>)
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <xTaskRemoveFromEventList+0xb4>)
 800376a:	441a      	add	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7fe fe2c 	bl	80023d0 <vListInsertEnd>
 8003778:	e005      	b.n	8003786 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	3318      	adds	r3, #24
 800377e:	4619      	mov	r1, r3
 8003780:	480e      	ldr	r0, [pc, #56]	; (80037bc <xTaskRemoveFromEventList+0xb8>)
 8003782:	f7fe fe25 	bl	80023d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <xTaskRemoveFromEventList+0xbc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	429a      	cmp	r2, r3
 8003792:	d905      	bls.n	80037a0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <xTaskRemoveFromEventList+0xc0>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e001      	b.n	80037a4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037a4:	697b      	ldr	r3, [r7, #20]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200007fc 	.word	0x200007fc
 80037b4:	200007dc 	.word	0x200007dc
 80037b8:	200006d8 	.word	0x200006d8
 80037bc:	20000794 	.word	0x20000794
 80037c0:	200006d4 	.word	0x200006d4
 80037c4:	200007e8 	.word	0x200007e8

080037c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <vTaskInternalSetTimeOutState+0x24>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <vTaskInternalSetTimeOutState+0x28>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	200007ec 	.word	0x200007ec
 80037f0:	200007d8 	.word	0x200007d8

080037f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <xTaskCheckForTimeOut+0x24>
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e7fe      	b.n	8003816 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <xTaskCheckForTimeOut+0x3e>
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e7fe      	b.n	8003830 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003832:	f000 fe7b 	bl	800452c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <xTaskCheckForTimeOut+0xb8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d102      	bne.n	8003856 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	e023      	b.n	800389e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <xTaskCheckForTimeOut+0xbc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d007      	beq.n	8003872 <xTaskCheckForTimeOut+0x7e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e015      	b.n	800389e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d20b      	bcs.n	8003894 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff9d 	bl	80037c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	e004      	b.n	800389e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800389a:	2301      	movs	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800389e:	f000 fe73 	bl	8004588 <vPortExitCritical>

	return xReturn;
 80038a2:	69fb      	ldr	r3, [r7, #28]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200007d8 	.word	0x200007d8
 80038b0:	200007ec 	.word	0x200007ec

080038b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <vTaskMissedYield+0x14>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	200007e8 	.word	0x200007e8

080038cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038d4:	f000 f852 	bl	800397c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <prvIdleTask+0x28>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d9f9      	bls.n	80038d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <prvIdleTask+0x2c>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038f0:	e7f0      	b.n	80038d4 <prvIdleTask+0x8>
 80038f2:	bf00      	nop
 80038f4:	200006d8 	.word	0x200006d8
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	e00c      	b.n	8003922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <prvInitialiseTaskLists+0x60>)
 8003914:	4413      	add	r3, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fd2d 	bl	8002376 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3301      	adds	r3, #1
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b06      	cmp	r3, #6
 8003926:	d9ef      	bls.n	8003908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003928:	480d      	ldr	r0, [pc, #52]	; (8003960 <prvInitialiseTaskLists+0x64>)
 800392a:	f7fe fd24 	bl	8002376 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800392e:	480d      	ldr	r0, [pc, #52]	; (8003964 <prvInitialiseTaskLists+0x68>)
 8003930:	f7fe fd21 	bl	8002376 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <prvInitialiseTaskLists+0x6c>)
 8003936:	f7fe fd1e 	bl	8002376 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800393a:	480c      	ldr	r0, [pc, #48]	; (800396c <prvInitialiseTaskLists+0x70>)
 800393c:	f7fe fd1b 	bl	8002376 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <prvInitialiseTaskLists+0x74>)
 8003942:	f7fe fd18 	bl	8002376 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <prvInitialiseTaskLists+0x78>)
 8003948:	4a05      	ldr	r2, [pc, #20]	; (8003960 <prvInitialiseTaskLists+0x64>)
 800394a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <prvInitialiseTaskLists+0x7c>)
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <prvInitialiseTaskLists+0x68>)
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200006d8 	.word	0x200006d8
 8003960:	20000764 	.word	0x20000764
 8003964:	20000778 	.word	0x20000778
 8003968:	20000794 	.word	0x20000794
 800396c:	200007a8 	.word	0x200007a8
 8003970:	200007c0 	.word	0x200007c0
 8003974:	2000078c 	.word	0x2000078c
 8003978:	20000790 	.word	0x20000790

0800397c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003982:	e019      	b.n	80039b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003984:	f000 fdd2 	bl	800452c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <prvCheckTasksWaitingTermination+0x4c>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fd78 	bl	800248a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <prvCheckTasksWaitingTermination+0x50>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <prvCheckTasksWaitingTermination+0x50>)
 80039a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <prvCheckTasksWaitingTermination+0x54>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <prvCheckTasksWaitingTermination+0x54>)
 80039ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039ae:	f000 fdeb 	bl	8004588 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f80e 	bl	80039d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <prvCheckTasksWaitingTermination+0x54>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e1      	bne.n	8003984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200007a8 	.word	0x200007a8
 80039cc:	200007d4 	.word	0x200007d4
 80039d0:	200007bc 	.word	0x200007bc

080039d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 ff7a 	bl	80048e4 <vPortFree>
				vPortFree( pxTCB );
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 ff77 	bl	80048e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039f6:	e017      	b.n	8003a28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d103      	bne.n	8003a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 ff6e 	bl	80048e4 <vPortFree>
	}
 8003a08:	e00e      	b.n	8003a28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d009      	beq.n	8003a28 <prvDeleteTCB+0x54>
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e7fe      	b.n	8003a26 <prvDeleteTCB+0x52>
	}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <prvResetNextTaskUnblockTime+0x38>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <prvResetNextTaskUnblockTime+0x3c>)
 8003a42:	f04f 32ff 	mov.w	r2, #4294967295
 8003a46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a48:	e008      	b.n	8003a5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <prvResetNextTaskUnblockTime+0x38>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <prvResetNextTaskUnblockTime+0x3c>)
 8003a5a:	6013      	str	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	2000078c 	.word	0x2000078c
 8003a6c:	200007f4 	.word	0x200007f4

08003a70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <xTaskGetSchedulerState+0x34>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	e008      	b.n	8003a96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <xTaskGetSchedulerState+0x38>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	e001      	b.n	8003a96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a96:	687b      	ldr	r3, [r7, #4]
	}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	200007e0 	.word	0x200007e0
 8003aa8:	200007fc 	.word	0x200007fc

08003aac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d06c      	beq.n	8003b9c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <xTaskPriorityDisinherit+0xfc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d009      	beq.n	8003ae0 <xTaskPriorityDisinherit+0x34>
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e7fe      	b.n	8003ade <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <xTaskPriorityDisinherit+0x50>
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	e7fe      	b.n	8003afa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	1e5a      	subs	r2, r3, #1
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d044      	beq.n	8003b9c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d140      	bne.n	8003b9c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fcb3 	bl	800248a <uxListRemove>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d115      	bne.n	8003b56 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	491f      	ldr	r1, [pc, #124]	; (8003bac <xTaskPriorityDisinherit+0x100>)
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <xTaskPriorityDisinherit+0xaa>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	2201      	movs	r2, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <xTaskPriorityDisinherit+0x104>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4013      	ands	r3, r2
 8003b52:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <xTaskPriorityDisinherit+0x104>)
 8003b54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f1c3 0207 	rsb	r2, r3, #7
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	2201      	movs	r2, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <xTaskPriorityDisinherit+0x104>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <xTaskPriorityDisinherit+0x104>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <xTaskPriorityDisinherit+0x100>)
 8003b8a:	441a      	add	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe fc1c 	bl	80023d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b9c:	697b      	ldr	r3, [r7, #20]
	}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200006d4 	.word	0x200006d4
 8003bac:	200006d8 	.word	0x200006d8
 8003bb0:	200007dc 	.word	0x200007dc

08003bb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bbe:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fc5d 	bl	800248a <uxListRemove>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2201      	movs	r2, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43da      	mvns	r2, r3
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4013      	ands	r3, r2
 8003bea:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d10a      	bne.n	8003c0c <prvAddCurrentTaskToDelayedList+0x58>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	481a      	ldr	r0, [pc, #104]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c06:	f7fe fbe3 	bl	80023d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c0a:	e026      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d209      	bcs.n	8003c38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7fe fbf1 	bl	8002418 <vListInsert>
}
 8003c36:	e010      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7fe fbe7 	bl	8002418 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d202      	bcs.n	8003c5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c54:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6013      	str	r3, [r2, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200007d8 	.word	0x200007d8
 8003c68:	200006d4 	.word	0x200006d4
 8003c6c:	200007dc 	.word	0x200007dc
 8003c70:	200007c0 	.word	0x200007c0
 8003c74:	20000790 	.word	0x20000790
 8003c78:	2000078c 	.word	0x2000078c
 8003c7c:	200007f4 	.word	0x200007f4

08003c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c8a:	f000 fae7 	bl	800425c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <xTimerCreateTimerTask+0x80>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d021      	beq.n	8003cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c9e:	1d3a      	adds	r2, r7, #4
 8003ca0:	f107 0108 	add.w	r1, r7, #8
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc33 	bl	8000514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	9202      	str	r2, [sp, #8]
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	2302      	movs	r3, #2
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	4910      	ldr	r1, [pc, #64]	; (8003d04 <xTimerCreateTimerTask+0x84>)
 8003cc2:	4811      	ldr	r0, [pc, #68]	; (8003d08 <xTimerCreateTimerTask+0x88>)
 8003cc4:	f7ff f8dc 	bl	8002e80 <xTaskCreateStatic>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <xTimerCreateTimerTask+0x8c>)
 8003ccc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <xTimerCreateTimerTask+0x8c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <xTimerCreateTimerTask+0x74>
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e7fe      	b.n	8003cf2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003cf4:	697b      	ldr	r3, [r7, #20]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000830 	.word	0x20000830
 8003d04:	08004c24 	.word	0x08004c24
 8003d08:	08003e41 	.word	0x08003e41
 8003d0c:	20000834 	.word	0x20000834

08003d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <xTimerGenericCommand+0x2c>
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	e7fe      	b.n	8003d3a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <xTimerGenericCommand+0x94>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d02a      	beq.n	8003d9a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	dc18      	bgt.n	8003d88 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d56:	f7ff fe8b 	bl	8003a70 <xTaskGetSchedulerState>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d109      	bne.n	8003d74 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <xTimerGenericCommand+0x94>)
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	f107 0114 	add.w	r1, r7, #20
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6c:	f7fe fcb2 	bl	80026d4 <xQueueGenericSend>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24
 8003d72:	e012      	b.n	8003d9a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <xTimerGenericCommand+0x94>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	f107 0114 	add.w	r1, r7, #20
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f7fe fca8 	bl	80026d4 <xQueueGenericSend>
 8003d84:	6278      	str	r0, [r7, #36]	; 0x24
 8003d86:	e008      	b.n	8003d9a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <xTimerGenericCommand+0x94>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	f107 0114 	add.w	r1, r7, #20
 8003d90:	2300      	movs	r3, #0
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	f7fe fd98 	bl	80028c8 <xQueueGenericSendFromISR>
 8003d98:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3728      	adds	r7, #40	; 0x28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000830 	.word	0x20000830

08003da8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <prvProcessExpiredTimer+0x94>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fb62 	bl	800248a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d021      	beq.n	8003e18 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	18d1      	adds	r1, r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	6978      	ldr	r0, [r7, #20]
 8003de2:	f000 f8d1 	bl	8003f88 <prvInsertTimerInActiveList>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01e      	beq.n	8003e2a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2300      	movs	r3, #0
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	2100      	movs	r1, #0
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff8a 	bl	8003d10 <xTimerGenericCommand>
 8003dfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d112      	bne.n	8003e2a <prvProcessExpiredTimer+0x82>
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e7fe      	b.n	8003e16 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	4798      	blx	r3
}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000828 	.word	0x20000828

08003e40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f857 	bl	8003f00 <prvGetNextExpireTime>
 8003e52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f803 	bl	8003e64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e5e:	f000 f8d5 	bl	800400c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e62:	e7f1      	b.n	8003e48 <prvTimerTask+0x8>

08003e64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e6e:	f7ff fa2f 	bl	80032d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f866 	bl	8003f48 <prvSampleTimeNow>
 8003e7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d130      	bne.n	8003ee6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <prvProcessTimerOrBlockTask+0x3c>
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d806      	bhi.n	8003ea0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e92:	f7ff fa2b 	bl	80032ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff85 	bl	8003da8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e9e:	e024      	b.n	8003eea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <prvProcessTimerOrBlockTask+0x90>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <prvProcessTimerOrBlockTask+0x50>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <prvProcessTimerOrBlockTask+0x52>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvProcessTimerOrBlockTask+0x94>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fe ffa7 	bl	8002e18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003eca:	f7ff fa0f 	bl	80032ec <xTaskResumeAll>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <prvProcessTimerOrBlockTask+0x98>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	f3bf 8f6f 	isb	sy
}
 8003ee4:	e001      	b.n	8003eea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ee6:	f7ff fa01 	bl	80032ec <xTaskResumeAll>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000082c 	.word	0x2000082c
 8003ef8:	20000830 	.word	0x20000830
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <prvGetNextExpireTime+0x44>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <prvGetNextExpireTime+0x16>
 8003f12:	2201      	movs	r2, #1
 8003f14:	e000      	b.n	8003f18 <prvGetNextExpireTime+0x18>
 8003f16:	2200      	movs	r2, #0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <prvGetNextExpireTime+0x44>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e001      	b.n	8003f34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000828 	.word	0x20000828

08003f48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f50:	f7ff fa68 	bl	8003424 <xTaskGetTickCount>
 8003f54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <prvSampleTimeNow+0x3c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d205      	bcs.n	8003f6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f60:	f000 f918 	bl	8004194 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <prvSampleTimeNow+0x3c>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000838 	.word	0x20000838

08003f88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d812      	bhi.n	8003fd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e01b      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <prvInsertTimerInActiveList+0x7c>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe fa23 	bl	8002418 <vListInsert>
 8003fd2:	e012      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d206      	bcs.n	8003fea <prvInsertTimerInActiveList+0x62>
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e007      	b.n	8003ffa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <prvInsertTimerInActiveList+0x80>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe fa0f 	bl	8002418 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ffa:	697b      	ldr	r3, [r7, #20]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	2000082c 	.word	0x2000082c
 8004008:	20000828 	.word	0x20000828

0800400c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08c      	sub	sp, #48	; 0x30
 8004010:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004012:	e0ac      	b.n	800416e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f2c0 80a8 	blt.w	800416c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fa2c 	bl	800248a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff87 	bl	8003f48 <prvSampleTimeNow>
 800403a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b09      	cmp	r3, #9
 8004040:	f200 8095 	bhi.w	800416e <prvProcessReceivedCommands+0x162>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <prvProcessReceivedCommands+0x40>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004075 	.word	0x08004075
 8004050:	08004075 	.word	0x08004075
 8004054:	08004075 	.word	0x08004075
 8004058:	080040e7 	.word	0x080040e7
 800405c:	080040fb 	.word	0x080040fb
 8004060:	08004143 	.word	0x08004143
 8004064:	08004075 	.word	0x08004075
 8004068:	08004075 	.word	0x08004075
 800406c:	080040e7 	.word	0x080040e7
 8004070:	080040fb 	.word	0x080040fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	18d1      	adds	r1, r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004094:	f7ff ff78 	bl	8003f88 <prvInsertTimerInActiveList>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d067      	beq.n	800416e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d05c      	beq.n	800416e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	441a      	add	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2300      	movs	r3, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c6:	f7ff fe23 	bl	8003d10 <xTimerGenericCommand>
 80040ca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d14d      	bne.n	800416e <prvProcessReceivedCommands+0x162>
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	e7fe      	b.n	80040e4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80040f8:	e039      	b.n	800416e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <prvProcessReceivedCommands+0x122>
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e7fe      	b.n	800412c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	18d1      	adds	r1, r2, r3
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413c:	f7ff ff24 	bl	8003f88 <prvInsertTimerInActiveList>
					break;
 8004140:	e015      	b.n	800416e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004152:	f000 fbc7 	bl	80048e4 <vPortFree>
 8004156:	e00a      	b.n	800416e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800416a:	e000      	b.n	800416e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800416c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <prvProcessReceivedCommands+0x184>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f107 0108 	add.w	r1, r7, #8
 8004176:	2200      	movs	r2, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe fc39 	bl	80029f0 <xQueueReceive>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f af47 	bne.w	8004014 <prvProcessReceivedCommands+0x8>
	}
}
 8004186:	bf00      	nop
 8004188:	3728      	adds	r7, #40	; 0x28
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000830 	.word	0x20000830

08004194 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800419a:	e047      	b.n	800422c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <prvSwitchTimerLists+0xc0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a6:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <prvSwitchTimerLists+0xc0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe f968 	bl	800248a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d02d      	beq.n	800422c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d90e      	bls.n	8004200 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <prvSwitchTimerLists+0xc0>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7fe f90d 	bl	8002418 <vListInsert>
 80041fe:	e015      	b.n	800422c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004200:	2300      	movs	r3, #0
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	2300      	movs	r3, #0
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	2100      	movs	r1, #0
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff fd80 	bl	8003d10 <xTimerGenericCommand>
 8004210:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <prvSwitchTimerLists+0x98>
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	e7fe      	b.n	800422a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <prvSwitchTimerLists+0xc0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1b2      	bne.n	800419c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <prvSwitchTimerLists+0xc0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <prvSwitchTimerLists+0xc4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <prvSwitchTimerLists+0xc0>)
 8004242:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <prvSwitchTimerLists+0xc4>)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6013      	str	r3, [r2, #0]
}
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000828 	.word	0x20000828
 8004258:	2000082c 	.word	0x2000082c

0800425c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004262:	f000 f963 	bl	800452c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <prvCheckForValidListAndQueue+0x60>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d120      	bne.n	80042b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800426e:	4814      	ldr	r0, [pc, #80]	; (80042c0 <prvCheckForValidListAndQueue+0x64>)
 8004270:	f7fe f881 	bl	8002376 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004274:	4813      	ldr	r0, [pc, #76]	; (80042c4 <prvCheckForValidListAndQueue+0x68>)
 8004276:	f7fe f87e 	bl	8002376 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <prvCheckForValidListAndQueue+0x6c>)
 800427c:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <prvCheckForValidListAndQueue+0x64>)
 800427e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <prvCheckForValidListAndQueue+0x70>)
 8004282:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <prvCheckForValidListAndQueue+0x68>)
 8004284:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004286:	2300      	movs	r3, #0
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <prvCheckForValidListAndQueue+0x74>)
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <prvCheckForValidListAndQueue+0x78>)
 800428e:	210c      	movs	r1, #12
 8004290:	200a      	movs	r0, #10
 8004292:	f7fe f98d 	bl	80025b0 <xQueueGenericCreateStatic>
 8004296:	4602      	mov	r2, r0
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <prvCheckForValidListAndQueue+0x60>)
 800429a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <prvCheckForValidListAndQueue+0x60>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <prvCheckForValidListAndQueue+0x60>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	490b      	ldr	r1, [pc, #44]	; (80042d8 <prvCheckForValidListAndQueue+0x7c>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fd8c 	bl	8002dc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042b0:	f000 f96a 	bl	8004588 <vPortExitCritical>
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000830 	.word	0x20000830
 80042c0:	20000800 	.word	0x20000800
 80042c4:	20000814 	.word	0x20000814
 80042c8:	20000828 	.word	0x20000828
 80042cc:	2000082c 	.word	0x2000082c
 80042d0:	200008b4 	.word	0x200008b4
 80042d4:	2000083c 	.word	0x2000083c
 80042d8:	08004c2c 	.word	0x08004c2c

080042dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b04      	subs	r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b04      	subs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b04      	subs	r3, #4
 800430a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800430c:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <pxPortInitialiseStack+0x64>)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b14      	subs	r3, #20
 8004316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3b04      	subs	r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f06f 0202 	mvn.w	r2, #2
 800432a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b20      	subs	r3, #32
 8004330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	08004345 	.word	0x08004345

08004344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <prvTaskExitError+0x50>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d009      	beq.n	800436c <prvTaskExitError+0x28>
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e7fe      	b.n	800436a <prvTaskExitError+0x26>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800437e:	bf00      	nop
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0fc      	beq.n	8004380 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	2000000c 	.word	0x2000000c
	...

080043a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <pxCurrentTCBConst2>)
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	6808      	ldr	r0, [r1, #0]
 80043a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	f380 8809 	msr	PSP, r0
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8811 	msr	BASEPRI, r0
 80043ba:	4770      	bx	lr
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst2>:
 80043c0:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <prvPortStartFirstTask+0x24>)
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	6800      	ldr	r0, [r0, #0]
 80043ce:	f380 8808 	msr	MSP, r0
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8814 	msr	CONTROL, r0
 80043da:	b662      	cpsie	i
 80043dc:	b661      	cpsie	f
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	df00      	svc	0
 80043e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ea:	bf00      	nop
 80043ec:	e000ed08 	.word	0xe000ed08

080043f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <xPortStartScheduler+0x118>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a44      	ldr	r2, [pc, #272]	; (800450c <xPortStartScheduler+0x11c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d109      	bne.n	8004414 <xPortStartScheduler+0x24>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e7fe      	b.n	8004412 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004414:	4b3c      	ldr	r3, [pc, #240]	; (8004508 <xPortStartScheduler+0x118>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a3d      	ldr	r2, [pc, #244]	; (8004510 <xPortStartScheduler+0x120>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d109      	bne.n	8004432 <xPortStartScheduler+0x42>
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e7fe      	b.n	8004430 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004432:	4b38      	ldr	r3, [pc, #224]	; (8004514 <xPortStartScheduler+0x124>)
 8004434:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	22ff      	movs	r2, #255	; 0xff
 8004442:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004454:	b2da      	uxtb	r2, r3
 8004456:	4b30      	ldr	r3, [pc, #192]	; (8004518 <xPortStartScheduler+0x128>)
 8004458:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800445a:	4b30      	ldr	r3, [pc, #192]	; (800451c <xPortStartScheduler+0x12c>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004460:	e009      	b.n	8004476 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <xPortStartScheduler+0x12c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3b01      	subs	r3, #1
 8004468:	4a2c      	ldr	r2, [pc, #176]	; (800451c <xPortStartScheduler+0x12c>)
 800446a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d0ef      	beq.n	8004462 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <xPortStartScheduler+0x12c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1c3 0307 	rsb	r3, r3, #7
 800448a:	2b04      	cmp	r3, #4
 800448c:	d009      	beq.n	80044a2 <xPortStartScheduler+0xb2>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	e7fe      	b.n	80044a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044a2:	4b1e      	ldr	r3, [pc, #120]	; (800451c <xPortStartScheduler+0x12c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	4a1c      	ldr	r2, [pc, #112]	; (800451c <xPortStartScheduler+0x12c>)
 80044aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <xPortStartScheduler+0x12c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <xPortStartScheduler+0x12c>)
 80044b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <xPortStartScheduler+0x130>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a16      	ldr	r2, [pc, #88]	; (8004520 <xPortStartScheduler+0x130>)
 80044c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <xPortStartScheduler+0x130>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <xPortStartScheduler+0x130>)
 80044d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044d8:	f000 f8d6 	bl	8004688 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <xPortStartScheduler+0x134>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044e2:	f000 f8f5 	bl	80046d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <xPortStartScheduler+0x138>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <xPortStartScheduler+0x138>)
 80044ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044f2:	f7ff ff69 	bl	80043c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044f6:	f7ff f85d 	bl	80035b4 <vTaskSwitchContext>
	prvTaskExitError();
 80044fa:	f7ff ff23 	bl	8004344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	e000ed00 	.word	0xe000ed00
 800450c:	410fc271 	.word	0x410fc271
 8004510:	410fc270 	.word	0x410fc270
 8004514:	e000e400 	.word	0xe000e400
 8004518:	200008fc 	.word	0x200008fc
 800451c:	20000900 	.word	0x20000900
 8004520:	e000ed20 	.word	0xe000ed20
 8004524:	2000000c 	.word	0x2000000c
 8004528:	e000ef34 	.word	0xe000ef34

0800452c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <vPortEnterCritical+0x54>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <vPortEnterCritical+0x54>)
 800454c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <vPortEnterCritical+0x54>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10e      	bne.n	8004574 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vPortEnterCritical+0x58>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <vPortEnterCritical+0x48>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	e7fe      	b.n	8004572 <vPortEnterCritical+0x46>
	}
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	2000000c 	.word	0x2000000c
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <vPortExitCritical+0x4c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <vPortExitCritical+0x22>
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	e7fe      	b.n	80045a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <vPortExitCritical+0x4c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <vPortExitCritical+0x4c>)
 80045b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <vPortExitCritical+0x4c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <vPortExitCritical+0x3e>
 80045bc:	2300      	movs	r3, #0
 80045be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000000c 	.word	0x2000000c
	...

080045e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045e0:	f3ef 8009 	mrs	r0, PSP
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <pxCurrentTCBConst>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f01e 0f10 	tst.w	lr, #16
 80045f0:	bf08      	it	eq
 80045f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004604:	f380 8811 	msr	BASEPRI, r0
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f7fe ffd0 	bl	80035b4 <vTaskSwitchContext>
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	f380 8811 	msr	BASEPRI, r0
 800461c:	bc09      	pop	{r0, r3}
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	6808      	ldr	r0, [r1, #0]
 8004622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004626:	f01e 0f10 	tst.w	lr, #16
 800462a:	bf08      	it	eq
 800462c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004630:	f380 8809 	msr	PSP, r0
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst>:
 8004640:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004660:	f7fe fef0 	bl	8003444 <xTaskIncrementTick>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <xPortSysTickHandler+0x3c>)
 800466c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	2300      	movs	r3, #0
 8004674:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <vPortSetupTimerInterrupt+0x34>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <vPortSetupTimerInterrupt+0x38>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <vPortSetupTimerInterrupt+0x3c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <vPortSetupTimerInterrupt+0x40>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	4a09      	ldr	r2, [pc, #36]	; (80046cc <vPortSetupTimerInterrupt+0x44>)
 80046a6:	3b01      	subs	r3, #1
 80046a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <vPortSetupTimerInterrupt+0x34>)
 80046ac:	2207      	movs	r2, #7
 80046ae:	601a      	str	r2, [r3, #0]
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000e010 	.word	0xe000e010
 80046c0:	e000e018 	.word	0xe000e018
 80046c4:	20000000 	.word	0x20000000
 80046c8:	10624dd3 	.word	0x10624dd3
 80046cc:	e000e014 	.word	0xe000e014

080046d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046e0 <vPortEnableVFP+0x10>
 80046d4:	6801      	ldr	r1, [r0, #0]
 80046d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046da:	6001      	str	r1, [r0, #0]
 80046dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046de:	bf00      	nop
 80046e0:	e000ed88 	.word	0xe000ed88

080046e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046ea:	f3ef 8305 	mrs	r3, IPSR
 80046ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d913      	bls.n	800471e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <vPortValidateInterruptPriority+0x6c>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <vPortValidateInterruptPriority+0x70>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	7afa      	ldrb	r2, [r7, #11]
 8004706:	429a      	cmp	r2, r3
 8004708:	d209      	bcs.n	800471e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e7fe      	b.n	800471c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800471e:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <vPortValidateInterruptPriority+0x74>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <vPortValidateInterruptPriority+0x78>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d909      	bls.n	8004742 <vPortValidateInterruptPriority+0x5e>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	e7fe      	b.n	8004740 <vPortValidateInterruptPriority+0x5c>
	}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	e000e3f0 	.word	0xe000e3f0
 8004754:	200008fc 	.word	0x200008fc
 8004758:	e000ed0c 	.word	0xe000ed0c
 800475c:	20000900 	.word	0x20000900

08004760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800476c:	f7fe fdb0 	bl	80032d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004770:	4b57      	ldr	r3, [pc, #348]	; (80048d0 <pvPortMalloc+0x170>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004778:	f000 f90c 	bl	8004994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800477c:	4b55      	ldr	r3, [pc, #340]	; (80048d4 <pvPortMalloc+0x174>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 808c 	bne.w	80048a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01c      	beq.n	80047ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004790:	2208      	movs	r2, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	3308      	adds	r3, #8
 80047aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <pvPortMalloc+0x6a>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e7fe      	b.n	80047c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d068      	beq.n	80048a2 <pvPortMalloc+0x142>
 80047d0:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <pvPortMalloc+0x178>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d863      	bhi.n	80048a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047da:	4b40      	ldr	r3, [pc, #256]	; (80048dc <pvPortMalloc+0x17c>)
 80047dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <pvPortMalloc+0x17c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047e4:	e004      	b.n	80047f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d903      	bls.n	8004802 <pvPortMalloc+0xa2>
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f1      	bne.n	80047e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004802:	4b33      	ldr	r3, [pc, #204]	; (80048d0 <pvPortMalloc+0x170>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	429a      	cmp	r2, r3
 800480a:	d04a      	beq.n	80048a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2208      	movs	r2, #8
 8004812:	4413      	add	r3, r2
 8004814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	2308      	movs	r3, #8
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	429a      	cmp	r2, r3
 800482c:	d91e      	bls.n	800486c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <pvPortMalloc+0xf4>
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e7fe      	b.n	8004852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004866:	69b8      	ldr	r0, [r7, #24]
 8004868:	f000 f8f6 	bl	8004a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <pvPortMalloc+0x178>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <pvPortMalloc+0x178>)
 8004878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <pvPortMalloc+0x178>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <pvPortMalloc+0x180>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d203      	bcs.n	800488e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <pvPortMalloc+0x178>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <pvPortMalloc+0x180>)
 800488c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <pvPortMalloc+0x174>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	431a      	orrs	r2, r3
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048a2:	f7fe fd23 	bl	80032ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <pvPortMalloc+0x164>
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e7fe      	b.n	80048c2 <pvPortMalloc+0x162>
	return pvReturn;
 80048c4:	69fb      	ldr	r3, [r7, #28]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3728      	adds	r7, #40	; 0x28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000450c 	.word	0x2000450c
 80048d4:	20004518 	.word	0x20004518
 80048d8:	20004510 	.word	0x20004510
 80048dc:	20004504 	.word	0x20004504
 80048e0:	20004514 	.word	0x20004514

080048e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d046      	beq.n	8004984 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048f6:	2308      	movs	r3, #8
 80048f8:	425b      	negs	r3, r3
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4413      	add	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <vPortFree+0xa8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <vPortFree+0x42>
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e7fe      	b.n	8004924 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <vPortFree+0x5e>
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	e7fe      	b.n	8004940 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <vPortFree+0xa8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d019      	beq.n	8004984 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d115      	bne.n	8004984 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <vPortFree+0xa8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	43db      	mvns	r3, r3
 8004962:	401a      	ands	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004968:	f7fe fcb2 	bl	80032d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <vPortFree+0xac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4413      	add	r3, r2
 8004976:	4a06      	ldr	r2, [pc, #24]	; (8004990 <vPortFree+0xac>)
 8004978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800497a:	6938      	ldr	r0, [r7, #16]
 800497c:	f000 f86c 	bl	8004a58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004980:	f7fe fcb4 	bl	80032ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004984:	bf00      	nop
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20004518 	.word	0x20004518
 8004990:	20004510 	.word	0x20004510

08004994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800499a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800499e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <prvHeapInit+0xac>)
 80049a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3307      	adds	r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <prvHeapInit+0xac>)
 80049c4:	4413      	add	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <prvHeapInit+0xb0>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049d2:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <prvHeapInit+0xb0>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049e0:	2208      	movs	r2, #8
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <prvHeapInit+0xb4>)
 80049f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <prvHeapInit+0xb4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <prvHeapInit+0xb4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <prvHeapInit+0xb4>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <prvHeapInit+0xb8>)
 8004a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <prvHeapInit+0xbc>)
 8004a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <prvHeapInit+0xc0>)
 8004a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	20000904 	.word	0x20000904
 8004a44:	20004504 	.word	0x20004504
 8004a48:	2000450c 	.word	0x2000450c
 8004a4c:	20004514 	.word	0x20004514
 8004a50:	20004510 	.word	0x20004510
 8004a54:	20004518 	.word	0x20004518

08004a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a60:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <prvInsertBlockIntoFreeList+0xac>)
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e002      	b.n	8004a6c <prvInsertBlockIntoFreeList+0x14>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d8f7      	bhi.n	8004a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	4413      	add	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d108      	bne.n	8004a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d118      	bne.n	8004ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <prvInsertBlockIntoFreeList+0xb0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d00d      	beq.n	8004ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e008      	b.n	8004ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e003      	b.n	8004ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d002      	beq.n	8004af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20004504 	.word	0x20004504
 8004b08:	2000450c 	.word	0x2000450c

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4e0d      	ldr	r6, [pc, #52]	; (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	; (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1ba4      	subs	r4, r4, r6
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2500      	movs	r5, #0
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4e0b      	ldr	r6, [pc, #44]	; (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	; (8004b50 <__libc_init_array+0x44>)
 8004b20:	f000 f82c 	bl	8004b7c <_init>
 8004b24:	1ba4      	subs	r4, r4, r6
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2500      	movs	r5, #0
 8004b2a:	42a5      	cmp	r5, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b34:	4798      	blx	r3
 8004b36:	3501      	adds	r5, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b3e:	4798      	blx	r3
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08004c54 	.word	0x08004c54
 8004b48:	08004c54 	.word	0x08004c54
 8004b4c:	08004c54 	.word	0x08004c54
 8004b50:	08004c58 	.word	0x08004c58

08004b54 <memcpy>:
 8004b54:	b510      	push	{r4, lr}
 8004b56:	1e43      	subs	r3, r0, #1
 8004b58:	440a      	add	r2, r1
 8004b5a:	4291      	cmp	r1, r2
 8004b5c:	d100      	bne.n	8004b60 <memcpy+0xc>
 8004b5e:	bd10      	pop	{r4, pc}
 8004b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b68:	e7f7      	b.n	8004b5a <memcpy+0x6>

08004b6a <memset>:
 8004b6a:	4402      	add	r2, r0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d100      	bne.n	8004b74 <memset+0xa>
 8004b72:	4770      	bx	lr
 8004b74:	f803 1b01 	strb.w	r1, [r3], #1
 8004b78:	e7f9      	b.n	8004b6e <memset+0x4>
	...

08004b7c <_init>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	bf00      	nop
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr

08004b88 <_fini>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr
