
Lab3-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005168  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005464  08005464  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800546c  0800546c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000401c  20000074  080054e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004090  080054e8  00024090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec26  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024a7  00000000  00000000  0002ecca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  00031178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  00031d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001676d  00000000  00000000  00032810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0d3  00000000  00000000  00048f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d178  00000000  00000000  00053050  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e01c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003248  00000000  00000000  000e0244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052f0 	.word	0x080052f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080052f0 	.word	0x080052f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ba:	f000 fb73 	bl	8000ca4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005be:	f000 f81d 	bl	80005fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c2:	f000 f8af 	bl	8000724 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005c6:	f000 f883 	bl	80006d0 <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x40>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 ffac 	bl	800253e <osThreadCreate>
 80005e6:	4602      	mov	r2, r0
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <main+0x44>)
 80005ea:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80005ec:	f001 ffa0 	bl	8002530 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005f0:	e7fe      	b.n	80005f0 <main+0x3c>
 80005f2:	bf00      	nop
 80005f4:	08005314 	.word	0x08005314
 80005f8:	2000403c 	.word	0x2000403c

080005fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fa6b 	bl	8004ae6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800067a:	2304      	movs	r3, #4
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fe1c 	bl	80012c0 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x96>
		Error_Handler();
 800068e:	f000 f9f7 	bl	8000a80 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f876 	bl	80017a0 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
		Error_Handler();
 80006ba:	f000 f9e1 	bl	8000a80 <Error_Handler>
	}
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 fa3c 	bl	8001b84 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000712:	f000 f9b5 	bl	8000a80 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20004048 	.word	0x20004048
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007b0:	f000 fd52 	bl	8001258 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_GPIO_Init+0xd8>)
 80007bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_GPIO_Init+0xdc>)
 80007ca:	f000 fbc3 	bl	8000f54 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007e6:	f000 fbb5 	bl	8000f54 <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	10210000 	.word	0x10210000
 8000800:	40020800 	.word	0x40020800

08000804 <led_thread>:


osMessageQId message_q_id;
osMessageQDef(message_q, 32, char);

void led_thread(void const *args) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800080c:	2120      	movs	r1, #32
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <led_thread+0x18>)
 8000810:	f000 fd3b 	bl	800128a <HAL_GPIO_TogglePin>
		osDelay(18);
 8000814:	2012      	movs	r0, #18
 8000816:	f001 fede 	bl	80025d6 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800081a:	e7f7      	b.n	800080c <led_thread+0x8>
 800081c:	40020000 	.word	0x40020000

08000820 <a_thread>:
	}
}

void a_thread(void const *args){
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	char c = 'A';
 8000828:	2341      	movs	r3, #65	; 0x41
 800082a:	73fb      	strb	r3, [r7, #15]
	while(1){
		HAL_UART_Transmit(&huart2,&c,1,50);
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	2332      	movs	r3, #50	; 0x32
 8000832:	2201      	movs	r2, #1
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <a_thread+0x24>)
 8000836:	f001 f9f2 	bl	8001c1e <HAL_UART_Transmit>
		osDelay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083e:	f001 feca 	bl	80025d6 <osDelay>
		HAL_UART_Transmit(&huart2,&c,1,50);
 8000842:	e7f3      	b.n	800082c <a_thread+0xc>
 8000844:	20004048 	.word	0x20004048

08000848 <b_thread>:
	}
}

void b_thread(void const *args){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	char c = 'B';
 8000850:	2342      	movs	r3, #66	; 0x42
 8000852:	73fb      	strb	r3, [r7, #15]
	while(1){
		HAL_UART_Transmit(&huart2,&c,1,128);
 8000854:	f107 010f 	add.w	r1, r7, #15
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	2201      	movs	r2, #1
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <b_thread+0x24>)
 800085e:	f001 f9de 	bl	8001c1e <HAL_UART_Transmit>
		osDelay(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000866:	f001 feb6 	bl	80025d6 <osDelay>
		HAL_UART_Transmit(&huart2,&c,1,128);
 800086a:	e7f3      	b.n	8000854 <b_thread+0xc>
 800086c:	20004048 	.word	0x20004048

08000870 <send0_thread>:
	}
}

void send0_thread(void const *args) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	int threadID = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
	int idx = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
//	char buffer[32];
	while (1) {
		message_t *message = (message_t*)osPoolAlloc(mpool);
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <send0_thread+0x48>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f001 feba 	bl	80025fe <osPoolAlloc>
 800088a:	60f8      	str	r0, [r7, #12]
		sprintf(message->value, "TID: %d %d\r\n", threadID, idx);
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	490a      	ldr	r1, [pc, #40]	; (80008bc <send0_thread+0x4c>)
 8000894:	f004 f930 	bl	8004af8 <siprintf>

		idx++;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]

		osMessagePut(message_q_id, (uint32_t)message, osWaitForever);
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <send0_thread+0x50>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68f9      	ldr	r1, [r7, #12]
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 ff75 	bl	8002798 <osMessagePut>
		osDelay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f001 fe90 	bl	80025d6 <osDelay>
	while (1) {
 80008b6:	e7e3      	b.n	8000880 <send0_thread+0x10>
 80008b8:	20004040 	.word	0x20004040
 80008bc:	08005330 	.word	0x08005330
 80008c0:	20004044 	.word	0x20004044

080008c4 <send1_thread>:
	}
}

void send1_thread(void const *args) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	int threadID = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
	int idx = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
//	char buffer[32];
	while (1) {

		message_t *message = (message_t*)osPoolAlloc(mpool);
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <send1_thread+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fe90 	bl	80025fe <osPoolAlloc>
 80008de:	60f8      	str	r0, [r7, #12]
		sprintf(*(message->value), "TID: %d %d\r\n", threadID, idx);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	490a      	ldr	r1, [pc, #40]	; (8000914 <send1_thread+0x50>)
 80008ec:	f004 f904 	bl	8004af8 <siprintf>

		idx++;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3301      	adds	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]

		osMessagePut(message_q_id, (uint32_t)message, osWaitForever);
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <send1_thread+0x54>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68f9      	ldr	r1, [r7, #12]
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	4618      	mov	r0, r3
 8000902:	f001 ff49 	bl	8002798 <osMessagePut>
		osDelay(1000);
 8000906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090a:	f001 fe64 	bl	80025d6 <osDelay>
	while (1) {
 800090e:	e7e1      	b.n	80008d4 <send1_thread+0x10>
 8000910:	20004040 	.word	0x20004040
 8000914:	08005330 	.word	0x08005330
 8000918:	20004044 	.word	0x20004044

0800091c <recv_thread>:
	}
}

void recv_thread(void const *args) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	while (1) {
		osEvent evt = osMessageGet(message_q_id, osWaitForever);
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <recv_thread+0x40>)
 8000926:	6819      	ldr	r1, [r3, #0]
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	4618      	mov	r0, r3
 8000932:	f001 ff71 	bl	8002818 <osMessageGet>
		if (evt.status == osEventMessage) {
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b10      	cmp	r3, #16
 800093a:	d1f3      	bne.n	8000924 <recv_thread+0x8>
			message_t *message = (message_t*)evt.value.p;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart2, message->value, sizeof(message->value), 1000);
 8000940:	6979      	ldr	r1, [r7, #20]
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	2220      	movs	r2, #32
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <recv_thread+0x44>)
 800094a:	f001 f968 	bl	8001c1e <HAL_UART_Transmit>
			osPoolFree(mpool, message);
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <recv_thread+0x48>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6979      	ldr	r1, [r7, #20]
 8000954:	4618      	mov	r0, r3
 8000956:	f001 feb4 	bl	80026c2 <osPoolFree>
	while (1) {
 800095a:	e7e3      	b.n	8000924 <recv_thread+0x8>
 800095c:	20004044 	.word	0x20004044
 8000960:	20004048 	.word	0x20004048
 8000964:	20004040 	.word	0x20004040

08000968 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b0b2      	sub	sp, #200	; 0xc8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	message_q_id = osMessageCreate(osMessageQ(message_q), NULL);
 8000970:	2100      	movs	r1, #0
 8000972:	483b      	ldr	r0, [pc, #236]	; (8000a60 <StartDefaultTask+0xf8>)
 8000974:	f001 fee6 	bl	8002744 <osMessageCreate>
 8000978:	4602      	mov	r2, r0
 800097a:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <StartDefaultTask+0xfc>)
 800097c:	601a      	str	r2, [r3, #0]

	osThreadDef(a, a_thread, osPriorityNormal, 1, 128);
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <StartDefaultTask+0x100>)
 8000980:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000984:	461d      	mov	r5, r3
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(b, b_thread, osPriorityNormal, 1, 128);
 8000992:	4b36      	ldr	r3, [pc, #216]	; (8000a6c <StartDefaultTask+0x104>)
 8000994:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000998:	461d      	mov	r5, r3
 800099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(s0, send0_thread, osPriorityNormal, 1, 128);
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <StartDefaultTask+0x108>)
 80009a8:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(s1, send1_thread, osPriorityNormal, 1, 128);
 80009ba:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <StartDefaultTask+0x10c>)
 80009bc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80009c0:	461d      	mov	r5, r3
 80009c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(r1, recv_thread, osPriorityNormal, 1, 128);
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <StartDefaultTask+0x110>)
 80009d0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80009d4:	461d      	mov	r5, r3
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009de:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	osThreadId tid_thread1 = osThreadCreate(osThread(s0), NULL);
 80009e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fda8 	bl	800253e <osThreadCreate>
 80009ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	osThreadId tid_thread2 = osThreadCreate(osThread(s1), NULL);
 80009f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fda0 	bl	800253e <osThreadCreate>
 80009fe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	osThreadId tid_thread3 = osThreadCreate(osThread(r1), NULL);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fd98 	bl	800253e <osThreadCreate>
 8000a0e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	osThreadId tid_thread4 = osThreadCreate(osThread(a), NULL);
 8000a12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fd90 	bl	800253e <osThreadCreate>
 8000a1e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	osThreadId tid_thread5 = osThreadCreate(osThread(b), NULL);
 8000a22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fd88 	bl	800253e <osThreadCreate>
 8000a2e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4


	osThreadDef(led, led_thread, osPriorityNormal, 0, 128);
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <StartDefaultTask+0x114>)
 8000a34:	f107 0408 	add.w	r4, r7, #8
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadId led_th = osThreadCreate(osThread(led), NULL);
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fd76 	bl	800253e <osThreadCreate>
 8000a52:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f001 fdbd 	bl	80025d6 <osDelay>
 8000a5c:	e7fb      	b.n	8000a56 <StartDefaultTask+0xee>
 8000a5e:	bf00      	nop
 8000a60:	08005408 	.word	0x08005408
 8000a64:	20004044 	.word	0x20004044
 8000a68:	08005344 	.word	0x08005344
 8000a6c:	08005364 	.word	0x08005364
 8000a70:	08005384 	.word	0x08005384
 8000a74:	080053a4 	.word	0x080053a4
 8000a78:	080053c4 	.word	0x080053c4
 8000a7c:	080053e4 	.word	0x080053e4

08000a80 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a86:	e7fe      	b.n	8000a86 <Error_Handler+0x6>

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_MspInit+0x54>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <HAL_MspInit+0x54>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x54>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_MspInit+0x54>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_MspInit+0x54>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_MspInit+0x54>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 fa18 	bl	8000f02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f000 f9fd 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f8d2 	bl	8000d48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ba4:	f003 fa48 	bl	8004038 <xTaskGetSchedulerState>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d001      	beq.n	8000bb2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bae:	f003 fd03 	bl	80045b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f003 ff48 	bl	8004a7c <__errno>
 8000bec:	4602      	mov	r2, r0
 8000bee:	230c      	movs	r3, #12
 8000bf0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	200002e4 	.word	0x200002e4
 8000c20:	20004090 	.word	0x20004090

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <SystemInit+0x28>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <SystemInit+0x28>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SystemInit+0x28>)
 8000c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c56:	e003      	b.n	8000c60 <LoopCopyDataInit>

08000c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c5e:	3104      	adds	r1, #4

08000c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c68:	d3f6      	bcc.n	8000c58 <CopyDataInit>
  ldr  r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c6c:	e002      	b.n	8000c74 <LoopFillZerobss>

08000c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c70:	f842 3b04 	str.w	r3, [r2], #4

08000c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c78:	d3f9      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd3 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 ff03 	bl	8004a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc97 	bl	80005b4 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c8c:	08005474 	.word	0x08005474
  ldr  r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c94:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000c98:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000c9c:	20004090 	.word	0x20004090

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f90d 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fed6 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f917 	bl	8000f3a <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f8ed 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20004088 	.word	0x20004088

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20004088 	.word	0x20004088

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff47 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5c 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d00b      	beq.n	8000fae <HAL_GPIO_Init+0x5a>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa2:	2b11      	cmp	r3, #17
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d130      	bne.n	8001010 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 0201 	and.w	r2, r3, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0xfc>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b12      	cmp	r3, #18
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b56      	ldr	r3, [pc, #344]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a55      	ldr	r2, [pc, #340]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a51      	ldr	r2, [pc, #324]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a47      	ldr	r2, [pc, #284]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a46      	ldr	r2, [pc, #280]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <HAL_GPIO_Init+0x2f8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a44      	ldr	r2, [pc, #272]	; (8001250 <HAL_GPIO_Init+0x2fc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4934      	ldr	r1, [pc, #208]	; (800123c <HAL_GPIO_Init+0x2e8>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <HAL_GPIO_Init+0x300>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_GPIO_Init+0x300>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c4:	4a23      	ldr	r2, [pc, #140]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_GPIO_Init+0x300>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_GPIO_Init+0x300>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	3724      	adds	r7, #36	; 0x24
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	401a      	ands	r2, r3
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d104      	bne.n	80012ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	041a      	lsls	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e25b      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d075      	beq.n	80013ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	4ba3      	ldr	r3, [pc, #652]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00c      	beq.n	8001304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ea:	4ba0      	ldr	r3, [pc, #640]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d112      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b9d      	ldr	r3, [pc, #628]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001302:	d10b      	bne.n	800131c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	4b99      	ldr	r3, [pc, #612]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d05b      	beq.n	80013c8 <HAL_RCC_OscConfig+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d157      	bne.n	80013c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e236      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x74>
 8001326:	4b91      	ldr	r3, [pc, #580]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a90      	ldr	r2, [pc, #576]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b8b      	ldr	r3, [pc, #556]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a8a      	ldr	r2, [pc, #552]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a87      	ldr	r2, [pc, #540]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xb0>
 8001358:	4b84      	ldr	r3, [pc, #528]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a83      	ldr	r2, [pc, #524]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a80      	ldr	r2, [pc, #512]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcfa 	bl	8000d70 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcf6 	bl	8000d70 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1fb      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fce6 	bl	8000d70 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fce2 	bl	8000d70 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1e7      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b6c      	ldr	r3, [pc, #432]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0xe8>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b62      	ldr	r3, [pc, #392]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1bb      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4952      	ldr	r1, [pc, #328]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <HAL_RCC_OscConfig+0x2b0>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fc9b 	bl	8000d70 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc97 	bl	8000d70 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e19c      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4940      	ldr	r1, [pc, #256]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_OscConfig+0x2b0>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc7a 	bl	8000d70 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc76 	bl	8000d70 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e17b      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b36      	ldr	r3, [pc, #216]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d030      	beq.n	800150c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <HAL_RCC_OscConfig+0x2b4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc5a 	bl	8000d70 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc56 	bl	8000d70 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e15b      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x200>
 80014de:	e015      	b.n	800150c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_RCC_OscConfig+0x2b4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc43 	bl	8000d70 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc3f 	bl	8000d70 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e144      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a0 	beq.w	800165a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x2b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d121      	bne.n	800159a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_RCC_OscConfig+0x2b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_RCC_OscConfig+0x2b8>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fc05 	bl	8000d70 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	e011      	b.n	800158e <HAL_RCC_OscConfig+0x2ce>
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	42470000 	.word	0x42470000
 8001574:	42470e80 	.word	0x42470e80
 8001578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157c:	f7ff fbf8 	bl	8000d70 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0fd      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b81      	ldr	r3, [pc, #516]	; (8001794 <HAL_RCC_OscConfig+0x4d4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
 80015a2:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a7c      	ldr	r2, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e01c      	b.n	80015ea <HAL_RCC_OscConfig+0x32a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x312>
 80015b8:	4b77      	ldr	r3, [pc, #476]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a76      	ldr	r2, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	4b74      	ldr	r3, [pc, #464]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a73      	ldr	r2, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e00b      	b.n	80015ea <HAL_RCC_OscConfig+0x32a>
 80015d2:	4b71      	ldr	r3, [pc, #452]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a70      	ldr	r2, [pc, #448]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	4b6e      	ldr	r3, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a6d      	ldr	r2, [pc, #436]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fbbd 	bl	8000d70 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fbb9 	bl	8000d70 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0bc      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ee      	beq.n	80015fa <HAL_RCC_OscConfig+0x33a>
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fba7 	bl	8000d70 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fba3 	bl	8000d70 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e0a6      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ee      	bne.n	8001626 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164e:	4b52      	ldr	r3, [pc, #328]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a51      	ldr	r2, [pc, #324]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 8001654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8092 	beq.w	8001788 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d05c      	beq.n	800172a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d141      	bne.n	80016fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b48      	ldr	r3, [pc, #288]	; (800179c <HAL_RCC_OscConfig+0x4dc>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fb77 	bl	8000d70 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb73 	bl	8000d70 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e078      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	019b      	lsls	r3, r3, #6
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	3b01      	subs	r3, #1
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	4933      	ldr	r1, [pc, #204]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x4dc>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb4c 	bl	8000d70 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fb48 	bl	8000d70 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04d      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x41c>
 80016fa:	e045      	b.n	8001788 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fb35 	bl	8000d70 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fb31 	bl	8000d70 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e036      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x44a>
 8001728:	e02e      	b.n	8001788 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e029      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_RCC_OscConfig+0x4d8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	429a      	cmp	r2, r3
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d115      	bne.n	8001784 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001764:	4293      	cmp	r3, r2
 8001766:	d10d      	bne.n	8001784 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d106      	bne.n	8001784 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40007000 	.word	0x40007000
 8001798:	40023800 	.word	0x40023800
 800179c:	42470060 	.word	0x42470060

080017a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0cc      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d90c      	bls.n	80017dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b65      	ldr	r3, [pc, #404]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b63      	ldr	r3, [pc, #396]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0b8      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001818:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	494d      	ldr	r1, [pc, #308]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d044      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d119      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e07f      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d003      	beq.n	800185e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	2b03      	cmp	r3, #3
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e06f      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e067      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f023 0203 	bic.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4934      	ldr	r1, [pc, #208]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001890:	f7ff fa6e 	bl	8000d70 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	e00a      	b.n	80018ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff fa6a 	bl	8000d70 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e04f      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 020c 	and.w	r2, r3, #12
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1eb      	bne.n	8001898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d20c      	bcs.n	80018e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e032      	b.n	800194e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4916      	ldr	r1, [pc, #88]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	490e      	ldr	r1, [pc, #56]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001926:	f000 f821 	bl	800196c <HAL_RCC_GetSysClockFreq>
 800192a:	4601      	mov	r1, r0
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	fa21 f303 	lsr.w	r3, r1, r3
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f9ce 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00
 800195c:	40023800 	.word	0x40023800
 8001960:	08005418 	.word	0x08005418
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b04      	cmp	r3, #4
 800198c:	d007      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x32>
 800198e:	2b08      	cmp	r3, #8
 8001990:	d008      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x38>
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80b4 	bne.w	8001b00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800199a:	60bb      	str	r3, [r7, #8]
       break;
 800199c:	e0b3      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019a0:	60bb      	str	r3, [r7, #8]
      break;
 80019a2:	e0b0      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d04a      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	f04f 0400 	mov.w	r4, #0
 80019c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	ea03 0501 	and.w	r5, r3, r1
 80019d0:	ea04 0602 	and.w	r6, r4, r2
 80019d4:	4629      	mov	r1, r5
 80019d6:	4632      	mov	r2, r6
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	0154      	lsls	r4, r2, #5
 80019e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019e6:	014b      	lsls	r3, r1, #5
 80019e8:	4619      	mov	r1, r3
 80019ea:	4622      	mov	r2, r4
 80019ec:	1b49      	subs	r1, r1, r5
 80019ee:	eb62 0206 	sbc.w	r2, r2, r6
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	f04f 0400 	mov.w	r4, #0
 80019fa:	0194      	lsls	r4, r2, #6
 80019fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a00:	018b      	lsls	r3, r1, #6
 8001a02:	1a5b      	subs	r3, r3, r1
 8001a04:	eb64 0402 	sbc.w	r4, r4, r2
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	00e2      	lsls	r2, r4, #3
 8001a12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a16:	00d9      	lsls	r1, r3, #3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4614      	mov	r4, r2
 8001a1c:	195b      	adds	r3, r3, r5
 8001a1e:	eb44 0406 	adc.w	r4, r4, r6
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	0262      	lsls	r2, r4, #9
 8001a2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a30:	0259      	lsls	r1, r3, #9
 8001a32:	460b      	mov	r3, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	4621      	mov	r1, r4
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 0400 	mov.w	r4, #0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4623      	mov	r3, r4
 8001a44:	f7fe fc1c 	bl	8000280 <__aeabi_uldivmod>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	e049      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	f04f 0400 	mov.w	r4, #0
 8001a5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	ea03 0501 	and.w	r5, r3, r1
 8001a66:	ea04 0602 	and.w	r6, r4, r2
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4632      	mov	r2, r6
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	f04f 0400 	mov.w	r4, #0
 8001a76:	0154      	lsls	r4, r2, #5
 8001a78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a7c:	014b      	lsls	r3, r1, #5
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4622      	mov	r2, r4
 8001a82:	1b49      	subs	r1, r1, r5
 8001a84:	eb62 0206 	sbc.w	r2, r2, r6
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	f04f 0400 	mov.w	r4, #0
 8001a90:	0194      	lsls	r4, r2, #6
 8001a92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	1a5b      	subs	r3, r3, r1
 8001a9a:	eb64 0402 	sbc.w	r4, r4, r2
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	00e2      	lsls	r2, r4, #3
 8001aa8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001aac:	00d9      	lsls	r1, r3, #3
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	195b      	adds	r3, r3, r5
 8001ab4:	eb44 0406 	adc.w	r4, r4, r6
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	02a2      	lsls	r2, r4, #10
 8001ac2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ac6:	0299      	lsls	r1, r3, #10
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4614      	mov	r4, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	4621      	mov	r1, r4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 0400 	mov.w	r4, #0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4623      	mov	r3, r4
 8001ada:	f7fe fbd1 	bl	8000280 <__aeabi_uldivmod>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	60bb      	str	r3, [r7, #8]
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b02:	60bb      	str	r3, [r7, #8]
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	68bb      	ldr	r3, [r7, #8]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08005428 	.word	0x08005428

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4601      	mov	r1, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08005428 	.word	0x08005428

08001b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e03f      	b.n	8001c16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe ff98 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f90b 	bl	8001de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b088      	sub	sp, #32
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	f040 8083 	bne.w	8001d46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_UART_Transmit+0x2e>
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e07b      	b.n	8001d48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_UART_Transmit+0x40>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e074      	b.n	8001d48 <HAL_UART_Transmit+0x12a>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2221      	movs	r2, #33	; 0x21
 8001c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c74:	f7ff f87c 	bl	8000d70 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	88fa      	ldrh	r2, [r7, #6]
 8001c84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c8e:	e042      	b.n	8001d16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca6:	d122      	bne.n	8001cee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f84c 	bl	8001d50 <UART_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e042      	b.n	8001d48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cd4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	e017      	b.n	8001d16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	e013      	b.n	8001d16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f829 	bl	8001d50 <UART_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e01f      	b.n	8001d48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1b7      	bne.n	8001c90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2200      	movs	r2, #0
 8001d28:	2140      	movs	r1, #64	; 0x40
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f810 	bl	8001d50 <UART_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e006      	b.n	8001d48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
  }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d60:	e02c      	b.n	8001dbc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d028      	beq.n	8001dbc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d70:	f7fe fffe 	bl	8000d70 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d21d      	bcs.n	8001dbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e00f      	b.n	8001ddc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d0c3      	beq.n	8001d62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e26:	f023 030c 	bic.w	r3, r3, #12
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	68f9      	ldr	r1, [r7, #12]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e52:	f040 818b 	bne.w	800216c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4ac1      	ldr	r2, [pc, #772]	; (8002160 <UART_SetConfig+0x37c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d005      	beq.n	8001e6c <UART_SetConfig+0x88>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4abf      	ldr	r2, [pc, #764]	; (8002164 <UART_SetConfig+0x380>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	f040 80bd 	bne.w	8001fe6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e6c:	f7ff fe76 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8001e70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	461d      	mov	r5, r3
 8001e76:	f04f 0600 	mov.w	r6, #0
 8001e7a:	46a8      	mov	r8, r5
 8001e7c:	46b1      	mov	r9, r6
 8001e7e:	eb18 0308 	adds.w	r3, r8, r8
 8001e82:	eb49 0409 	adc.w	r4, r9, r9
 8001e86:	4698      	mov	r8, r3
 8001e88:	46a1      	mov	r9, r4
 8001e8a:	eb18 0805 	adds.w	r8, r8, r5
 8001e8e:	eb49 0906 	adc.w	r9, r9, r6
 8001e92:	f04f 0100 	mov.w	r1, #0
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ea2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ea6:	4688      	mov	r8, r1
 8001ea8:	4691      	mov	r9, r2
 8001eaa:	eb18 0005 	adds.w	r0, r8, r5
 8001eae:	eb49 0106 	adc.w	r1, r9, r6
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	461d      	mov	r5, r3
 8001eb8:	f04f 0600 	mov.w	r6, #0
 8001ebc:	196b      	adds	r3, r5, r5
 8001ebe:	eb46 0406 	adc.w	r4, r6, r6
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	f7fe f9db 	bl	8000280 <__aeabi_uldivmod>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4ba5      	ldr	r3, [pc, #660]	; (8002168 <UART_SetConfig+0x384>)
 8001ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	461d      	mov	r5, r3
 8001ee0:	f04f 0600 	mov.w	r6, #0
 8001ee4:	46a9      	mov	r9, r5
 8001ee6:	46b2      	mov	sl, r6
 8001ee8:	eb19 0309 	adds.w	r3, r9, r9
 8001eec:	eb4a 040a 	adc.w	r4, sl, sl
 8001ef0:	4699      	mov	r9, r3
 8001ef2:	46a2      	mov	sl, r4
 8001ef4:	eb19 0905 	adds.w	r9, r9, r5
 8001ef8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f10:	4689      	mov	r9, r1
 8001f12:	4692      	mov	sl, r2
 8001f14:	eb19 0005 	adds.w	r0, r9, r5
 8001f18:	eb4a 0106 	adc.w	r1, sl, r6
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	461d      	mov	r5, r3
 8001f22:	f04f 0600 	mov.w	r6, #0
 8001f26:	196b      	adds	r3, r5, r5
 8001f28:	eb46 0406 	adc.w	r4, r6, r6
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4623      	mov	r3, r4
 8001f30:	f7fe f9a6 	bl	8000280 <__aeabi_uldivmod>
 8001f34:	4603      	mov	r3, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b8b      	ldr	r3, [pc, #556]	; (8002168 <UART_SetConfig+0x384>)
 8001f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	2164      	movs	r1, #100	; 0x64
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	3332      	adds	r3, #50	; 0x32
 8001f4e:	4a86      	ldr	r2, [pc, #536]	; (8002168 <UART_SetConfig+0x384>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f5c:	4498      	add	r8, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	461d      	mov	r5, r3
 8001f62:	f04f 0600 	mov.w	r6, #0
 8001f66:	46a9      	mov	r9, r5
 8001f68:	46b2      	mov	sl, r6
 8001f6a:	eb19 0309 	adds.w	r3, r9, r9
 8001f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8001f72:	4699      	mov	r9, r3
 8001f74:	46a2      	mov	sl, r4
 8001f76:	eb19 0905 	adds.w	r9, r9, r5
 8001f7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f7e:	f04f 0100 	mov.w	r1, #0
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f92:	4689      	mov	r9, r1
 8001f94:	4692      	mov	sl, r2
 8001f96:	eb19 0005 	adds.w	r0, r9, r5
 8001f9a:	eb4a 0106 	adc.w	r1, sl, r6
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	461d      	mov	r5, r3
 8001fa4:	f04f 0600 	mov.w	r6, #0
 8001fa8:	196b      	adds	r3, r5, r5
 8001faa:	eb46 0406 	adc.w	r4, r6, r6
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4623      	mov	r3, r4
 8001fb2:	f7fe f965 	bl	8000280 <__aeabi_uldivmod>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <UART_SetConfig+0x384>)
 8001fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2164      	movs	r1, #100	; 0x64
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	3332      	adds	r3, #50	; 0x32
 8001fd0:	4a65      	ldr	r2, [pc, #404]	; (8002168 <UART_SetConfig+0x384>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	f003 0207 	and.w	r2, r3, #7
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4442      	add	r2, r8
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e26f      	b.n	80024c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fe6:	f7ff fda5 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8001fea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	461d      	mov	r5, r3
 8001ff0:	f04f 0600 	mov.w	r6, #0
 8001ff4:	46a8      	mov	r8, r5
 8001ff6:	46b1      	mov	r9, r6
 8001ff8:	eb18 0308 	adds.w	r3, r8, r8
 8001ffc:	eb49 0409 	adc.w	r4, r9, r9
 8002000:	4698      	mov	r8, r3
 8002002:	46a1      	mov	r9, r4
 8002004:	eb18 0805 	adds.w	r8, r8, r5
 8002008:	eb49 0906 	adc.w	r9, r9, r6
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002018:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800201c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002020:	4688      	mov	r8, r1
 8002022:	4691      	mov	r9, r2
 8002024:	eb18 0005 	adds.w	r0, r8, r5
 8002028:	eb49 0106 	adc.w	r1, r9, r6
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	461d      	mov	r5, r3
 8002032:	f04f 0600 	mov.w	r6, #0
 8002036:	196b      	adds	r3, r5, r5
 8002038:	eb46 0406 	adc.w	r4, r6, r6
 800203c:	461a      	mov	r2, r3
 800203e:	4623      	mov	r3, r4
 8002040:	f7fe f91e 	bl	8000280 <__aeabi_uldivmod>
 8002044:	4603      	mov	r3, r0
 8002046:	460c      	mov	r4, r1
 8002048:	461a      	mov	r2, r3
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <UART_SetConfig+0x384>)
 800204c:	fba3 2302 	umull	r2, r3, r3, r2
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	461d      	mov	r5, r3
 800205a:	f04f 0600 	mov.w	r6, #0
 800205e:	46a9      	mov	r9, r5
 8002060:	46b2      	mov	sl, r6
 8002062:	eb19 0309 	adds.w	r3, r9, r9
 8002066:	eb4a 040a 	adc.w	r4, sl, sl
 800206a:	4699      	mov	r9, r3
 800206c:	46a2      	mov	sl, r4
 800206e:	eb19 0905 	adds.w	r9, r9, r5
 8002072:	eb4a 0a06 	adc.w	sl, sl, r6
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800208a:	4689      	mov	r9, r1
 800208c:	4692      	mov	sl, r2
 800208e:	eb19 0005 	adds.w	r0, r9, r5
 8002092:	eb4a 0106 	adc.w	r1, sl, r6
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	461d      	mov	r5, r3
 800209c:	f04f 0600 	mov.w	r6, #0
 80020a0:	196b      	adds	r3, r5, r5
 80020a2:	eb46 0406 	adc.w	r4, r6, r6
 80020a6:	461a      	mov	r2, r3
 80020a8:	4623      	mov	r3, r4
 80020aa:	f7fe f8e9 	bl	8000280 <__aeabi_uldivmod>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <UART_SetConfig+0x384>)
 80020b6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2164      	movs	r1, #100	; 0x64
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	3332      	adds	r3, #50	; 0x32
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <UART_SetConfig+0x384>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020d6:	4498      	add	r8, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	461d      	mov	r5, r3
 80020dc:	f04f 0600 	mov.w	r6, #0
 80020e0:	46a9      	mov	r9, r5
 80020e2:	46b2      	mov	sl, r6
 80020e4:	eb19 0309 	adds.w	r3, r9, r9
 80020e8:	eb4a 040a 	adc.w	r4, sl, sl
 80020ec:	4699      	mov	r9, r3
 80020ee:	46a2      	mov	sl, r4
 80020f0:	eb19 0905 	adds.w	r9, r9, r5
 80020f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80020f8:	f04f 0100 	mov.w	r1, #0
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800210c:	4689      	mov	r9, r1
 800210e:	4692      	mov	sl, r2
 8002110:	eb19 0005 	adds.w	r0, r9, r5
 8002114:	eb4a 0106 	adc.w	r1, sl, r6
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	461d      	mov	r5, r3
 800211e:	f04f 0600 	mov.w	r6, #0
 8002122:	196b      	adds	r3, r5, r5
 8002124:	eb46 0406 	adc.w	r4, r6, r6
 8002128:	461a      	mov	r2, r3
 800212a:	4623      	mov	r3, r4
 800212c:	f7fe f8a8 	bl	8000280 <__aeabi_uldivmod>
 8002130:	4603      	mov	r3, r0
 8002132:	460c      	mov	r4, r1
 8002134:	461a      	mov	r2, r3
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <UART_SetConfig+0x384>)
 8002138:	fba3 1302 	umull	r1, r3, r3, r2
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	2164      	movs	r1, #100	; 0x64
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	3332      	adds	r3, #50	; 0x32
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <UART_SetConfig+0x384>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	f003 0207 	and.w	r2, r3, #7
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4442      	add	r2, r8
 800215c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800215e:	e1b2      	b.n	80024c6 <UART_SetConfig+0x6e2>
 8002160:	40011000 	.word	0x40011000
 8002164:	40011400 	.word	0x40011400
 8002168:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4ad7      	ldr	r2, [pc, #860]	; (80024d0 <UART_SetConfig+0x6ec>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d005      	beq.n	8002182 <UART_SetConfig+0x39e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4ad6      	ldr	r2, [pc, #856]	; (80024d4 <UART_SetConfig+0x6f0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	f040 80d1 	bne.w	8002324 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002182:	f7ff fceb 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8002186:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	469a      	mov	sl, r3
 800218c:	f04f 0b00 	mov.w	fp, #0
 8002190:	46d0      	mov	r8, sl
 8002192:	46d9      	mov	r9, fp
 8002194:	eb18 0308 	adds.w	r3, r8, r8
 8002198:	eb49 0409 	adc.w	r4, r9, r9
 800219c:	4698      	mov	r8, r3
 800219e:	46a1      	mov	r9, r4
 80021a0:	eb18 080a 	adds.w	r8, r8, sl
 80021a4:	eb49 090b 	adc.w	r9, r9, fp
 80021a8:	f04f 0100 	mov.w	r1, #0
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021bc:	4688      	mov	r8, r1
 80021be:	4691      	mov	r9, r2
 80021c0:	eb1a 0508 	adds.w	r5, sl, r8
 80021c4:	eb4b 0609 	adc.w	r6, fp, r9
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f04f 0400 	mov.w	r4, #0
 80021da:	0094      	lsls	r4, r2, #2
 80021dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021e0:	008b      	lsls	r3, r1, #2
 80021e2:	461a      	mov	r2, r3
 80021e4:	4623      	mov	r3, r4
 80021e6:	4628      	mov	r0, r5
 80021e8:	4631      	mov	r1, r6
 80021ea:	f7fe f849 	bl	8000280 <__aeabi_uldivmod>
 80021ee:	4603      	mov	r3, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	461a      	mov	r2, r3
 80021f4:	4bb8      	ldr	r3, [pc, #736]	; (80024d8 <UART_SetConfig+0x6f4>)
 80021f6:	fba3 2302 	umull	r2, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	469b      	mov	fp, r3
 8002204:	f04f 0c00 	mov.w	ip, #0
 8002208:	46d9      	mov	r9, fp
 800220a:	46e2      	mov	sl, ip
 800220c:	eb19 0309 	adds.w	r3, r9, r9
 8002210:	eb4a 040a 	adc.w	r4, sl, sl
 8002214:	4699      	mov	r9, r3
 8002216:	46a2      	mov	sl, r4
 8002218:	eb19 090b 	adds.w	r9, r9, fp
 800221c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800222c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002230:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002234:	4689      	mov	r9, r1
 8002236:	4692      	mov	sl, r2
 8002238:	eb1b 0509 	adds.w	r5, fp, r9
 800223c:	eb4c 060a 	adc.w	r6, ip, sl
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4619      	mov	r1, r3
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f04f 0400 	mov.w	r4, #0
 8002252:	0094      	lsls	r4, r2, #2
 8002254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002258:	008b      	lsls	r3, r1, #2
 800225a:	461a      	mov	r2, r3
 800225c:	4623      	mov	r3, r4
 800225e:	4628      	mov	r0, r5
 8002260:	4631      	mov	r1, r6
 8002262:	f7fe f80d 	bl	8000280 <__aeabi_uldivmod>
 8002266:	4603      	mov	r3, r0
 8002268:	460c      	mov	r4, r1
 800226a:	461a      	mov	r2, r3
 800226c:	4b9a      	ldr	r3, [pc, #616]	; (80024d8 <UART_SetConfig+0x6f4>)
 800226e:	fba3 1302 	umull	r1, r3, r3, r2
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2164      	movs	r1, #100	; 0x64
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	3332      	adds	r3, #50	; 0x32
 8002280:	4a95      	ldr	r2, [pc, #596]	; (80024d8 <UART_SetConfig+0x6f4>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228c:	4498      	add	r8, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	469b      	mov	fp, r3
 8002292:	f04f 0c00 	mov.w	ip, #0
 8002296:	46d9      	mov	r9, fp
 8002298:	46e2      	mov	sl, ip
 800229a:	eb19 0309 	adds.w	r3, r9, r9
 800229e:	eb4a 040a 	adc.w	r4, sl, sl
 80022a2:	4699      	mov	r9, r3
 80022a4:	46a2      	mov	sl, r4
 80022a6:	eb19 090b 	adds.w	r9, r9, fp
 80022aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022c2:	4689      	mov	r9, r1
 80022c4:	4692      	mov	sl, r2
 80022c6:	eb1b 0509 	adds.w	r5, fp, r9
 80022ca:	eb4c 060a 	adc.w	r6, ip, sl
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	f04f 0400 	mov.w	r4, #0
 80022e0:	0094      	lsls	r4, r2, #2
 80022e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022e6:	008b      	lsls	r3, r1, #2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	4628      	mov	r0, r5
 80022ee:	4631      	mov	r1, r6
 80022f0:	f7fd ffc6 	bl	8000280 <__aeabi_uldivmod>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b77      	ldr	r3, [pc, #476]	; (80024d8 <UART_SetConfig+0x6f4>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	2164      	movs	r1, #100	; 0x64
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	3332      	adds	r3, #50	; 0x32
 800230e:	4a72      	ldr	r2, [pc, #456]	; (80024d8 <UART_SetConfig+0x6f4>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	f003 020f 	and.w	r2, r3, #15
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4442      	add	r2, r8
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	e0d0      	b.n	80024c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002324:	f7ff fc06 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8002328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	469a      	mov	sl, r3
 800232e:	f04f 0b00 	mov.w	fp, #0
 8002332:	46d0      	mov	r8, sl
 8002334:	46d9      	mov	r9, fp
 8002336:	eb18 0308 	adds.w	r3, r8, r8
 800233a:	eb49 0409 	adc.w	r4, r9, r9
 800233e:	4698      	mov	r8, r3
 8002340:	46a1      	mov	r9, r4
 8002342:	eb18 080a 	adds.w	r8, r8, sl
 8002346:	eb49 090b 	adc.w	r9, r9, fp
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800235a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800235e:	4688      	mov	r8, r1
 8002360:	4691      	mov	r9, r2
 8002362:	eb1a 0508 	adds.w	r5, sl, r8
 8002366:	eb4b 0609 	adc.w	r6, fp, r9
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	0094      	lsls	r4, r2, #2
 800237e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002382:	008b      	lsls	r3, r1, #2
 8002384:	461a      	mov	r2, r3
 8002386:	4623      	mov	r3, r4
 8002388:	4628      	mov	r0, r5
 800238a:	4631      	mov	r1, r6
 800238c:	f7fd ff78 	bl	8000280 <__aeabi_uldivmod>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	461a      	mov	r2, r3
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <UART_SetConfig+0x6f4>)
 8002398:	fba3 2302 	umull	r2, r3, r3, r2
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	469b      	mov	fp, r3
 80023a6:	f04f 0c00 	mov.w	ip, #0
 80023aa:	46d9      	mov	r9, fp
 80023ac:	46e2      	mov	sl, ip
 80023ae:	eb19 0309 	adds.w	r3, r9, r9
 80023b2:	eb4a 040a 	adc.w	r4, sl, sl
 80023b6:	4699      	mov	r9, r3
 80023b8:	46a2      	mov	sl, r4
 80023ba:	eb19 090b 	adds.w	r9, r9, fp
 80023be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023d6:	4689      	mov	r9, r1
 80023d8:	4692      	mov	sl, r2
 80023da:	eb1b 0509 	adds.w	r5, fp, r9
 80023de:	eb4c 060a 	adc.w	r6, ip, sl
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	f04f 0400 	mov.w	r4, #0
 80023f4:	0094      	lsls	r4, r2, #2
 80023f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023fa:	008b      	lsls	r3, r1, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	4628      	mov	r0, r5
 8002402:	4631      	mov	r1, r6
 8002404:	f7fd ff3c 	bl	8000280 <__aeabi_uldivmod>
 8002408:	4603      	mov	r3, r0
 800240a:	460c      	mov	r4, r1
 800240c:	461a      	mov	r2, r3
 800240e:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <UART_SetConfig+0x6f4>)
 8002410:	fba3 1302 	umull	r1, r3, r3, r2
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	2164      	movs	r1, #100	; 0x64
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	3332      	adds	r3, #50	; 0x32
 8002422:	4a2d      	ldr	r2, [pc, #180]	; (80024d8 <UART_SetConfig+0x6f4>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242e:	4498      	add	r8, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	469b      	mov	fp, r3
 8002434:	f04f 0c00 	mov.w	ip, #0
 8002438:	46d9      	mov	r9, fp
 800243a:	46e2      	mov	sl, ip
 800243c:	eb19 0309 	adds.w	r3, r9, r9
 8002440:	eb4a 040a 	adc.w	r4, sl, sl
 8002444:	4699      	mov	r9, r3
 8002446:	46a2      	mov	sl, r4
 8002448:	eb19 090b 	adds.w	r9, r9, fp
 800244c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800245c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002464:	4689      	mov	r9, r1
 8002466:	4692      	mov	sl, r2
 8002468:	eb1b 0509 	adds.w	r5, fp, r9
 800246c:	eb4c 060a 	adc.w	r6, ip, sl
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	f04f 0400 	mov.w	r4, #0
 8002482:	0094      	lsls	r4, r2, #2
 8002484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002488:	008b      	lsls	r3, r1, #2
 800248a:	461a      	mov	r2, r3
 800248c:	4623      	mov	r3, r4
 800248e:	4628      	mov	r0, r5
 8002490:	4631      	mov	r1, r6
 8002492:	f7fd fef5 	bl	8000280 <__aeabi_uldivmod>
 8002496:	4603      	mov	r3, r0
 8002498:	460c      	mov	r4, r1
 800249a:	461a      	mov	r2, r3
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <UART_SetConfig+0x6f4>)
 800249e:	fba3 1302 	umull	r1, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2164      	movs	r1, #100	; 0x64
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	3332      	adds	r3, #50	; 0x32
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <UART_SetConfig+0x6f4>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	f003 020f 	and.w	r2, r3, #15
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4442      	add	r2, r8
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	e7ff      	b.n	80024c6 <UART_SetConfig+0x6e2>
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40011400 	.word	0x40011400
 80024d8:	51eb851f 	.word	0x51eb851f

080024dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ee:	2b84      	cmp	r3, #132	; 0x84
 80024f0:	d005      	beq.n	80024fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4413      	add	r3, r2
 80024fa:	3303      	adds	r3, #3
 80024fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002512:	f3ef 8305 	mrs	r3, IPSR
 8002516:	607b      	str	r3, [r7, #4]
  return(result);
 8002518:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002534:	f001 f98c 	bl	8003850 <vTaskStartScheduler>
  
  return osOK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}

0800253e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800253e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002540:	b089      	sub	sp, #36	; 0x24
 8002542:	af04      	add	r7, sp, #16
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <osThreadCreate+0x54>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01c      	beq.n	8002592 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685c      	ldr	r4, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681d      	ldr	r5, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691e      	ldr	r6, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ffb6 	bl	80024dc <makeFreeRtosPriority>
 8002570:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800257a:	9202      	str	r2, [sp, #8]
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	9100      	str	r1, [sp, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4632      	mov	r2, r6
 8002584:	4629      	mov	r1, r5
 8002586:	4620      	mov	r0, r4
 8002588:	f000 ff9f 	bl	80034ca <xTaskCreateStatic>
 800258c:	4603      	mov	r3, r0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e01c      	b.n	80025cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685c      	ldr	r4, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800259e:	b29e      	uxth	r6, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff98 	bl	80024dc <makeFreeRtosPriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	9200      	str	r2, [sp, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	4632      	mov	r2, r6
 80025ba:	4629      	mov	r1, r5
 80025bc:	4620      	mov	r0, r4
 80025be:	f000 ffde 	bl	800357e <xTaskCreate>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d001      	beq.n	80025cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025cc:	68fb      	ldr	r3, [r7, #12]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <osDelay+0x16>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	e000      	b.n	80025ee <osDelay+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f8fa 	bl	80037e8 <vTaskDelay>
  
  return osOK;
 80025f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08a      	sub	sp, #40	; 0x28
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800260e:	f7ff ff7d 	bl	800250c <inHandlerMode>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002618:	f3ef 8211 	mrs	r2, BASEPRI
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	617a      	str	r2, [r7, #20]
 800262e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002630:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	e001      	b.n	800263a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002636:	f001 ff31 	bl	800449c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e029      	b.n	8002694 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6892      	ldr	r2, [r2, #8]
 800264c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002650:	fb02 f201 	mul.w	r2, r2, r1
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d113      	bne.n	800268e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	440b      	add	r3, r1
 8002684:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	611a      	str	r2, [r3, #16]
      break;
 800268c:	e007      	b.n	800269e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d3d0      	bcc.n	8002640 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800269e:	f7ff ff35 	bl	800250c <inHandlerMode>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	e001      	b.n	80026b8 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80026b4:	f001 ff20 	bl	80044f8 <vPortExitCritical>
  }
  
  return p;
 80026b8:	6a3b      	ldr	r3, [r7, #32]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <osPoolFree+0x14>
    return osErrorParameter;
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	e030      	b.n	8002738 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <osPoolFree+0x1e>
    return osErrorParameter;
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	e02b      	b.n	8002738 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d201      	bcs.n	80026ee <osPoolFree+0x2c>
    return osErrorParameter;
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	e024      	b.n	8002738 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002702:	fb02 f201 	mul.w	r2, r2, r1
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <osPoolFree+0x4e>
    return osErrorParameter;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	e013      	b.n	8002738 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	429a      	cmp	r2, r3
 8002724:	d301      	bcc.n	800272a <osPoolFree+0x68>
    return osErrorParameter;
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	e006      	b.n	8002738 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b085      	sub	sp, #20
 8002748:	af02      	add	r7, sp, #8
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <osMessageCreate+0x38>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00e      	beq.n	800277c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68dc      	ldr	r4, [r3, #12]
 800276e:	2300      	movs	r3, #0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	4623      	mov	r3, r4
 8002774:	f000 f9e0 	bl	8002b38 <xQueueGenericCreateStatic>
 8002778:	4603      	mov	r3, r0
 800277a:	e008      	b.n	800278e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	4619      	mov	r1, r3
 8002788:	f000 fa49 	bl	8002c1e <xQueueGenericCreate>
 800278c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
	...

08002798 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <osMessagePut+0x1e>
    ticks = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80027b6:	f7ff fea9 	bl	800250c <inHandlerMode>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80027c0:	f107 0210 	add.w	r2, r7, #16
 80027c4:	f107 0108 	add.w	r1, r7, #8
 80027c8:	2300      	movs	r3, #0
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fb80 	bl	8002ed0 <xQueueGenericSendFromISR>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d001      	beq.n	80027da <osMessagePut+0x42>
      return osErrorOS;
 80027d6:	23ff      	movs	r3, #255	; 0xff
 80027d8:	e018      	b.n	800280c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d014      	beq.n	800280a <osMessagePut+0x72>
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <osMessagePut+0x7c>)
 80027e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	e00b      	b.n	800280a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80027f2:	f107 0108 	add.w	r1, r7, #8
 80027f6:	2300      	movs	r3, #0
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fa6e 	bl	8002cdc <xQueueGenericSend>
 8002800:	4603      	mov	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <osMessagePut+0x72>
      return osErrorOS;
 8002806:	23ff      	movs	r3, #255	; 0xff
 8002808:	e000      	b.n	800280c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b08b      	sub	sp, #44	; 0x2c
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	617b      	str	r3, [r7, #20]
    return event;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	461c      	mov	r4, r3
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002842:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002846:	e054      	b.n	80028f2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d103      	bne.n	8002860 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e009      	b.n	8002874 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <osMessageGet+0x5c>
      ticks = 1;
 8002870:	2301      	movs	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002874:	f7ff fe4a 	bl	800250c <inHandlerMode>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800287e:	f107 0220 	add.w	r2, r7, #32
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	3304      	adds	r3, #4
 8002888:	4619      	mov	r1, r3
 800288a:	68b8      	ldr	r0, [r7, #8]
 800288c:	f000 fc90 	bl	80031b0 <xQueueReceiveFromISR>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d102      	bne.n	800289c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002896:	2310      	movs	r3, #16
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e001      	b.n	80028a0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01d      	beq.n	80028e2 <osMessageGet+0xca>
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <osMessageGet+0xe4>)
 80028a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	e014      	b.n	80028e2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	3304      	adds	r3, #4
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	68b8      	ldr	r0, [r7, #8]
 80028c4:	f000 fb98 	bl	8002ff8 <xQueueReceive>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80028ce:	2310      	movs	r3, #16
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e006      	b.n	80028e2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <osMessageGet+0xc6>
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <osMessageGet+0xc8>
 80028de:	2340      	movs	r3, #64	; 0x40
 80028e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	461c      	mov	r4, r3
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	372c      	adds	r7, #44	; 0x2c
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd90      	pop	{r4, r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000ed04 	.word	0xe000ed04

08002900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f103 0208 	add.w	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f103 0208 	add.w	r2, r3, #8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f103 0208 	add.w	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d103      	bne.n	80029c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e00c      	b.n	80029dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3308      	adds	r3, #8
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e002      	b.n	80029d0 <vListInsert+0x2e>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d2f6      	bcs.n	80029ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	601a      	str	r2, [r3, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6892      	ldr	r2, [r2, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6852      	ldr	r2, [r2, #4]
 8002a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d103      	bne.n	8002a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <xQueueGenericReset+0x28>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	e7fe      	b.n	8002a8e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002a90:	f001 fd04 	bl	800449c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	441a      	add	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	22ff      	movs	r2, #255	; 0xff
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	22ff      	movs	r2, #255	; 0xff
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d114      	bne.n	8002b10 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01a      	beq.n	8002b24 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3310      	adds	r3, #16
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 f8ea 	bl	8003ccc <xTaskRemoveFromEventList>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <xQueueGenericReset+0xcc>)
 8002b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	e009      	b.n	8002b24 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3310      	adds	r3, #16
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fef3 	bl	8002900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3324      	adds	r3, #36	; 0x24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff feee 	bl	8002900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b24:	f001 fce8 	bl	80044f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <xQueueGenericCreateStatic+0x28>
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	e7fe      	b.n	8002b5e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <xQueueGenericCreateStatic+0x42>
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <xQueueGenericCreateStatic+0x4e>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <xQueueGenericCreateStatic+0x52>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <xQueueGenericCreateStatic+0x54>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <xQueueGenericCreateStatic+0x6c>
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	e7fe      	b.n	8002ba2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <xQueueGenericCreateStatic+0x78>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <xQueueGenericCreateStatic+0x7c>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <xQueueGenericCreateStatic+0x7e>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <xQueueGenericCreateStatic+0x96>
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	e7fe      	b.n	8002bcc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bce:	2348      	movs	r3, #72	; 0x48
 8002bd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b48      	cmp	r3, #72	; 0x48
 8002bd6:	d009      	beq.n	8002bec <xQueueGenericCreateStatic+0xb4>
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	e7fe      	b.n	8002bea <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f844 	bl	8002c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3730      	adds	r7, #48	; 0x30
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b08a      	sub	sp, #40	; 0x28
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <xQueueGenericCreate+0x28>
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	e7fe      	b.n	8002c44 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	e004      	b.n	8002c5c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	3348      	adds	r3, #72	; 0x48
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 fd35 	bl	80046d0 <pvPortMalloc>
 8002c66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	3348      	adds	r3, #72	; 0x48
 8002c76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c80:	79fa      	ldrb	r2, [r7, #7]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	4613      	mov	r3, r2
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f805 	bl	8002c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c92:	69bb      	ldr	r3, [r7, #24]
	}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e002      	b.n	8002cbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cca:	2101      	movs	r1, #1
 8002ccc:	69b8      	ldr	r0, [r7, #24]
 8002cce:	f7ff fecb 	bl	8002a68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08e      	sub	sp, #56	; 0x38
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cea:	2300      	movs	r3, #0
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <xQueueGenericSend+0x30>
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0a:	e7fe      	b.n	8002d0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <xQueueGenericSend+0x3e>
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <xQueueGenericSend+0x42>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <xQueueGenericSend+0x44>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <xQueueGenericSend+0x5c>
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	e7fe      	b.n	8002d36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d103      	bne.n	8002d46 <xQueueGenericSend+0x6a>
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <xQueueGenericSend+0x6e>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <xQueueGenericSend+0x70>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <xQueueGenericSend+0x88>
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e7fe      	b.n	8002d62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d64:	f001 f968 	bl	8004038 <xTaskGetSchedulerState>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <xQueueGenericSend+0x98>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <xQueueGenericSend+0x9c>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <xQueueGenericSend+0x9e>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <xQueueGenericSend+0xb6>
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	e7fe      	b.n	8002d90 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d92:	f001 fb83 	bl	800449c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <xQueueGenericSend+0xcc>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d129      	bne.n	8002dfc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dae:	f000 fa7c 	bl	80032aa <prvCopyDataToQueue>
 8002db2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	3324      	adds	r3, #36	; 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 ff83 	bl	8003ccc <xTaskRemoveFromEventList>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <xQueueGenericSend+0x1f0>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	e00a      	b.n	8002df4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <xQueueGenericSend+0x1f0>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002df4:	f001 fb80 	bl	80044f8 <vPortExitCritical>
				return pdPASS;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e063      	b.n	8002ec4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e02:	f001 fb79 	bl	80044f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e05c      	b.n	8002ec4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ffbb 	bl	8003d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e1e:	f001 fb6b 	bl	80044f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e22:	f000 fd73 	bl	800390c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e26:	f001 fb39 	bl	800449c <vPortEnterCritical>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d103      	bne.n	8002e40 <xQueueGenericSend+0x164>
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x17a>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e56:	f001 fb4f 	bl	80044f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e5a:	1d3a      	adds	r2, r7, #4
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ffaa 	bl	8003dbc <xTaskCheckForTimeOut>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d124      	bne.n	8002eb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e70:	f000 fb13 	bl	800349a <prvIsQueueFull>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fefe 	bl	8003c84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8a:	f000 fa9e 	bl	80033ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e8e:	f000 fd4b 	bl	8003928 <xTaskResumeAll>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f af7c 	bne.w	8002d92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <xQueueGenericSend+0x1f0>)
 8002e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	e772      	b.n	8002d92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eae:	f000 fa8c 	bl	80033ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eb2:	f000 fd39 	bl	8003928 <xTaskResumeAll>
 8002eb6:	e76c      	b.n	8002d92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eba:	f000 fa86 	bl	80033ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ebe:	f000 fd33 	bl	8003928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3738      	adds	r7, #56	; 0x38
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	; 0x38
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <xQueueGenericSendFromISR+0x2c>
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	e7fe      	b.n	8002efa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <xQueueGenericSendFromISR+0x3a>
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <xQueueGenericSendFromISR+0x3e>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <xQueueGenericSendFromISR+0x40>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <xQueueGenericSendFromISR+0x58>
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	e7fe      	b.n	8002f26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d103      	bne.n	8002f36 <xQueueGenericSendFromISR+0x66>
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <xQueueGenericSendFromISR+0x6a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <xQueueGenericSendFromISR+0x6c>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <xQueueGenericSendFromISR+0x84>
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e7fe      	b.n	8002f52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f54:	f001 fb7e 	bl	8004654 <vPortValidateInterruptPriority>
	__asm volatile
 8002f58:	f3ef 8211 	mrs	r2, BASEPRI
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61ba      	str	r2, [r7, #24]
 8002f6e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002f70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d302      	bcc.n	8002f86 <xQueueGenericSendFromISR+0xb6>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d12c      	bne.n	8002fe0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f96:	f000 f988 	bl	80032aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d112      	bne.n	8002fca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d016      	beq.n	8002fda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	3324      	adds	r3, #36	; 0x24
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fe8b 	bl	8003ccc <xTaskRemoveFromEventList>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e007      	b.n	8002fda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	b25a      	sxtb	r2, r3
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002fde:	e001      	b.n	8002fe4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3738      	adds	r7, #56	; 0x38
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <xQueueReceive+0x2e>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	e7fe      	b.n	8003024 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <xQueueReceive+0x3c>
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <xQueueReceive+0x40>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <xQueueReceive+0x42>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <xQueueReceive+0x5a>
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e7fe      	b.n	8003050 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003052:	f000 fff1 	bl	8004038 <xTaskGetSchedulerState>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <xQueueReceive+0x6a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <xQueueReceive+0x6e>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <xQueueReceive+0x70>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <xQueueReceive+0x88>
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e7fe      	b.n	800307e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003080:	f001 fa0c 	bl	800449c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01f      	beq.n	80030d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003094:	f000 f973 	bl	800337e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1e5a      	subs	r2, r3, #1
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00f      	beq.n	80030c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	3310      	adds	r3, #16
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fe0d 	bl	8003ccc <xTaskRemoveFromEventList>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030b8:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <xQueueReceive+0x1b4>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030c8:	f001 fa16 	bl	80044f8 <vPortExitCritical>
				return pdPASS;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e069      	b.n	80031a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030d6:	f001 fa0f 	bl	80044f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030da:	2300      	movs	r3, #0
 80030dc:	e062      	b.n	80031a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe51 	bl	8003d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f2:	f001 fa01 	bl	80044f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f6:	f000 fc09 	bl	800390c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030fa:	f001 f9cf 	bl	800449c <vPortEnterCritical>
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003104:	b25b      	sxtb	r3, r3
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d103      	bne.n	8003114 <xQueueReceive+0x11c>
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d103      	bne.n	800312a <xQueueReceive+0x132>
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800312a:	f001 f9e5 	bl	80044f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312e:	1d3a      	adds	r2, r7, #4
 8003130:	f107 0310 	add.w	r3, r7, #16
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fe40 	bl	8003dbc <xTaskCheckForTimeOut>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d123      	bne.n	800318a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003144:	f000 f993 	bl	800346e <prvIsQueueEmpty>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	3324      	adds	r3, #36	; 0x24
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fd94 	bl	8003c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800315c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315e:	f000 f934 	bl	80033ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003162:	f000 fbe1 	bl	8003928 <xTaskResumeAll>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d189      	bne.n	8003080 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <xQueueReceive+0x1b4>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	e780      	b.n	8003080 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800317e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003180:	f000 f923 	bl	80033ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003184:	f000 fbd0 	bl	8003928 <xTaskResumeAll>
 8003188:	e77a      	b.n	8003080 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800318a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800318c:	f000 f91d 	bl	80033ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003190:	f000 fbca 	bl	8003928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003196:	f000 f96a 	bl	800346e <prvIsQueueEmpty>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f43f af6f 	beq.w	8003080 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3730      	adds	r7, #48	; 0x30
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08e      	sub	sp, #56	; 0x38
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <xQueueReceiveFromISR+0x2a>
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	e7fe      	b.n	80031d8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d103      	bne.n	80031e8 <xQueueReceiveFromISR+0x38>
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <xQueueReceiveFromISR+0x3c>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <xQueueReceiveFromISR+0x3e>
 80031ec:	2300      	movs	r3, #0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <xQueueReceiveFromISR+0x56>
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	e7fe      	b.n	8003204 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003206:	f001 fa25 	bl	8004654 <vPortValidateInterruptPriority>
	__asm volatile
 800320a:	f3ef 8211 	mrs	r2, BASEPRI
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	61ba      	str	r2, [r7, #24]
 8003220:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003222:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02f      	beq.n	8003292 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003240:	f000 f89d 	bl	800337e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	1e5a      	subs	r2, r3, #1
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800324c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d112      	bne.n	800327c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	3310      	adds	r3, #16
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fd32 	bl	8003ccc <xTaskRemoveFromEventList>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e007      	b.n	800328c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800327c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003280:	3301      	adds	r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	b25a      	sxtb	r2, r3
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800328c:	2301      	movs	r3, #1
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
 8003290:	e001      	b.n	8003296 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003292:	2300      	movs	r3, #0
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	613b      	str	r3, [r7, #16]
	__asm volatile
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3738      	adds	r7, #56	; 0x38
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d14d      	bne.n	800336c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fecd 	bl	8004074 <xTaskPriorityDisinherit>
 80032da:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	e043      	b.n	800336c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6858      	ldr	r0, [r3, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	461a      	mov	r2, r3
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	f001 fbeb 	bl	8004ad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	441a      	add	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	d32b      	bcc.n	800336c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	e026      	b.n	800336c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68d8      	ldr	r0, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	461a      	mov	r2, r3
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	f001 fbd1 	bl	8004ad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	425b      	negs	r3, r3
 8003338:	441a      	add	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d207      	bcs.n	800335a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	425b      	negs	r3, r3
 8003354:	441a      	add	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d105      	bne.n	800336c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	3b01      	subs	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003374:	697b      	ldr	r3, [r7, #20]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d018      	beq.n	80033c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d303      	bcc.n	80033b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68d9      	ldr	r1, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	461a      	mov	r2, r3
 80033bc:	6838      	ldr	r0, [r7, #0]
 80033be:	f001 fb87 	bl	8004ad0 <memcpy>
	}
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033d2:	f001 f863 	bl	800449c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033de:	e011      	b.n	8003404 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d012      	beq.n	800340e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3324      	adds	r3, #36	; 0x24
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fc6d 	bl	8003ccc <xTaskRemoveFromEventList>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033f8:	f000 fd40 	bl	8003e7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	3b01      	subs	r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	dce9      	bgt.n	80033e0 <prvUnlockQueue+0x16>
 800340c:	e000      	b.n	8003410 <prvUnlockQueue+0x46>
					break;
 800340e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	22ff      	movs	r2, #255	; 0xff
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003418:	f001 f86e 	bl	80044f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800341c:	f001 f83e 	bl	800449c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003426:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003428:	e011      	b.n	800344e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3310      	adds	r3, #16
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fc48 	bl	8003ccc <xTaskRemoveFromEventList>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003442:	f000 fd1b 	bl	8003e7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	3b01      	subs	r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800344e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003452:	2b00      	cmp	r3, #0
 8003454:	dce9      	bgt.n	800342a <prvUnlockQueue+0x60>
 8003456:	e000      	b.n	800345a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003458:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003462:	f001 f849 	bl	80044f8 <vPortExitCritical>
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003476:	f001 f811 	bl	800449c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003482:	2301      	movs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e001      	b.n	800348c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800348c:	f001 f834 	bl	80044f8 <vPortExitCritical>

	return xReturn;
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034a2:	f000 fffb 	bl	800449c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d102      	bne.n	80034b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034b2:	2301      	movs	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e001      	b.n	80034bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034bc:	f001 f81c 	bl	80044f8 <vPortExitCritical>

	return xReturn;
 80034c0:	68fb      	ldr	r3, [r7, #12]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b08e      	sub	sp, #56	; 0x38
 80034ce:	af04      	add	r7, sp, #16
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <xTaskCreateStatic+0x28>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	e7fe      	b.n	80034f0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <xTaskCreateStatic+0x42>
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	e7fe      	b.n	800350a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800350c:	2354      	movs	r3, #84	; 0x54
 800350e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b54      	cmp	r3, #84	; 0x54
 8003514:	d009      	beq.n	800352a <xTaskCreateStatic+0x60>
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e7fe      	b.n	8003528 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800352a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01e      	beq.n	8003570 <xTaskCreateStatic+0xa6>
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003540:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800354a:	2300      	movs	r3, #0
 800354c:	9303      	str	r3, [sp, #12]
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	9302      	str	r3, [sp, #8]
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f850 	bl	8003608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356a:	f000 f8d3 	bl	8003714 <prvAddNewTaskToReadyList>
 800356e:	e001      	b.n	8003574 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003574:	697b      	ldr	r3, [r7, #20]
	}
 8003576:	4618      	mov	r0, r3
 8003578:	3728      	adds	r7, #40	; 0x28
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800357e:	b580      	push	{r7, lr}
 8003580:	b08c      	sub	sp, #48	; 0x30
 8003582:	af04      	add	r7, sp, #16
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f89c 	bl	80046d0 <pvPortMalloc>
 8003598:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00e      	beq.n	80035be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035a0:	2054      	movs	r0, #84	; 0x54
 80035a2:	f001 f895 	bl	80046d0 <pvPortMalloc>
 80035a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
 80035b4:	e005      	b.n	80035c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035b6:	6978      	ldr	r0, [r7, #20]
 80035b8:	f001 f94c 	bl	8004854 <vPortFree>
 80035bc:	e001      	b.n	80035c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d017      	beq.n	80035f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9303      	str	r3, [sp, #12]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	9302      	str	r3, [sp, #8]
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f80e 	bl	8003608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035ec:	69f8      	ldr	r0, [r7, #28]
 80035ee:	f000 f891 	bl	8003714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e002      	b.n	80035fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003620:	3b01      	subs	r3, #1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <prvInitialiseNewTask+0x46>
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e7fe      	b.n	800364c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01f      	beq.n	8003694 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e012      	b.n	8003680 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	7819      	ldrb	r1, [r3, #0]
 8003662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	3334      	adds	r3, #52	; 0x34
 800366a:	460a      	mov	r2, r1
 800366c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4413      	add	r3, r2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3301      	adds	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	d9e9      	bls.n	800365a <prvInitialiseNewTask+0x52>
 8003686:	e000      	b.n	800368a <prvInitialiseNewTask+0x82>
			{
				break;
 8003688:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003692:	e003      	b.n	800369c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d901      	bls.n	80036a6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036a2:	2306      	movs	r3, #6
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	2200      	movs	r2, #0
 80036b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	3304      	adds	r3, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff f93f 	bl	8002940 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	3318      	adds	r3, #24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f93a 	bl	8002940 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	f1c3 0207 	rsb	r2, r3, #7
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	2200      	movs	r2, #0
 80036e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	68f9      	ldr	r1, [r7, #12]
 80036f4:	69b8      	ldr	r0, [r7, #24]
 80036f6:	f000 fda7 	bl	8004248 <pxPortInitialiseStack>
 80036fa:	4602      	mov	r2, r0
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800370c:	bf00      	nop
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800371c:	f000 febe 	bl	800449c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <prvAddNewTaskToReadyList+0xb8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <prvAddNewTaskToReadyList+0xb8>)
 8003728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <prvAddNewTaskToReadyList+0xbc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003732:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <prvAddNewTaskToReadyList+0xbc>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <prvAddNewTaskToReadyList+0xb8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d110      	bne.n	8003762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003740:	f000 fbc0 	bl	8003ec4 <prvInitialiseTaskLists>
 8003744:	e00d      	b.n	8003762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <prvAddNewTaskToReadyList+0xc0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <prvAddNewTaskToReadyList+0xbc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d802      	bhi.n	8003762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <prvAddNewTaskToReadyList+0xbc>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <prvAddNewTaskToReadyList+0xc4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <prvAddNewTaskToReadyList+0xc4>)
 800376a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <prvAddNewTaskToReadyList+0xc8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4313      	orrs	r3, r2
 800377a:	4a18      	ldr	r2, [pc, #96]	; (80037dc <prvAddNewTaskToReadyList+0xc8>)
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <prvAddNewTaskToReadyList+0xcc>)
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f7ff f8e0 	bl	800295a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800379a:	f000 fead 	bl	80044f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800379e:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <prvAddNewTaskToReadyList+0xc0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00e      	beq.n	80037c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <prvAddNewTaskToReadyList+0xbc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d207      	bcs.n	80037c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <prvAddNewTaskToReadyList+0xd0>)
 80037b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	200003e8 	.word	0x200003e8
 80037d0:	200002e8 	.word	0x200002e8
 80037d4:	200003f4 	.word	0x200003f4
 80037d8:	20000404 	.word	0x20000404
 80037dc:	200003f0 	.word	0x200003f0
 80037e0:	200002ec 	.word	0x200002ec
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <vTaskDelay+0x60>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <vTaskDelay+0x2e>
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	e7fe      	b.n	8003814 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003816:	f000 f879 	bl	800390c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800381a:	2100      	movs	r1, #0
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fcad 	bl	800417c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003822:	f000 f881 	bl	8003928 <xTaskResumeAll>
 8003826:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <vTaskDelay+0x64>)
 8003830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000410 	.word	0x20000410
 800384c:	e000ed04 	.word	0xe000ed04

08003850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800385e:	463a      	mov	r2, r7
 8003860:	1d39      	adds	r1, r7, #4
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fe8a 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	9202      	str	r2, [sp, #8]
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2300      	movs	r3, #0
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	460a      	mov	r2, r1
 800387e:	491d      	ldr	r1, [pc, #116]	; (80038f4 <vTaskStartScheduler+0xa4>)
 8003880:	481d      	ldr	r0, [pc, #116]	; (80038f8 <vTaskStartScheduler+0xa8>)
 8003882:	f7ff fe22 	bl	80034ca <xTaskCreateStatic>
 8003886:	4602      	mov	r2, r0
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <vTaskStartScheduler+0xac>)
 800388a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <vTaskStartScheduler+0xac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003894:	2301      	movs	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e001      	b.n	800389e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d115      	bne.n	80038d0 <vTaskStartScheduler+0x80>
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <vTaskStartScheduler+0xb0>)
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <vTaskStartScheduler+0xb4>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038c4:	4b10      	ldr	r3, [pc, #64]	; (8003908 <vTaskStartScheduler+0xb8>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038ca:	f000 fd49 	bl	8004360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038ce:	e00d      	b.n	80038ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d109      	bne.n	80038ec <vTaskStartScheduler+0x9c>
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e7fe      	b.n	80038ea <vTaskStartScheduler+0x9a>
}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	08005400 	.word	0x08005400
 80038f8:	08003e95 	.word	0x08003e95
 80038fc:	2000040c 	.word	0x2000040c
 8003900:	20000408 	.word	0x20000408
 8003904:	200003f4 	.word	0x200003f4
 8003908:	200003ec 	.word	0x200003ec

0800390c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <vTaskSuspendAll+0x18>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a03      	ldr	r2, [pc, #12]	; (8003924 <vTaskSuspendAll+0x18>)
 8003918:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	20000410 	.word	0x20000410

08003928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <xTaskResumeAll+0x114>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <xTaskResumeAll+0x2a>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	e7fe      	b.n	8003950 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003952:	f000 fda3 	bl	800449c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <xTaskResumeAll+0x114>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3b01      	subs	r3, #1
 800395c:	4a37      	ldr	r2, [pc, #220]	; (8003a3c <xTaskResumeAll+0x114>)
 800395e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003960:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <xTaskResumeAll+0x114>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d161      	bne.n	8003a2c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <xTaskResumeAll+0x118>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d05d      	beq.n	8003a2c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003970:	e02e      	b.n	80039d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003972:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <xTaskResumeAll+0x11c>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3318      	adds	r3, #24
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff f848 	bl	8002a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f843 	bl	8002a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	2201      	movs	r2, #1
 8003994:	409a      	lsls	r2, r3
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <xTaskResumeAll+0x120>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <xTaskResumeAll+0x120>)
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <xTaskResumeAll+0x124>)
 80039ae:	441a      	add	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f7fe ffcf 	bl	800295a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <xTaskResumeAll+0x128>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80039ca:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <xTaskResumeAll+0x12c>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039d0:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <xTaskResumeAll+0x11c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1cc      	bne.n	8003972 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039de:	f000 fb0b 	bl	8003ff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <xTaskResumeAll+0x130>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039ee:	f000 f837 	bl	8003a60 <xTaskIncrementTick>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <xTaskResumeAll+0x12c>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f1      	bne.n	80039ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <xTaskResumeAll+0x130>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <xTaskResumeAll+0x12c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <xTaskResumeAll+0x134>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a2c:	f000 fd64 	bl	80044f8 <vPortExitCritical>

	return xAlreadyYielded;
 8003a30:	68bb      	ldr	r3, [r7, #8]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000410 	.word	0x20000410
 8003a40:	200003e8 	.word	0x200003e8
 8003a44:	200003a8 	.word	0x200003a8
 8003a48:	200003f0 	.word	0x200003f0
 8003a4c:	200002ec 	.word	0x200002ec
 8003a50:	200002e8 	.word	0x200002e8
 8003a54:	200003fc 	.word	0x200003fc
 8003a58:	200003f8 	.word	0x200003f8
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <xTaskIncrementTick+0x144>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 8087 	bne.w	8003b82 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a74:	4b4c      	ldr	r3, [pc, #304]	; (8003ba8 <xTaskIncrementTick+0x148>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ba8 <xTaskIncrementTick+0x148>)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11f      	bne.n	8003ac8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a88:	4b48      	ldr	r3, [pc, #288]	; (8003bac <xTaskIncrementTick+0x14c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <xTaskIncrementTick+0x46>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	e7fe      	b.n	8003aa4 <xTaskIncrementTick+0x44>
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <xTaskIncrementTick+0x14c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <xTaskIncrementTick+0x150>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a3e      	ldr	r2, [pc, #248]	; (8003bac <xTaskIncrementTick+0x14c>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4a3e      	ldr	r2, [pc, #248]	; (8003bb0 <xTaskIncrementTick+0x150>)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b3e      	ldr	r3, [pc, #248]	; (8003bb4 <xTaskIncrementTick+0x154>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	4a3c      	ldr	r2, [pc, #240]	; (8003bb4 <xTaskIncrementTick+0x154>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	f000 fa98 	bl	8003ff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <xTaskIncrementTick+0x158>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d348      	bcc.n	8003b64 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <xTaskIncrementTick+0x14c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003adc:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <xTaskIncrementTick+0x158>)
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae2:	601a      	str	r2, [r3, #0]
					break;
 8003ae4:	e03e      	b.n	8003b64 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae6:	4b31      	ldr	r3, [pc, #196]	; (8003bac <xTaskIncrementTick+0x14c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d203      	bcs.n	8003b06 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003afe:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <xTaskIncrementTick+0x158>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b04:	e02e      	b.n	8003b64 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe ff82 	bl	8002a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe ff79 	bl	8002a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	2201      	movs	r2, #1
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <xTaskIncrementTick+0x15c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <xTaskIncrementTick+0x15c>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <xTaskIncrementTick+0x160>)
 8003b42:	441a      	add	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fe ff05 	bl	800295a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <xTaskIncrementTick+0x164>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3b9      	bcc.n	8003ad2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b62:	e7b6      	b.n	8003ad2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <xTaskIncrementTick+0x164>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	4915      	ldr	r1, [pc, #84]	; (8003bc0 <xTaskIncrementTick+0x160>)
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d907      	bls.n	8003b8c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e004      	b.n	8003b8c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <xTaskIncrementTick+0x168>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <xTaskIncrementTick+0x168>)
 8003b8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <xTaskIncrementTick+0x16c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b98:	697b      	ldr	r3, [r7, #20]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000410 	.word	0x20000410
 8003ba8:	200003ec 	.word	0x200003ec
 8003bac:	200003a0 	.word	0x200003a0
 8003bb0:	200003a4 	.word	0x200003a4
 8003bb4:	20000400 	.word	0x20000400
 8003bb8:	20000408 	.word	0x20000408
 8003bbc:	200003f0 	.word	0x200003f0
 8003bc0:	200002ec 	.word	0x200002ec
 8003bc4:	200002e8 	.word	0x200002e8
 8003bc8:	200003f8 	.word	0x200003f8
 8003bcc:	200003fc 	.word	0x200003fc

08003bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <vTaskSwitchContext+0xa0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bde:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <vTaskSwitchContext+0xa4>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003be4:	e03e      	b.n	8003c64 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <vTaskSwitchContext+0xa4>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bec:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <vTaskSwitchContext+0xa8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003bfa:	7afb      	ldrb	r3, [r7, #11]
 8003bfc:	f1c3 031f 	rsb	r3, r3, #31
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	491e      	ldr	r1, [pc, #120]	; (8003c7c <vTaskSwitchContext+0xac>)
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	607b      	str	r3, [r7, #4]
 8003c28:	e7fe      	b.n	8003c28 <vTaskSwitchContext+0x58>
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <vTaskSwitchContext+0xac>)
 8003c36:	4413      	add	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d104      	bne.n	8003c5a <vTaskSwitchContext+0x8a>
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <vTaskSwitchContext+0xb0>)
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	20000410 	.word	0x20000410
 8003c74:	200003fc 	.word	0x200003fc
 8003c78:	200003f0 	.word	0x200003f0
 8003c7c:	200002ec 	.word	0x200002ec
 8003c80:	200002e8 	.word	0x200002e8

08003c84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <vTaskPlaceOnEventList+0x24>
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e7fe      	b.n	8003ca6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <vTaskPlaceOnEventList+0x44>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3318      	adds	r3, #24
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe fe76 	bl	80029a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f000 fa5f 	bl	800417c <prvAddCurrentTaskToDelayedList>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200002e8 	.word	0x200002e8

08003ccc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <xTaskRemoveFromEventList+0x2a>
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e7fe      	b.n	8003cf4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fe8a 	bl	8002a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <xTaskRemoveFromEventList+0xac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11c      	bne.n	8003d42 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe fe81 	bl	8002a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	2201      	movs	r2, #1
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <xTaskRemoveFromEventList+0xb0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <xTaskRemoveFromEventList+0xb0>)
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <xTaskRemoveFromEventList+0xb4>)
 8003d32:	441a      	add	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7fe fe0d 	bl	800295a <vListInsertEnd>
 8003d40:	e005      	b.n	8003d4e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3318      	adds	r3, #24
 8003d46:	4619      	mov	r1, r3
 8003d48:	480e      	ldr	r0, [pc, #56]	; (8003d84 <xTaskRemoveFromEventList+0xb8>)
 8003d4a:	f7fe fe06 	bl	800295a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <xTaskRemoveFromEventList+0xbc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d905      	bls.n	8003d68 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <xTaskRemoveFromEventList+0xc0>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e001      	b.n	8003d6c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d6c:	697b      	ldr	r3, [r7, #20]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000410 	.word	0x20000410
 8003d7c:	200003f0 	.word	0x200003f0
 8003d80:	200002ec 	.word	0x200002ec
 8003d84:	200003a8 	.word	0x200003a8
 8003d88:	200002e8 	.word	0x200002e8
 8003d8c:	200003fc 	.word	0x200003fc

08003d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <vTaskInternalSetTimeOutState+0x24>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <vTaskInternalSetTimeOutState+0x28>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	605a      	str	r2, [r3, #4]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	20000400 	.word	0x20000400
 8003db8:	200003ec 	.word	0x200003ec

08003dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <xTaskCheckForTimeOut+0x24>
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e7fe      	b.n	8003dde <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <xTaskCheckForTimeOut+0x3e>
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e7fe      	b.n	8003df8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003dfa:	f000 fb4f 	bl	800449c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <xTaskCheckForTimeOut+0xb8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d102      	bne.n	8003e1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	e023      	b.n	8003e66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <xTaskCheckForTimeOut+0xbc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d007      	beq.n	8003e3a <xTaskCheckForTimeOut+0x7e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	e015      	b.n	8003e66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d20b      	bcs.n	8003e5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff9d 	bl	8003d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e004      	b.n	8003e66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e66:	f000 fb47 	bl	80044f8 <vPortExitCritical>

	return xReturn;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200003ec 	.word	0x200003ec
 8003e78:	20000400 	.word	0x20000400

08003e7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <vTaskMissedYield+0x14>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	200003fc 	.word	0x200003fc

08003e94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e9c:	f000 f852 	bl	8003f44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <prvIdleTask+0x28>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d9f9      	bls.n	8003e9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <prvIdleTask+0x2c>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003eb8:	e7f0      	b.n	8003e9c <prvIdleTask+0x8>
 8003eba:	bf00      	nop
 8003ebc:	200002ec 	.word	0x200002ec
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eca:	2300      	movs	r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	e00c      	b.n	8003eea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <prvInitialiseTaskLists+0x60>)
 8003edc:	4413      	add	r3, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fd0e 	bl	8002900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d9ef      	bls.n	8003ed0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ef0:	480d      	ldr	r0, [pc, #52]	; (8003f28 <prvInitialiseTaskLists+0x64>)
 8003ef2:	f7fe fd05 	bl	8002900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ef6:	480d      	ldr	r0, [pc, #52]	; (8003f2c <prvInitialiseTaskLists+0x68>)
 8003ef8:	f7fe fd02 	bl	8002900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003efc:	480c      	ldr	r0, [pc, #48]	; (8003f30 <prvInitialiseTaskLists+0x6c>)
 8003efe:	f7fe fcff 	bl	8002900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f02:	480c      	ldr	r0, [pc, #48]	; (8003f34 <prvInitialiseTaskLists+0x70>)
 8003f04:	f7fe fcfc 	bl	8002900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f08:	480b      	ldr	r0, [pc, #44]	; (8003f38 <prvInitialiseTaskLists+0x74>)
 8003f0a:	f7fe fcf9 	bl	8002900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <prvInitialiseTaskLists+0x78>)
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <prvInitialiseTaskLists+0x64>)
 8003f12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <prvInitialiseTaskLists+0x7c>)
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <prvInitialiseTaskLists+0x68>)
 8003f18:	601a      	str	r2, [r3, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200002ec 	.word	0x200002ec
 8003f28:	20000378 	.word	0x20000378
 8003f2c:	2000038c 	.word	0x2000038c
 8003f30:	200003a8 	.word	0x200003a8
 8003f34:	200003bc 	.word	0x200003bc
 8003f38:	200003d4 	.word	0x200003d4
 8003f3c:	200003a0 	.word	0x200003a0
 8003f40:	200003a4 	.word	0x200003a4

08003f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f4a:	e019      	b.n	8003f80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f4c:	f000 faa6 	bl	800449c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <prvCheckTasksWaitingTermination+0x4c>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe fd59 	bl	8002a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <prvCheckTasksWaitingTermination+0x50>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <prvCheckTasksWaitingTermination+0x50>)
 8003f6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvCheckTasksWaitingTermination+0x54>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <prvCheckTasksWaitingTermination+0x54>)
 8003f74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f76:	f000 fabf 	bl	80044f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f80e 	bl	8003f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <prvCheckTasksWaitingTermination+0x54>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e1      	bne.n	8003f4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	200003bc 	.word	0x200003bc
 8003f94:	200003e8 	.word	0x200003e8
 8003f98:	200003d0 	.word	0x200003d0

08003f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d108      	bne.n	8003fc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fc4e 	bl	8004854 <vPortFree>
				vPortFree( pxTCB );
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fc4b 	bl	8004854 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fbe:	e017      	b.n	8003ff0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d103      	bne.n	8003fd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fc42 	bl	8004854 <vPortFree>
	}
 8003fd0:	e00e      	b.n	8003ff0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d009      	beq.n	8003ff0 <prvDeleteTCB+0x54>
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	e7fe      	b.n	8003fee <prvDeleteTCB+0x52>
	}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <prvResetNextTaskUnblockTime+0x38>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <prvResetNextTaskUnblockTime+0x3c>)
 800400a:	f04f 32ff 	mov.w	r2, #4294967295
 800400e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004010:	e008      	b.n	8004024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <prvResetNextTaskUnblockTime+0x38>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <prvResetNextTaskUnblockTime+0x3c>)
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	200003a0 	.word	0x200003a0
 8004034:	20000408 	.word	0x20000408

08004038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <xTaskGetSchedulerState+0x34>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004046:	2301      	movs	r3, #1
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	e008      	b.n	800405e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <xTaskGetSchedulerState+0x38>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004054:	2302      	movs	r3, #2
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	e001      	b.n	800405e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800405e:	687b      	ldr	r3, [r7, #4]
	}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	200003f4 	.word	0x200003f4
 8004070:	20000410 	.word	0x20000410

08004074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06c      	beq.n	8004164 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800408a:	4b39      	ldr	r3, [pc, #228]	; (8004170 <xTaskPriorityDisinherit+0xfc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d009      	beq.n	80040a8 <xTaskPriorityDisinherit+0x34>
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e7fe      	b.n	80040a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <xTaskPriorityDisinherit+0x50>
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	e7fe      	b.n	80040c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d044      	beq.n	8004164 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d140      	bne.n	8004164 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fc94 	bl	8002a14 <uxListRemove>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d115      	bne.n	800411e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f6:	491f      	ldr	r1, [pc, #124]	; (8004174 <xTaskPriorityDisinherit+0x100>)
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xTaskPriorityDisinherit+0xaa>
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	2201      	movs	r2, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43da      	mvns	r2, r3
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <xTaskPriorityDisinherit+0x104>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4013      	ands	r3, r2
 800411a:	4a17      	ldr	r2, [pc, #92]	; (8004178 <xTaskPriorityDisinherit+0x104>)
 800411c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	f1c3 0207 	rsb	r2, r3, #7
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	2201      	movs	r2, #1
 8004138:	409a      	lsls	r2, r3
 800413a:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <xTaskPriorityDisinherit+0x104>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <xTaskPriorityDisinherit+0x104>)
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4a08      	ldr	r2, [pc, #32]	; (8004174 <xTaskPriorityDisinherit+0x100>)
 8004152:	441a      	add	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f7fe fbfd 	bl	800295a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004160:	2301      	movs	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004164:	697b      	ldr	r3, [r7, #20]
	}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200002e8 	.word	0x200002e8
 8004174:	200002ec 	.word	0x200002ec
 8004178:	200003f0 	.word	0x200003f0

0800417c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800418c:	4b28      	ldr	r3, [pc, #160]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fc3e 	bl	8002a14 <uxListRemove>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	2201      	movs	r2, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4013      	ands	r3, r2
 80041b2:	4a20      	ldr	r2, [pc, #128]	; (8004234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d10a      	bne.n	80041d4 <prvAddCurrentTaskToDelayedList+0x58>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	481a      	ldr	r0, [pc, #104]	; (8004238 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041ce:	f7fe fbc4 	bl	800295a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041d2:	e026      	b.n	8004222 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d209      	bcs.n	8004200 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <prvAddCurrentTaskToDelayedList+0xc0>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7fe fbd2 	bl	80029a2 <vListInsert>
}
 80041fe:	e010      	b.n	8004222 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3304      	adds	r3, #4
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f7fe fbc8 	bl	80029a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	d202      	bcs.n	8004222 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800421c:	4a09      	ldr	r2, [pc, #36]	; (8004244 <prvAddCurrentTaskToDelayedList+0xc8>)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6013      	str	r3, [r2, #0]
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200003ec 	.word	0x200003ec
 8004230:	200002e8 	.word	0x200002e8
 8004234:	200003f0 	.word	0x200003f0
 8004238:	200003d4 	.word	0x200003d4
 800423c:	200003a4 	.word	0x200003a4
 8004240:	200003a0 	.word	0x200003a0
 8004244:	20000408 	.word	0x20000408

08004248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b04      	subs	r3, #4
 8004258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b04      	subs	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f023 0201 	bic.w	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b04      	subs	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004278:	4a0c      	ldr	r2, [pc, #48]	; (80042ac <pxPortInitialiseStack+0x64>)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b14      	subs	r3, #20
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b04      	subs	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f06f 0202 	mvn.w	r2, #2
 8004296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3b20      	subs	r3, #32
 800429c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	080042b1 	.word	0x080042b1

080042b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <prvTaskExitError+0x50>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d009      	beq.n	80042d8 <prvTaskExitError+0x28>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e7fe      	b.n	80042d6 <prvTaskExitError+0x26>
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042ea:	bf00      	nop
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0fc      	beq.n	80042ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	2000000c 	.word	0x2000000c
	...

08004310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <pxCurrentTCBConst2>)
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	6808      	ldr	r0, [r1, #0]
 8004316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431a:	f380 8809 	msr	PSP, r0
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f380 8811 	msr	BASEPRI, r0
 800432a:	4770      	bx	lr
 800432c:	f3af 8000 	nop.w

08004330 <pxCurrentTCBConst2>:
 8004330:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop

08004338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004338:	4808      	ldr	r0, [pc, #32]	; (800435c <prvPortStartFirstTask+0x24>)
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	6800      	ldr	r0, [r0, #0]
 800433e:	f380 8808 	msr	MSP, r0
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f380 8814 	msr	CONTROL, r0
 800434a:	b662      	cpsie	i
 800434c:	b661      	cpsie	f
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	df00      	svc	0
 8004358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800435a:	bf00      	nop
 800435c:	e000ed08 	.word	0xe000ed08

08004360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004366:	4b44      	ldr	r3, [pc, #272]	; (8004478 <xPortStartScheduler+0x118>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a44      	ldr	r2, [pc, #272]	; (800447c <xPortStartScheduler+0x11c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d109      	bne.n	8004384 <xPortStartScheduler+0x24>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	e7fe      	b.n	8004382 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004384:	4b3c      	ldr	r3, [pc, #240]	; (8004478 <xPortStartScheduler+0x118>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a3d      	ldr	r2, [pc, #244]	; (8004480 <xPortStartScheduler+0x120>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d109      	bne.n	80043a2 <xPortStartScheduler+0x42>
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e7fe      	b.n	80043a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <xPortStartScheduler+0x124>)
 80043a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	22ff      	movs	r2, #255	; 0xff
 80043b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4b30      	ldr	r3, [pc, #192]	; (8004488 <xPortStartScheduler+0x128>)
 80043c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <xPortStartScheduler+0x12c>)
 80043cc:	2207      	movs	r2, #7
 80043ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043d0:	e009      	b.n	80043e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80043d2:	4b2e      	ldr	r3, [pc, #184]	; (800448c <xPortStartScheduler+0x12c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	4a2c      	ldr	r2, [pc, #176]	; (800448c <xPortStartScheduler+0x12c>)
 80043da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b80      	cmp	r3, #128	; 0x80
 80043f0:	d0ef      	beq.n	80043d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043f2:	4b26      	ldr	r3, [pc, #152]	; (800448c <xPortStartScheduler+0x12c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f1c3 0307 	rsb	r3, r3, #7
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d009      	beq.n	8004412 <xPortStartScheduler+0xb2>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	e7fe      	b.n	8004410 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <xPortStartScheduler+0x12c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	4a1c      	ldr	r2, [pc, #112]	; (800448c <xPortStartScheduler+0x12c>)
 800441a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <xPortStartScheduler+0x12c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004424:	4a19      	ldr	r2, [pc, #100]	; (800448c <xPortStartScheduler+0x12c>)
 8004426:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <xPortStartScheduler+0x130>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a16      	ldr	r2, [pc, #88]	; (8004490 <xPortStartScheduler+0x130>)
 8004436:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800443a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800443c:	4b14      	ldr	r3, [pc, #80]	; (8004490 <xPortStartScheduler+0x130>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <xPortStartScheduler+0x130>)
 8004442:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004446:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004448:	f000 f8d6 	bl	80045f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800444c:	4b11      	ldr	r3, [pc, #68]	; (8004494 <xPortStartScheduler+0x134>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004452:	f000 f8f5 	bl	8004640 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <xPortStartScheduler+0x138>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <xPortStartScheduler+0x138>)
 800445c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004460:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004462:	f7ff ff69 	bl	8004338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004466:	f7ff fbb3 	bl	8003bd0 <vTaskSwitchContext>
	prvTaskExitError();
 800446a:	f7ff ff21 	bl	80042b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	e000ed00 	.word	0xe000ed00
 800447c:	410fc271 	.word	0x410fc271
 8004480:	410fc270 	.word	0x410fc270
 8004484:	e000e400 	.word	0xe000e400
 8004488:	20000414 	.word	0x20000414
 800448c:	20000418 	.word	0x20000418
 8004490:	e000ed20 	.word	0xe000ed20
 8004494:	2000000c 	.word	0x2000000c
 8004498:	e000ef34 	.word	0xe000ef34

0800449c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <vPortEnterCritical+0x54>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <vPortEnterCritical+0x54>)
 80044bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <vPortEnterCritical+0x54>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10e      	bne.n	80044e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <vPortEnterCritical+0x58>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <vPortEnterCritical+0x48>
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	e7fe      	b.n	80044e2 <vPortEnterCritical+0x46>
	}
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	2000000c 	.word	0x2000000c
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <vPortExitCritical+0x4c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <vPortExitCritical+0x22>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	e7fe      	b.n	8004518 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <vPortExitCritical+0x4c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <vPortExitCritical+0x4c>)
 8004522:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <vPortExitCritical+0x4c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <vPortExitCritical+0x3e>
 800452c:	2300      	movs	r3, #0
 800452e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	2000000c 	.word	0x2000000c
	...

08004550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004550:	f3ef 8009 	mrs	r0, PSP
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <pxCurrentTCBConst>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	f01e 0f10 	tst.w	lr, #16
 8004560:	bf08      	it	eq
 8004562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	6010      	str	r0, [r2, #0]
 800456c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004574:	f380 8811 	msr	BASEPRI, r0
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f7ff fb26 	bl	8003bd0 <vTaskSwitchContext>
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f380 8811 	msr	BASEPRI, r0
 800458c:	bc09      	pop	{r0, r3}
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	6808      	ldr	r0, [r1, #0]
 8004592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004596:	f01e 0f10 	tst.w	lr, #16
 800459a:	bf08      	it	eq
 800459c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045a0:	f380 8809 	msr	PSP, r0
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w

080045b0 <pxCurrentTCBConst>:
 80045b0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045d0:	f7ff fa46 	bl	8003a60 <xTaskIncrementTick>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <xPortSysTickHandler+0x3c>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <vPortSetupTimerInterrupt+0x34>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <vPortSetupTimerInterrupt+0x38>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <vPortSetupTimerInterrupt+0x3c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <vPortSetupTimerInterrupt+0x40>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <vPortSetupTimerInterrupt+0x44>)
 8004616:	3b01      	subs	r3, #1
 8004618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800461a:	4b04      	ldr	r3, [pc, #16]	; (800462c <vPortSetupTimerInterrupt+0x34>)
 800461c:	2207      	movs	r2, #7
 800461e:	601a      	str	r2, [r3, #0]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000e010 	.word	0xe000e010
 8004630:	e000e018 	.word	0xe000e018
 8004634:	20000000 	.word	0x20000000
 8004638:	10624dd3 	.word	0x10624dd3
 800463c:	e000e014 	.word	0xe000e014

08004640 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004640:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004650 <vPortEnableVFP+0x10>
 8004644:	6801      	ldr	r1, [r0, #0]
 8004646:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800464a:	6001      	str	r1, [r0, #0]
 800464c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800464e:	bf00      	nop
 8004650:	e000ed88 	.word	0xe000ed88

08004654 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800465a:	f3ef 8305 	mrs	r3, IPSR
 800465e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	d913      	bls.n	800468e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <vPortValidateInterruptPriority+0x6c>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <vPortValidateInterruptPriority+0x70>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	7afa      	ldrb	r2, [r7, #11]
 8004676:	429a      	cmp	r2, r3
 8004678:	d209      	bcs.n	800468e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	e7fe      	b.n	800468c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <vPortValidateInterruptPriority+0x74>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <vPortValidateInterruptPriority+0x78>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d909      	bls.n	80046b2 <vPortValidateInterruptPriority+0x5e>
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	e7fe      	b.n	80046b0 <vPortValidateInterruptPriority+0x5c>
	}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	e000e3f0 	.word	0xe000e3f0
 80046c4:	20000414 	.word	0x20000414
 80046c8:	e000ed0c 	.word	0xe000ed0c
 80046cc:	20000418 	.word	0x20000418

080046d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046dc:	f7ff f916 	bl	800390c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046e0:	4b57      	ldr	r3, [pc, #348]	; (8004840 <pvPortMalloc+0x170>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046e8:	f000 f90c 	bl	8004904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046ec:	4b55      	ldr	r3, [pc, #340]	; (8004844 <pvPortMalloc+0x174>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 808c 	bne.w	8004812 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01c      	beq.n	800473a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004700:	2208      	movs	r2, #8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f023 0307 	bic.w	r3, r3, #7
 8004718:	3308      	adds	r3, #8
 800471a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <pvPortMalloc+0x6a>
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e7fe      	b.n	8004738 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d068      	beq.n	8004812 <pvPortMalloc+0x142>
 8004740:	4b41      	ldr	r3, [pc, #260]	; (8004848 <pvPortMalloc+0x178>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d863      	bhi.n	8004812 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800474a:	4b40      	ldr	r3, [pc, #256]	; (800484c <pvPortMalloc+0x17c>)
 800474c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <pvPortMalloc+0x17c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004754:	e004      	b.n	8004760 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d903      	bls.n	8004772 <pvPortMalloc+0xa2>
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f1      	bne.n	8004756 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004772:	4b33      	ldr	r3, [pc, #204]	; (8004840 <pvPortMalloc+0x170>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	429a      	cmp	r2, r3
 800477a:	d04a      	beq.n	8004812 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	4413      	add	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	1ad2      	subs	r2, r2, r3
 8004796:	2308      	movs	r3, #8
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	429a      	cmp	r2, r3
 800479c:	d91e      	bls.n	80047dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <pvPortMalloc+0xf4>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e7fe      	b.n	80047c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad2      	subs	r2, r2, r3
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047d6:	69b8      	ldr	r0, [r7, #24]
 80047d8:	f000 f8f6 	bl	80049c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <pvPortMalloc+0x178>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	4a18      	ldr	r2, [pc, #96]	; (8004848 <pvPortMalloc+0x178>)
 80047e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <pvPortMalloc+0x178>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <pvPortMalloc+0x180>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d203      	bcs.n	80047fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <pvPortMalloc+0x178>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <pvPortMalloc+0x180>)
 80047fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <pvPortMalloc+0x174>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	431a      	orrs	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004812:	f7ff f889 	bl	8003928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <pvPortMalloc+0x164>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e7fe      	b.n	8004832 <pvPortMalloc+0x162>
	return pvReturn;
 8004834:	69fb      	ldr	r3, [r7, #28]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3728      	adds	r7, #40	; 0x28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20004024 	.word	0x20004024
 8004844:	20004030 	.word	0x20004030
 8004848:	20004028 	.word	0x20004028
 800484c:	2000401c 	.word	0x2000401c
 8004850:	2000402c 	.word	0x2000402c

08004854 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d046      	beq.n	80048f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004866:	2308      	movs	r3, #8
 8004868:	425b      	negs	r3, r3
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4413      	add	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <vPortFree+0xa8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <vPortFree+0x42>
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e7fe      	b.n	8004894 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <vPortFree+0x5e>
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	e7fe      	b.n	80048b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <vPortFree+0xa8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d019      	beq.n	80048f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d115      	bne.n	80048f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <vPortFree+0xa8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048d8:	f7ff f818 	bl	800390c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <vPortFree+0xac>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	4a06      	ldr	r2, [pc, #24]	; (8004900 <vPortFree+0xac>)
 80048e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048ea:	6938      	ldr	r0, [r7, #16]
 80048ec:	f000 f86c 	bl	80049c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80048f0:	f7ff f81a 	bl	8003928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048f4:	bf00      	nop
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20004030 	.word	0x20004030
 8004900:	20004028 	.word	0x20004028

08004904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800490a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800490e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004910:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <prvHeapInit+0xac>)
 8004912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3307      	adds	r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <prvHeapInit+0xac>)
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <prvHeapInit+0xb0>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <prvHeapInit+0xb0>)
 8004944:	2200      	movs	r2, #0
 8004946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004950:	2208      	movs	r2, #8
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <prvHeapInit+0xb4>)
 8004964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <prvHeapInit+0xb4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <prvHeapInit+0xb4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <prvHeapInit+0xb4>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <prvHeapInit+0xb8>)
 8004992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <prvHeapInit+0xbc>)
 800499a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <prvHeapInit+0xc0>)
 800499e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	2000041c 	.word	0x2000041c
 80049b4:	2000401c 	.word	0x2000401c
 80049b8:	20004024 	.word	0x20004024
 80049bc:	2000402c 	.word	0x2000402c
 80049c0:	20004028 	.word	0x20004028
 80049c4:	20004030 	.word	0x20004030

080049c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049d0:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <prvInsertBlockIntoFreeList+0xac>)
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e002      	b.n	80049dc <prvInsertBlockIntoFreeList+0x14>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d8f7      	bhi.n	80049d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4413      	add	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d108      	bne.n	8004a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d118      	bne.n	8004a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <prvInsertBlockIntoFreeList+0xb0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d00d      	beq.n	8004a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	441a      	add	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e008      	b.n	8004a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <prvInsertBlockIntoFreeList+0xb0>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e003      	b.n	8004a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d002      	beq.n	8004a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000401c 	.word	0x2000401c
 8004a78:	20004024 	.word	0x20004024

08004a7c <__errno>:
 8004a7c:	4b01      	ldr	r3, [pc, #4]	; (8004a84 <__errno+0x8>)
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000010 	.word	0x20000010

08004a88 <__libc_init_array>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4e0d      	ldr	r6, [pc, #52]	; (8004ac0 <__libc_init_array+0x38>)
 8004a8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ac4 <__libc_init_array+0x3c>)
 8004a8e:	1ba4      	subs	r4, r4, r6
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	2500      	movs	r5, #0
 8004a94:	42a5      	cmp	r5, r4
 8004a96:	d109      	bne.n	8004aac <__libc_init_array+0x24>
 8004a98:	4e0b      	ldr	r6, [pc, #44]	; (8004ac8 <__libc_init_array+0x40>)
 8004a9a:	4c0c      	ldr	r4, [pc, #48]	; (8004acc <__libc_init_array+0x44>)
 8004a9c:	f000 fc28 	bl	80052f0 <_init>
 8004aa0:	1ba4      	subs	r4, r4, r6
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	2500      	movs	r5, #0
 8004aa6:	42a5      	cmp	r5, r4
 8004aa8:	d105      	bne.n	8004ab6 <__libc_init_array+0x2e>
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ab0:	4798      	blx	r3
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	e7ee      	b.n	8004a94 <__libc_init_array+0xc>
 8004ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aba:	4798      	blx	r3
 8004abc:	3501      	adds	r5, #1
 8004abe:	e7f2      	b.n	8004aa6 <__libc_init_array+0x1e>
 8004ac0:	0800546c 	.word	0x0800546c
 8004ac4:	0800546c 	.word	0x0800546c
 8004ac8:	0800546c 	.word	0x0800546c
 8004acc:	08005470 	.word	0x08005470

08004ad0 <memcpy>:
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	1e43      	subs	r3, r0, #1
 8004ad4:	440a      	add	r2, r1
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	d100      	bne.n	8004adc <memcpy+0xc>
 8004ada:	bd10      	pop	{r4, pc}
 8004adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ae4:	e7f7      	b.n	8004ad6 <memcpy+0x6>

08004ae6 <memset>:
 8004ae6:	4402      	add	r2, r0
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d100      	bne.n	8004af0 <memset+0xa>
 8004aee:	4770      	bx	lr
 8004af0:	f803 1b01 	strb.w	r1, [r3], #1
 8004af4:	e7f9      	b.n	8004aea <memset+0x4>
	...

08004af8 <siprintf>:
 8004af8:	b40e      	push	{r1, r2, r3}
 8004afa:	b500      	push	{lr}
 8004afc:	b09c      	sub	sp, #112	; 0x70
 8004afe:	ab1d      	add	r3, sp, #116	; 0x74
 8004b00:	9002      	str	r0, [sp, #8]
 8004b02:	9006      	str	r0, [sp, #24]
 8004b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b08:	4809      	ldr	r0, [pc, #36]	; (8004b30 <siprintf+0x38>)
 8004b0a:	9107      	str	r1, [sp, #28]
 8004b0c:	9104      	str	r1, [sp, #16]
 8004b0e:	4909      	ldr	r1, [pc, #36]	; (8004b34 <siprintf+0x3c>)
 8004b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b14:	9105      	str	r1, [sp, #20]
 8004b16:	6800      	ldr	r0, [r0, #0]
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	a902      	add	r1, sp, #8
 8004b1c:	f000 f866 	bl	8004bec <_svfiprintf_r>
 8004b20:	9b02      	ldr	r3, [sp, #8]
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	b01c      	add	sp, #112	; 0x70
 8004b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b2c:	b003      	add	sp, #12
 8004b2e:	4770      	bx	lr
 8004b30:	20000010 	.word	0x20000010
 8004b34:	ffff0208 	.word	0xffff0208

08004b38 <__ssputs_r>:
 8004b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	688e      	ldr	r6, [r1, #8]
 8004b3e:	429e      	cmp	r6, r3
 8004b40:	4682      	mov	sl, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4690      	mov	r8, r2
 8004b46:	4699      	mov	r9, r3
 8004b48:	d837      	bhi.n	8004bba <__ssputs_r+0x82>
 8004b4a:	898a      	ldrh	r2, [r1, #12]
 8004b4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b50:	d031      	beq.n	8004bb6 <__ssputs_r+0x7e>
 8004b52:	6825      	ldr	r5, [r4, #0]
 8004b54:	6909      	ldr	r1, [r1, #16]
 8004b56:	1a6f      	subs	r7, r5, r1
 8004b58:	6965      	ldr	r5, [r4, #20]
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b60:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b64:	f109 0301 	add.w	r3, r9, #1
 8004b68:	443b      	add	r3, r7
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	bf38      	it	cc
 8004b6e:	461d      	movcc	r5, r3
 8004b70:	0553      	lsls	r3, r2, #21
 8004b72:	d530      	bpl.n	8004bd6 <__ssputs_r+0x9e>
 8004b74:	4629      	mov	r1, r5
 8004b76:	f000 fb21 	bl	80051bc <_malloc_r>
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	b950      	cbnz	r0, 8004b94 <__ssputs_r+0x5c>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	f8ca 3000 	str.w	r3, [sl]
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	463a      	mov	r2, r7
 8004b96:	6921      	ldr	r1, [r4, #16]
 8004b98:	f7ff ff9a 	bl	8004ad0 <memcpy>
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	6126      	str	r6, [r4, #16]
 8004baa:	6165      	str	r5, [r4, #20]
 8004bac:	443e      	add	r6, r7
 8004bae:	1bed      	subs	r5, r5, r7
 8004bb0:	6026      	str	r6, [r4, #0]
 8004bb2:	60a5      	str	r5, [r4, #8]
 8004bb4:	464e      	mov	r6, r9
 8004bb6:	454e      	cmp	r6, r9
 8004bb8:	d900      	bls.n	8004bbc <__ssputs_r+0x84>
 8004bba:	464e      	mov	r6, r9
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	f000 fa93 	bl	80050ec <memmove>
 8004bc6:	68a3      	ldr	r3, [r4, #8]
 8004bc8:	1b9b      	subs	r3, r3, r6
 8004bca:	60a3      	str	r3, [r4, #8]
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	441e      	add	r6, r3
 8004bd0:	6026      	str	r6, [r4, #0]
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e7dc      	b.n	8004b90 <__ssputs_r+0x58>
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	f000 fb4a 	bl	8005270 <_realloc_r>
 8004bdc:	4606      	mov	r6, r0
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d1e2      	bne.n	8004ba8 <__ssputs_r+0x70>
 8004be2:	6921      	ldr	r1, [r4, #16]
 8004be4:	4650      	mov	r0, sl
 8004be6:	f000 fa9b 	bl	8005120 <_free_r>
 8004bea:	e7c8      	b.n	8004b7e <__ssputs_r+0x46>

08004bec <_svfiprintf_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	461d      	mov	r5, r3
 8004bf2:	898b      	ldrh	r3, [r1, #12]
 8004bf4:	061f      	lsls	r7, r3, #24
 8004bf6:	b09d      	sub	sp, #116	; 0x74
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	d50f      	bpl.n	8004c20 <_svfiprintf_r+0x34>
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	b96b      	cbnz	r3, 8004c20 <_svfiprintf_r+0x34>
 8004c04:	2140      	movs	r1, #64	; 0x40
 8004c06:	f000 fad9 	bl	80051bc <_malloc_r>
 8004c0a:	6020      	str	r0, [r4, #0]
 8004c0c:	6120      	str	r0, [r4, #16]
 8004c0e:	b928      	cbnz	r0, 8004c1c <_svfiprintf_r+0x30>
 8004c10:	230c      	movs	r3, #12
 8004c12:	f8c8 3000 	str.w	r3, [r8]
 8004c16:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1a:	e0c8      	b.n	8004dae <_svfiprintf_r+0x1c2>
 8004c1c:	2340      	movs	r3, #64	; 0x40
 8004c1e:	6163      	str	r3, [r4, #20]
 8004c20:	2300      	movs	r3, #0
 8004c22:	9309      	str	r3, [sp, #36]	; 0x24
 8004c24:	2320      	movs	r3, #32
 8004c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c2a:	2330      	movs	r3, #48	; 0x30
 8004c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c30:	9503      	str	r5, [sp, #12]
 8004c32:	f04f 0b01 	mov.w	fp, #1
 8004c36:	4637      	mov	r7, r6
 8004c38:	463d      	mov	r5, r7
 8004c3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c3e:	b10b      	cbz	r3, 8004c44 <_svfiprintf_r+0x58>
 8004c40:	2b25      	cmp	r3, #37	; 0x25
 8004c42:	d13e      	bne.n	8004cc2 <_svfiprintf_r+0xd6>
 8004c44:	ebb7 0a06 	subs.w	sl, r7, r6
 8004c48:	d00b      	beq.n	8004c62 <_svfiprintf_r+0x76>
 8004c4a:	4653      	mov	r3, sl
 8004c4c:	4632      	mov	r2, r6
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4640      	mov	r0, r8
 8004c52:	f7ff ff71 	bl	8004b38 <__ssputs_r>
 8004c56:	3001      	adds	r0, #1
 8004c58:	f000 80a4 	beq.w	8004da4 <_svfiprintf_r+0x1b8>
 8004c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5e:	4453      	add	r3, sl
 8004c60:	9309      	str	r3, [sp, #36]	; 0x24
 8004c62:	783b      	ldrb	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 809d 	beq.w	8004da4 <_svfiprintf_r+0x1b8>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	9307      	str	r3, [sp, #28]
 8004c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c7e:	462f      	mov	r7, r5
 8004c80:	2205      	movs	r2, #5
 8004c82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c86:	4850      	ldr	r0, [pc, #320]	; (8004dc8 <_svfiprintf_r+0x1dc>)
 8004c88:	f7fb faaa 	bl	80001e0 <memchr>
 8004c8c:	9b04      	ldr	r3, [sp, #16]
 8004c8e:	b9d0      	cbnz	r0, 8004cc6 <_svfiprintf_r+0xda>
 8004c90:	06d9      	lsls	r1, r3, #27
 8004c92:	bf44      	itt	mi
 8004c94:	2220      	movmi	r2, #32
 8004c96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c9a:	071a      	lsls	r2, r3, #28
 8004c9c:	bf44      	itt	mi
 8004c9e:	222b      	movmi	r2, #43	; 0x2b
 8004ca0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ca4:	782a      	ldrb	r2, [r5, #0]
 8004ca6:	2a2a      	cmp	r2, #42	; 0x2a
 8004ca8:	d015      	beq.n	8004cd6 <_svfiprintf_r+0xea>
 8004caa:	9a07      	ldr	r2, [sp, #28]
 8004cac:	462f      	mov	r7, r5
 8004cae:	2000      	movs	r0, #0
 8004cb0:	250a      	movs	r5, #10
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb8:	3b30      	subs	r3, #48	; 0x30
 8004cba:	2b09      	cmp	r3, #9
 8004cbc:	d94d      	bls.n	8004d5a <_svfiprintf_r+0x16e>
 8004cbe:	b1b8      	cbz	r0, 8004cf0 <_svfiprintf_r+0x104>
 8004cc0:	e00f      	b.n	8004ce2 <_svfiprintf_r+0xf6>
 8004cc2:	462f      	mov	r7, r5
 8004cc4:	e7b8      	b.n	8004c38 <_svfiprintf_r+0x4c>
 8004cc6:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <_svfiprintf_r+0x1dc>)
 8004cc8:	1a80      	subs	r0, r0, r2
 8004cca:	fa0b f000 	lsl.w	r0, fp, r0
 8004cce:	4318      	orrs	r0, r3
 8004cd0:	9004      	str	r0, [sp, #16]
 8004cd2:	463d      	mov	r5, r7
 8004cd4:	e7d3      	b.n	8004c7e <_svfiprintf_r+0x92>
 8004cd6:	9a03      	ldr	r2, [sp, #12]
 8004cd8:	1d11      	adds	r1, r2, #4
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	9103      	str	r1, [sp, #12]
 8004cde:	2a00      	cmp	r2, #0
 8004ce0:	db01      	blt.n	8004ce6 <_svfiprintf_r+0xfa>
 8004ce2:	9207      	str	r2, [sp, #28]
 8004ce4:	e004      	b.n	8004cf0 <_svfiprintf_r+0x104>
 8004ce6:	4252      	negs	r2, r2
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	9207      	str	r2, [sp, #28]
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	783b      	ldrb	r3, [r7, #0]
 8004cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf4:	d10c      	bne.n	8004d10 <_svfiprintf_r+0x124>
 8004cf6:	787b      	ldrb	r3, [r7, #1]
 8004cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfa:	d133      	bne.n	8004d64 <_svfiprintf_r+0x178>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	9203      	str	r2, [sp, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bfb8      	it	lt
 8004d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d0c:	3702      	adds	r7, #2
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	4d2e      	ldr	r5, [pc, #184]	; (8004dcc <_svfiprintf_r+0x1e0>)
 8004d12:	7839      	ldrb	r1, [r7, #0]
 8004d14:	2203      	movs	r2, #3
 8004d16:	4628      	mov	r0, r5
 8004d18:	f7fb fa62 	bl	80001e0 <memchr>
 8004d1c:	b138      	cbz	r0, 8004d2e <_svfiprintf_r+0x142>
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	1b40      	subs	r0, r0, r5
 8004d22:	fa03 f000 	lsl.w	r0, r3, r0
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	4303      	orrs	r3, r0
 8004d2a:	3701      	adds	r7, #1
 8004d2c:	9304      	str	r3, [sp, #16]
 8004d2e:	7839      	ldrb	r1, [r7, #0]
 8004d30:	4827      	ldr	r0, [pc, #156]	; (8004dd0 <_svfiprintf_r+0x1e4>)
 8004d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d36:	2206      	movs	r2, #6
 8004d38:	1c7e      	adds	r6, r7, #1
 8004d3a:	f7fb fa51 	bl	80001e0 <memchr>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d038      	beq.n	8004db4 <_svfiprintf_r+0x1c8>
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <_svfiprintf_r+0x1e8>)
 8004d44:	bb13      	cbnz	r3, 8004d8c <_svfiprintf_r+0x1a0>
 8004d46:	9b03      	ldr	r3, [sp, #12]
 8004d48:	3307      	adds	r3, #7
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	3308      	adds	r3, #8
 8004d50:	9303      	str	r3, [sp, #12]
 8004d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d54:	444b      	add	r3, r9
 8004d56:	9309      	str	r3, [sp, #36]	; 0x24
 8004d58:	e76d      	b.n	8004c36 <_svfiprintf_r+0x4a>
 8004d5a:	fb05 3202 	mla	r2, r5, r2, r3
 8004d5e:	2001      	movs	r0, #1
 8004d60:	460f      	mov	r7, r1
 8004d62:	e7a6      	b.n	8004cb2 <_svfiprintf_r+0xc6>
 8004d64:	2300      	movs	r3, #0
 8004d66:	3701      	adds	r7, #1
 8004d68:	9305      	str	r3, [sp, #20]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	250a      	movs	r5, #10
 8004d6e:	4638      	mov	r0, r7
 8004d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d74:	3a30      	subs	r2, #48	; 0x30
 8004d76:	2a09      	cmp	r2, #9
 8004d78:	d903      	bls.n	8004d82 <_svfiprintf_r+0x196>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0c8      	beq.n	8004d10 <_svfiprintf_r+0x124>
 8004d7e:	9105      	str	r1, [sp, #20]
 8004d80:	e7c6      	b.n	8004d10 <_svfiprintf_r+0x124>
 8004d82:	fb05 2101 	mla	r1, r5, r1, r2
 8004d86:	2301      	movs	r3, #1
 8004d88:	4607      	mov	r7, r0
 8004d8a:	e7f0      	b.n	8004d6e <_svfiprintf_r+0x182>
 8004d8c:	ab03      	add	r3, sp, #12
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	4622      	mov	r2, r4
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <_svfiprintf_r+0x1ec>)
 8004d94:	a904      	add	r1, sp, #16
 8004d96:	4640      	mov	r0, r8
 8004d98:	f3af 8000 	nop.w
 8004d9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004da0:	4681      	mov	r9, r0
 8004da2:	d1d6      	bne.n	8004d52 <_svfiprintf_r+0x166>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	065b      	lsls	r3, r3, #25
 8004da8:	f53f af35 	bmi.w	8004c16 <_svfiprintf_r+0x2a>
 8004dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dae:	b01d      	add	sp, #116	; 0x74
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	ab03      	add	r3, sp, #12
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	4622      	mov	r2, r4
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <_svfiprintf_r+0x1ec>)
 8004dbc:	a904      	add	r1, sp, #16
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	f000 f882 	bl	8004ec8 <_printf_i>
 8004dc4:	e7ea      	b.n	8004d9c <_svfiprintf_r+0x1b0>
 8004dc6:	bf00      	nop
 8004dc8:	08005430 	.word	0x08005430
 8004dcc:	08005436 	.word	0x08005436
 8004dd0:	0800543a 	.word	0x0800543a
 8004dd4:	00000000 	.word	0x00000000
 8004dd8:	08004b39 	.word	0x08004b39

08004ddc <_printf_common>:
 8004ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de0:	4691      	mov	r9, r2
 8004de2:	461f      	mov	r7, r3
 8004de4:	688a      	ldr	r2, [r1, #8]
 8004de6:	690b      	ldr	r3, [r1, #16]
 8004de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dec:	4293      	cmp	r3, r2
 8004dee:	bfb8      	it	lt
 8004df0:	4613      	movlt	r3, r2
 8004df2:	f8c9 3000 	str.w	r3, [r9]
 8004df6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	b112      	cbz	r2, 8004e06 <_printf_common+0x2a>
 8004e00:	3301      	adds	r3, #1
 8004e02:	f8c9 3000 	str.w	r3, [r9]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	0699      	lsls	r1, r3, #26
 8004e0a:	bf42      	ittt	mi
 8004e0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e10:	3302      	addmi	r3, #2
 8004e12:	f8c9 3000 	strmi.w	r3, [r9]
 8004e16:	6825      	ldr	r5, [r4, #0]
 8004e18:	f015 0506 	ands.w	r5, r5, #6
 8004e1c:	d107      	bne.n	8004e2e <_printf_common+0x52>
 8004e1e:	f104 0a19 	add.w	sl, r4, #25
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	f8d9 2000 	ldr.w	r2, [r9]
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	42ab      	cmp	r3, r5
 8004e2c:	dc28      	bgt.n	8004e80 <_printf_common+0xa4>
 8004e2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	3300      	adds	r3, #0
 8004e36:	bf18      	it	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	0692      	lsls	r2, r2, #26
 8004e3c:	d42d      	bmi.n	8004e9a <_printf_common+0xbe>
 8004e3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e42:	4639      	mov	r1, r7
 8004e44:	4630      	mov	r0, r6
 8004e46:	47c0      	blx	r8
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d020      	beq.n	8004e8e <_printf_common+0xb2>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	68e5      	ldr	r5, [r4, #12]
 8004e50:	f8d9 2000 	ldr.w	r2, [r9]
 8004e54:	f003 0306 	and.w	r3, r3, #6
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	bf08      	it	eq
 8004e5c:	1aad      	subeq	r5, r5, r2
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	6922      	ldr	r2, [r4, #16]
 8004e62:	bf0c      	ite	eq
 8004e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e68:	2500      	movne	r5, #0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bfc4      	itt	gt
 8004e6e:	1a9b      	subgt	r3, r3, r2
 8004e70:	18ed      	addgt	r5, r5, r3
 8004e72:	f04f 0900 	mov.w	r9, #0
 8004e76:	341a      	adds	r4, #26
 8004e78:	454d      	cmp	r5, r9
 8004e7a:	d11a      	bne.n	8004eb2 <_printf_common+0xd6>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e008      	b.n	8004e92 <_printf_common+0xb6>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4652      	mov	r2, sl
 8004e84:	4639      	mov	r1, r7
 8004e86:	4630      	mov	r0, r6
 8004e88:	47c0      	blx	r8
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d103      	bne.n	8004e96 <_printf_common+0xba>
 8004e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e96:	3501      	adds	r5, #1
 8004e98:	e7c3      	b.n	8004e22 <_printf_common+0x46>
 8004e9a:	18e1      	adds	r1, r4, r3
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	2030      	movs	r0, #48	; 0x30
 8004ea0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ea4:	4422      	add	r2, r4
 8004ea6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eae:	3302      	adds	r3, #2
 8004eb0:	e7c5      	b.n	8004e3e <_printf_common+0x62>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	4630      	mov	r0, r6
 8004eba:	47c0      	blx	r8
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d0e6      	beq.n	8004e8e <_printf_common+0xb2>
 8004ec0:	f109 0901 	add.w	r9, r9, #1
 8004ec4:	e7d8      	b.n	8004e78 <_printf_common+0x9c>
	...

08004ec8 <_printf_i>:
 8004ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ecc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	7e09      	ldrb	r1, [r1, #24]
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	296e      	cmp	r1, #110	; 0x6e
 8004ed8:	4617      	mov	r7, r2
 8004eda:	4606      	mov	r6, r0
 8004edc:	4698      	mov	r8, r3
 8004ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ee0:	f000 80b3 	beq.w	800504a <_printf_i+0x182>
 8004ee4:	d822      	bhi.n	8004f2c <_printf_i+0x64>
 8004ee6:	2963      	cmp	r1, #99	; 0x63
 8004ee8:	d036      	beq.n	8004f58 <_printf_i+0x90>
 8004eea:	d80a      	bhi.n	8004f02 <_printf_i+0x3a>
 8004eec:	2900      	cmp	r1, #0
 8004eee:	f000 80b9 	beq.w	8005064 <_printf_i+0x19c>
 8004ef2:	2958      	cmp	r1, #88	; 0x58
 8004ef4:	f000 8083 	beq.w	8004ffe <_printf_i+0x136>
 8004ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004efc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f00:	e032      	b.n	8004f68 <_printf_i+0xa0>
 8004f02:	2964      	cmp	r1, #100	; 0x64
 8004f04:	d001      	beq.n	8004f0a <_printf_i+0x42>
 8004f06:	2969      	cmp	r1, #105	; 0x69
 8004f08:	d1f6      	bne.n	8004ef8 <_printf_i+0x30>
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	6813      	ldr	r3, [r2, #0]
 8004f0e:	0605      	lsls	r5, r0, #24
 8004f10:	f103 0104 	add.w	r1, r3, #4
 8004f14:	d52a      	bpl.n	8004f6c <_printf_i+0xa4>
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da03      	bge.n	8004f26 <_printf_i+0x5e>
 8004f1e:	222d      	movs	r2, #45	; 0x2d
 8004f20:	425b      	negs	r3, r3
 8004f22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f26:	486f      	ldr	r0, [pc, #444]	; (80050e4 <_printf_i+0x21c>)
 8004f28:	220a      	movs	r2, #10
 8004f2a:	e039      	b.n	8004fa0 <_printf_i+0xd8>
 8004f2c:	2973      	cmp	r1, #115	; 0x73
 8004f2e:	f000 809d 	beq.w	800506c <_printf_i+0x1a4>
 8004f32:	d808      	bhi.n	8004f46 <_printf_i+0x7e>
 8004f34:	296f      	cmp	r1, #111	; 0x6f
 8004f36:	d020      	beq.n	8004f7a <_printf_i+0xb2>
 8004f38:	2970      	cmp	r1, #112	; 0x70
 8004f3a:	d1dd      	bne.n	8004ef8 <_printf_i+0x30>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	f043 0320 	orr.w	r3, r3, #32
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	e003      	b.n	8004f4e <_printf_i+0x86>
 8004f46:	2975      	cmp	r1, #117	; 0x75
 8004f48:	d017      	beq.n	8004f7a <_printf_i+0xb2>
 8004f4a:	2978      	cmp	r1, #120	; 0x78
 8004f4c:	d1d4      	bne.n	8004ef8 <_printf_i+0x30>
 8004f4e:	2378      	movs	r3, #120	; 0x78
 8004f50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f54:	4864      	ldr	r0, [pc, #400]	; (80050e8 <_printf_i+0x220>)
 8004f56:	e055      	b.n	8005004 <_printf_i+0x13c>
 8004f58:	6813      	ldr	r3, [r2, #0]
 8004f5a:	1d19      	adds	r1, r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6011      	str	r1, [r2, #0]
 8004f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e08c      	b.n	8005086 <_printf_i+0x1be>
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6011      	str	r1, [r2, #0]
 8004f70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f74:	bf18      	it	ne
 8004f76:	b21b      	sxthne	r3, r3
 8004f78:	e7cf      	b.n	8004f1a <_printf_i+0x52>
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	1d18      	adds	r0, r3, #4
 8004f80:	6010      	str	r0, [r2, #0]
 8004f82:	0628      	lsls	r0, r5, #24
 8004f84:	d501      	bpl.n	8004f8a <_printf_i+0xc2>
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	e002      	b.n	8004f90 <_printf_i+0xc8>
 8004f8a:	0668      	lsls	r0, r5, #25
 8004f8c:	d5fb      	bpl.n	8004f86 <_printf_i+0xbe>
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	4854      	ldr	r0, [pc, #336]	; (80050e4 <_printf_i+0x21c>)
 8004f92:	296f      	cmp	r1, #111	; 0x6f
 8004f94:	bf14      	ite	ne
 8004f96:	220a      	movne	r2, #10
 8004f98:	2208      	moveq	r2, #8
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fa0:	6865      	ldr	r5, [r4, #4]
 8004fa2:	60a5      	str	r5, [r4, #8]
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	f2c0 8095 	blt.w	80050d4 <_printf_i+0x20c>
 8004faa:	6821      	ldr	r1, [r4, #0]
 8004fac:	f021 0104 	bic.w	r1, r1, #4
 8004fb0:	6021      	str	r1, [r4, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d13d      	bne.n	8005032 <_printf_i+0x16a>
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	f040 808e 	bne.w	80050d8 <_printf_i+0x210>
 8004fbc:	4665      	mov	r5, ip
 8004fbe:	2a08      	cmp	r2, #8
 8004fc0:	d10b      	bne.n	8004fda <_printf_i+0x112>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	07db      	lsls	r3, r3, #31
 8004fc6:	d508      	bpl.n	8004fda <_printf_i+0x112>
 8004fc8:	6923      	ldr	r3, [r4, #16]
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	bfde      	ittt	le
 8004fd0:	2330      	movle	r3, #48	; 0x30
 8004fd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fda:	ebac 0305 	sub.w	r3, ip, r5
 8004fde:	6123      	str	r3, [r4, #16]
 8004fe0:	f8cd 8000 	str.w	r8, [sp]
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	aa03      	add	r2, sp, #12
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff fef6 	bl	8004ddc <_printf_common>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d14d      	bne.n	8005090 <_printf_i+0x1c8>
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	b005      	add	sp, #20
 8004ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ffe:	4839      	ldr	r0, [pc, #228]	; (80050e4 <_printf_i+0x21c>)
 8005000:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005004:	6813      	ldr	r3, [r2, #0]
 8005006:	6821      	ldr	r1, [r4, #0]
 8005008:	1d1d      	adds	r5, r3, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6015      	str	r5, [r2, #0]
 800500e:	060a      	lsls	r2, r1, #24
 8005010:	d50b      	bpl.n	800502a <_printf_i+0x162>
 8005012:	07ca      	lsls	r2, r1, #31
 8005014:	bf44      	itt	mi
 8005016:	f041 0120 	orrmi.w	r1, r1, #32
 800501a:	6021      	strmi	r1, [r4, #0]
 800501c:	b91b      	cbnz	r3, 8005026 <_printf_i+0x15e>
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	f022 0220 	bic.w	r2, r2, #32
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	2210      	movs	r2, #16
 8005028:	e7b7      	b.n	8004f9a <_printf_i+0xd2>
 800502a:	064d      	lsls	r5, r1, #25
 800502c:	bf48      	it	mi
 800502e:	b29b      	uxthmi	r3, r3
 8005030:	e7ef      	b.n	8005012 <_printf_i+0x14a>
 8005032:	4665      	mov	r5, ip
 8005034:	fbb3 f1f2 	udiv	r1, r3, r2
 8005038:	fb02 3311 	mls	r3, r2, r1, r3
 800503c:	5cc3      	ldrb	r3, [r0, r3]
 800503e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005042:	460b      	mov	r3, r1
 8005044:	2900      	cmp	r1, #0
 8005046:	d1f5      	bne.n	8005034 <_printf_i+0x16c>
 8005048:	e7b9      	b.n	8004fbe <_printf_i+0xf6>
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	6825      	ldr	r5, [r4, #0]
 800504e:	6961      	ldr	r1, [r4, #20]
 8005050:	1d18      	adds	r0, r3, #4
 8005052:	6010      	str	r0, [r2, #0]
 8005054:	0628      	lsls	r0, r5, #24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	d501      	bpl.n	800505e <_printf_i+0x196>
 800505a:	6019      	str	r1, [r3, #0]
 800505c:	e002      	b.n	8005064 <_printf_i+0x19c>
 800505e:	066a      	lsls	r2, r5, #25
 8005060:	d5fb      	bpl.n	800505a <_printf_i+0x192>
 8005062:	8019      	strh	r1, [r3, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	6123      	str	r3, [r4, #16]
 8005068:	4665      	mov	r5, ip
 800506a:	e7b9      	b.n	8004fe0 <_printf_i+0x118>
 800506c:	6813      	ldr	r3, [r2, #0]
 800506e:	1d19      	adds	r1, r3, #4
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	681d      	ldr	r5, [r3, #0]
 8005074:	6862      	ldr	r2, [r4, #4]
 8005076:	2100      	movs	r1, #0
 8005078:	4628      	mov	r0, r5
 800507a:	f7fb f8b1 	bl	80001e0 <memchr>
 800507e:	b108      	cbz	r0, 8005084 <_printf_i+0x1bc>
 8005080:	1b40      	subs	r0, r0, r5
 8005082:	6060      	str	r0, [r4, #4]
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	2300      	movs	r3, #0
 800508a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508e:	e7a7      	b.n	8004fe0 <_printf_i+0x118>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	462a      	mov	r2, r5
 8005094:	4639      	mov	r1, r7
 8005096:	4630      	mov	r0, r6
 8005098:	47c0      	blx	r8
 800509a:	3001      	adds	r0, #1
 800509c:	d0aa      	beq.n	8004ff4 <_printf_i+0x12c>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	079b      	lsls	r3, r3, #30
 80050a2:	d413      	bmi.n	80050cc <_printf_i+0x204>
 80050a4:	68e0      	ldr	r0, [r4, #12]
 80050a6:	9b03      	ldr	r3, [sp, #12]
 80050a8:	4298      	cmp	r0, r3
 80050aa:	bfb8      	it	lt
 80050ac:	4618      	movlt	r0, r3
 80050ae:	e7a3      	b.n	8004ff8 <_printf_i+0x130>
 80050b0:	2301      	movs	r3, #1
 80050b2:	464a      	mov	r2, r9
 80050b4:	4639      	mov	r1, r7
 80050b6:	4630      	mov	r0, r6
 80050b8:	47c0      	blx	r8
 80050ba:	3001      	adds	r0, #1
 80050bc:	d09a      	beq.n	8004ff4 <_printf_i+0x12c>
 80050be:	3501      	adds	r5, #1
 80050c0:	68e3      	ldr	r3, [r4, #12]
 80050c2:	9a03      	ldr	r2, [sp, #12]
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	42ab      	cmp	r3, r5
 80050c8:	dcf2      	bgt.n	80050b0 <_printf_i+0x1e8>
 80050ca:	e7eb      	b.n	80050a4 <_printf_i+0x1dc>
 80050cc:	2500      	movs	r5, #0
 80050ce:	f104 0919 	add.w	r9, r4, #25
 80050d2:	e7f5      	b.n	80050c0 <_printf_i+0x1f8>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ac      	bne.n	8005032 <_printf_i+0x16a>
 80050d8:	7803      	ldrb	r3, [r0, #0]
 80050da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e2:	e76c      	b.n	8004fbe <_printf_i+0xf6>
 80050e4:	08005441 	.word	0x08005441
 80050e8:	08005452 	.word	0x08005452

080050ec <memmove>:
 80050ec:	4288      	cmp	r0, r1
 80050ee:	b510      	push	{r4, lr}
 80050f0:	eb01 0302 	add.w	r3, r1, r2
 80050f4:	d807      	bhi.n	8005106 <memmove+0x1a>
 80050f6:	1e42      	subs	r2, r0, #1
 80050f8:	4299      	cmp	r1, r3
 80050fa:	d00a      	beq.n	8005112 <memmove+0x26>
 80050fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005100:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005104:	e7f8      	b.n	80050f8 <memmove+0xc>
 8005106:	4283      	cmp	r3, r0
 8005108:	d9f5      	bls.n	80050f6 <memmove+0xa>
 800510a:	1881      	adds	r1, r0, r2
 800510c:	1ad2      	subs	r2, r2, r3
 800510e:	42d3      	cmn	r3, r2
 8005110:	d100      	bne.n	8005114 <memmove+0x28>
 8005112:	bd10      	pop	{r4, pc}
 8005114:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005118:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800511c:	e7f7      	b.n	800510e <memmove+0x22>
	...

08005120 <_free_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4605      	mov	r5, r0
 8005124:	2900      	cmp	r1, #0
 8005126:	d045      	beq.n	80051b4 <_free_r+0x94>
 8005128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512c:	1f0c      	subs	r4, r1, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfb8      	it	lt
 8005132:	18e4      	addlt	r4, r4, r3
 8005134:	f000 f8d2 	bl	80052dc <__malloc_lock>
 8005138:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <_free_r+0x98>)
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	4610      	mov	r0, r2
 800513e:	b933      	cbnz	r3, 800514e <_free_r+0x2e>
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	6014      	str	r4, [r2, #0]
 8005144:	4628      	mov	r0, r5
 8005146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800514a:	f000 b8c8 	b.w	80052de <__malloc_unlock>
 800514e:	42a3      	cmp	r3, r4
 8005150:	d90c      	bls.n	800516c <_free_r+0x4c>
 8005152:	6821      	ldr	r1, [r4, #0]
 8005154:	1862      	adds	r2, r4, r1
 8005156:	4293      	cmp	r3, r2
 8005158:	bf04      	itt	eq
 800515a:	681a      	ldreq	r2, [r3, #0]
 800515c:	685b      	ldreq	r3, [r3, #4]
 800515e:	6063      	str	r3, [r4, #4]
 8005160:	bf04      	itt	eq
 8005162:	1852      	addeq	r2, r2, r1
 8005164:	6022      	streq	r2, [r4, #0]
 8005166:	6004      	str	r4, [r0, #0]
 8005168:	e7ec      	b.n	8005144 <_free_r+0x24>
 800516a:	4613      	mov	r3, r2
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	b10a      	cbz	r2, 8005174 <_free_r+0x54>
 8005170:	42a2      	cmp	r2, r4
 8005172:	d9fa      	bls.n	800516a <_free_r+0x4a>
 8005174:	6819      	ldr	r1, [r3, #0]
 8005176:	1858      	adds	r0, r3, r1
 8005178:	42a0      	cmp	r0, r4
 800517a:	d10b      	bne.n	8005194 <_free_r+0x74>
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	4401      	add	r1, r0
 8005180:	1858      	adds	r0, r3, r1
 8005182:	4282      	cmp	r2, r0
 8005184:	6019      	str	r1, [r3, #0]
 8005186:	d1dd      	bne.n	8005144 <_free_r+0x24>
 8005188:	6810      	ldr	r0, [r2, #0]
 800518a:	6852      	ldr	r2, [r2, #4]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	4401      	add	r1, r0
 8005190:	6019      	str	r1, [r3, #0]
 8005192:	e7d7      	b.n	8005144 <_free_r+0x24>
 8005194:	d902      	bls.n	800519c <_free_r+0x7c>
 8005196:	230c      	movs	r3, #12
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	e7d3      	b.n	8005144 <_free_r+0x24>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	1821      	adds	r1, r4, r0
 80051a0:	428a      	cmp	r2, r1
 80051a2:	bf04      	itt	eq
 80051a4:	6811      	ldreq	r1, [r2, #0]
 80051a6:	6852      	ldreq	r2, [r2, #4]
 80051a8:	6062      	str	r2, [r4, #4]
 80051aa:	bf04      	itt	eq
 80051ac:	1809      	addeq	r1, r1, r0
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	605c      	str	r4, [r3, #4]
 80051b2:	e7c7      	b.n	8005144 <_free_r+0x24>
 80051b4:	bd38      	pop	{r3, r4, r5, pc}
 80051b6:	bf00      	nop
 80051b8:	20004034 	.word	0x20004034

080051bc <_malloc_r>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	1ccd      	adds	r5, r1, #3
 80051c0:	f025 0503 	bic.w	r5, r5, #3
 80051c4:	3508      	adds	r5, #8
 80051c6:	2d0c      	cmp	r5, #12
 80051c8:	bf38      	it	cc
 80051ca:	250c      	movcc	r5, #12
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	4606      	mov	r6, r0
 80051d0:	db01      	blt.n	80051d6 <_malloc_r+0x1a>
 80051d2:	42a9      	cmp	r1, r5
 80051d4:	d903      	bls.n	80051de <_malloc_r+0x22>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	2000      	movs	r0, #0
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	f000 f87d 	bl	80052dc <__malloc_lock>
 80051e2:	4a21      	ldr	r2, [pc, #132]	; (8005268 <_malloc_r+0xac>)
 80051e4:	6814      	ldr	r4, [r2, #0]
 80051e6:	4621      	mov	r1, r4
 80051e8:	b991      	cbnz	r1, 8005210 <_malloc_r+0x54>
 80051ea:	4c20      	ldr	r4, [pc, #128]	; (800526c <_malloc_r+0xb0>)
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	b91b      	cbnz	r3, 80051f8 <_malloc_r+0x3c>
 80051f0:	4630      	mov	r0, r6
 80051f2:	f000 f863 	bl	80052bc <_sbrk_r>
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4629      	mov	r1, r5
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f85e 	bl	80052bc <_sbrk_r>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d124      	bne.n	800524e <_malloc_r+0x92>
 8005204:	230c      	movs	r3, #12
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	4630      	mov	r0, r6
 800520a:	f000 f868 	bl	80052de <__malloc_unlock>
 800520e:	e7e4      	b.n	80051da <_malloc_r+0x1e>
 8005210:	680b      	ldr	r3, [r1, #0]
 8005212:	1b5b      	subs	r3, r3, r5
 8005214:	d418      	bmi.n	8005248 <_malloc_r+0x8c>
 8005216:	2b0b      	cmp	r3, #11
 8005218:	d90f      	bls.n	800523a <_malloc_r+0x7e>
 800521a:	600b      	str	r3, [r1, #0]
 800521c:	50cd      	str	r5, [r1, r3]
 800521e:	18cc      	adds	r4, r1, r3
 8005220:	4630      	mov	r0, r6
 8005222:	f000 f85c 	bl	80052de <__malloc_unlock>
 8005226:	f104 000b 	add.w	r0, r4, #11
 800522a:	1d23      	adds	r3, r4, #4
 800522c:	f020 0007 	bic.w	r0, r0, #7
 8005230:	1ac3      	subs	r3, r0, r3
 8005232:	d0d3      	beq.n	80051dc <_malloc_r+0x20>
 8005234:	425a      	negs	r2, r3
 8005236:	50e2      	str	r2, [r4, r3]
 8005238:	e7d0      	b.n	80051dc <_malloc_r+0x20>
 800523a:	428c      	cmp	r4, r1
 800523c:	684b      	ldr	r3, [r1, #4]
 800523e:	bf16      	itet	ne
 8005240:	6063      	strne	r3, [r4, #4]
 8005242:	6013      	streq	r3, [r2, #0]
 8005244:	460c      	movne	r4, r1
 8005246:	e7eb      	b.n	8005220 <_malloc_r+0x64>
 8005248:	460c      	mov	r4, r1
 800524a:	6849      	ldr	r1, [r1, #4]
 800524c:	e7cc      	b.n	80051e8 <_malloc_r+0x2c>
 800524e:	1cc4      	adds	r4, r0, #3
 8005250:	f024 0403 	bic.w	r4, r4, #3
 8005254:	42a0      	cmp	r0, r4
 8005256:	d005      	beq.n	8005264 <_malloc_r+0xa8>
 8005258:	1a21      	subs	r1, r4, r0
 800525a:	4630      	mov	r0, r6
 800525c:	f000 f82e 	bl	80052bc <_sbrk_r>
 8005260:	3001      	adds	r0, #1
 8005262:	d0cf      	beq.n	8005204 <_malloc_r+0x48>
 8005264:	6025      	str	r5, [r4, #0]
 8005266:	e7db      	b.n	8005220 <_malloc_r+0x64>
 8005268:	20004034 	.word	0x20004034
 800526c:	20004038 	.word	0x20004038

08005270 <_realloc_r>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	4607      	mov	r7, r0
 8005274:	4614      	mov	r4, r2
 8005276:	460e      	mov	r6, r1
 8005278:	b921      	cbnz	r1, 8005284 <_realloc_r+0x14>
 800527a:	4611      	mov	r1, r2
 800527c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005280:	f7ff bf9c 	b.w	80051bc <_malloc_r>
 8005284:	b922      	cbnz	r2, 8005290 <_realloc_r+0x20>
 8005286:	f7ff ff4b 	bl	8005120 <_free_r>
 800528a:	4625      	mov	r5, r4
 800528c:	4628      	mov	r0, r5
 800528e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005290:	f000 f826 	bl	80052e0 <_malloc_usable_size_r>
 8005294:	42a0      	cmp	r0, r4
 8005296:	d20f      	bcs.n	80052b8 <_realloc_r+0x48>
 8005298:	4621      	mov	r1, r4
 800529a:	4638      	mov	r0, r7
 800529c:	f7ff ff8e 	bl	80051bc <_malloc_r>
 80052a0:	4605      	mov	r5, r0
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d0f2      	beq.n	800528c <_realloc_r+0x1c>
 80052a6:	4631      	mov	r1, r6
 80052a8:	4622      	mov	r2, r4
 80052aa:	f7ff fc11 	bl	8004ad0 <memcpy>
 80052ae:	4631      	mov	r1, r6
 80052b0:	4638      	mov	r0, r7
 80052b2:	f7ff ff35 	bl	8005120 <_free_r>
 80052b6:	e7e9      	b.n	800528c <_realloc_r+0x1c>
 80052b8:	4635      	mov	r5, r6
 80052ba:	e7e7      	b.n	800528c <_realloc_r+0x1c>

080052bc <_sbrk_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4c06      	ldr	r4, [pc, #24]	; (80052d8 <_sbrk_r+0x1c>)
 80052c0:	2300      	movs	r3, #0
 80052c2:	4605      	mov	r5, r0
 80052c4:	4608      	mov	r0, r1
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	f7fb fc76 	bl	8000bb8 <_sbrk>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_sbrk_r+0x1a>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_sbrk_r+0x1a>
 80052d4:	602b      	str	r3, [r5, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	2000408c 	.word	0x2000408c

080052dc <__malloc_lock>:
 80052dc:	4770      	bx	lr

080052de <__malloc_unlock>:
 80052de:	4770      	bx	lr

080052e0 <_malloc_usable_size_r>:
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f18      	subs	r0, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbc      	itt	lt
 80052ea:	580b      	ldrlt	r3, [r1, r0]
 80052ec:	18c0      	addlt	r0, r0, r3
 80052ee:	4770      	bx	lr

080052f0 <_init>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr

080052fc <_fini>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr
