
Lab6-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b08  08002b08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b10  08002b10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000010  08002b28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002b28  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081d9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ad  00000000  00000000  00028219  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000858  00000000  00000000  000297c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002a020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d2f  00000000  00000000  0002a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a80  00000000  00000000  0003f4ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082d83  00000000  00000000  00045f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8cf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ac  00000000  00000000  000c8d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002ad8 	.word	0x08002ad8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002ad8 	.word	0x08002ad8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004dc:	f000 fae4 	bl	8000aa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e0:	f000 f852 	bl	8000588 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e4:	f000 f918 	bl	8000718 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004e8:	f000 f8ec 	bl	80006c4 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80004ec:	f000 f8b4 	bl	8000658 <MX_SPI2_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (1) {
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && pressed) // button is released (used to be pressed)
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	481f      	ldr	r0, [pc, #124]	; (8000574 <main+0x9c>)
 80004f6:	f000 fe21 	bl	800113c <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d022      	beq.n	8000546 <main+0x6e>
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <main+0xa0>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d01e      	beq.n	8000546 <main+0x6e>
					{
				HAL_Delay(5);
 8000508:	2005      	movs	r0, #5
 800050a:	f000 fb3f 	bl	8000b8c <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	4818      	ldr	r0, [pc, #96]	; (8000574 <main+0x9c>)
 8000514:	f000 fe12 	bl	800113c <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d029      	beq.n	8000572 <main+0x9a>
					HAL_UART_Transmit(&huart2, a, sizeof(a), 100);
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <main+0xa4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	2204      	movs	r2, #4
 8000528:	4815      	ldr	r0, [pc, #84]	; (8000580 <main+0xa8>)
 800052a:	f001 fe4a 	bl	80021c2 <HAL_UART_Transmit>
					HAL_SPI_Transmit(&hspi2, a, sizeof(a), 100);
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0xa4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	2364      	movs	r3, #100	; 0x64
 8000536:	2204      	movs	r2, #4
 8000538:	4812      	ldr	r0, [pc, #72]	; (8000584 <main+0xac>)
 800053a:	f001 faf7 	bl	8001b2c <HAL_SPI_Transmit>
					pressed = 0;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <main+0xa0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000544:	e015      	b.n	8000572 <main+0x9a>
				}
			} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) // button is pressed
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x9c>)
 800054c:	f000 fdf6 	bl	800113c <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1cc      	bne.n	80004f0 <main+0x18>
					{
				HAL_Delay(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f000 fb18 	bl	8000b8c <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0x9c>)
 8000562:	f000 fdeb 	bl	800113c <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1c1      	bne.n	80004f0 <main+0x18>
					pressed = 1;
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <main+0xa0>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && pressed) // button is released (used to be pressed)
 8000572:	e7bd      	b.n	80004f0 <main+0x18>
 8000574:	40020800 	.word	0x40020800
 8000578:	2000002c 	.word	0x2000002c
 800057c:	20000000 	.word	0x20000000
 8000580:	20000088 	.word	0x20000088
 8000584:	20000030 	.word	0x20000030

08000588 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fa96 	bl	8002ac8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <SystemClock_Config+0xc8>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <SystemClock_Config+0xc8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <SystemClock_Config+0xcc>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <SystemClock_Config+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005f8:	2308      	movs	r3, #8
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 80005fc:	2350      	movs	r3, #80	; 0x50
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fdc7 	bl	80011a0 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
		Error_Handler();
 8000618:	f000 f8ee 	bl	80007f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2102      	movs	r1, #2
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f821 	bl	8001680 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc0>
		Error_Handler();
 8000644:	f000 f8d8 	bl	80007f8 <Error_Handler>
	}
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_SPI2_Init+0x64>)
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_SPI2_Init+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_SPI2_Init+0x64>)
 8000664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000668:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_SPI2_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_SPI2_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_SPI2_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_SPI2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_SPI2_Init+0x64>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_SPI2_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_SPI2_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_SPI2_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_SPI2_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_SPI2_Init+0x64>)
 80006a4:	220a      	movs	r2, #10
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_SPI2_Init+0x64>)
 80006aa:	f001 f9db 	bl	8001a64 <HAL_SPI_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_SPI2_Init+0x60>
		Error_Handler();
 80006b4:	f000 f8a0 	bl	80007f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000030 	.word	0x20000030
 80006c0:	40003800 	.word	0x40003800

080006c4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 fd14 	bl	8002128 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000706:	f000 f877 	bl	80007f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000088 	.word	0x20000088
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007a4:	f000 fce2 	bl	800116c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_GPIO_Init+0xd8>)
 80007b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_GPIO_Init+0xdc>)
 80007be:	f000 fb3b 	bl	8000e38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80007c2:	2320      	movs	r3, #32
 80007c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007da:	f000 fb2d 	bl	8000e38 <HAL_GPIO_Init>

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	10210000 	.word	0x10210000
 80007f4:	40020800 	.word	0x40020800

080007f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007fe:	e7fe      	b.n	80007fe <Error_Handler+0x6>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800083e:	2007      	movs	r0, #7
 8000840:	f000 fa96 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <HAL_SPI_MspInit+0xd0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d152      	bne.n	8000918 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a2a      	ldr	r2, [pc, #168]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b28      	ldr	r3, [pc, #160]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a23      	ldr	r2, [pc, #140]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <HAL_SPI_MspInit+0xd4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <HAL_SPI_MspInit+0xd8>)
 80008e2:	f000 faa9 	bl	8000e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480a      	ldr	r0, [pc, #40]	; (800092c <HAL_SPI_MspInit+0xdc>)
 8000904:	f000 fa98 	bl	8000e38 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2024      	movs	r0, #36	; 0x24
 800090e:	f000 fa3a 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000912:	2024      	movs	r0, #36	; 0x24
 8000914:	f000 fa53 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40003800 	.word	0x40003800
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020400 	.word	0x40020400

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_UART_MspInit+0x84>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d12b      	bne.n	80009aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x88>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_UART_MspInit+0x88>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_UART_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098a:	230c      	movs	r3, #12
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_UART_MspInit+0x8c>)
 80009a6:	f000 fa47 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 f89e 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <SPI2_IRQHandler+0x10>)
 8000a1a:	f001 f9bb 	bl	8001d94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000030 	.word	0x20000030

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SystemInit+0x28>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <SystemInit+0x28>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SystemInit+0x28>)
 8000a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a42:	609a      	str	r2, [r3, #8]
#endif
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
  ldr  r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd3 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f001 fffd 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd27 	bl	80004d8 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a90:	08002b18 	.word	0x08002b18
  ldr  r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a98:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a9c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000aa0:	200000cc 	.word	0x200000cc

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f94d 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fe90 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f965 	bl	8000dda <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f92d 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000004 	.word	0x20000004
 8000b44:	2000000c 	.word	0x2000000c
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	200000c8 	.word	0x200000c8

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200000c8 	.word	0x200000c8

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_Delay+0x40>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000000c 	.word	0x2000000c

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d004      	beq.n	8000e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e00c      	b.n	8000e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2205      	movs	r2, #5
 8000e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0201 	bic.w	r2, r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e159      	b.n	8001108 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8148 	bne.w	8001102 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d00b      	beq.n	8000e92 <HAL_GPIO_Init+0x5a>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e86:	2b11      	cmp	r3, #17
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0xfc>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b12      	cmp	r3, #18
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80a2 	beq.w	8001102 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b56      	ldr	r3, [pc, #344]	; (800111c <HAL_GPIO_Init+0x2e4>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a55      	ldr	r2, [pc, #340]	; (800111c <HAL_GPIO_Init+0x2e4>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b53      	ldr	r3, [pc, #332]	; (800111c <HAL_GPIO_Init+0x2e4>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	4a51      	ldr	r2, [pc, #324]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a48      	ldr	r2, [pc, #288]	; (8001124 <HAL_GPIO_Init+0x2ec>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x202>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a47      	ldr	r2, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x1fe>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a46      	ldr	r2, [pc, #280]	; (800112c <HAL_GPIO_Init+0x2f4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x1fa>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a45      	ldr	r2, [pc, #276]	; (8001130 <HAL_GPIO_Init+0x2f8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x1f6>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_GPIO_Init+0x2fc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x1f2>
 8001026:	2304      	movs	r3, #4
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x204>
 800102a:	2307      	movs	r3, #7
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x204>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x204>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x204>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x204>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4934      	ldr	r1, [pc, #208]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x300>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <HAL_GPIO_Init+0x300>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <HAL_GPIO_Init+0x300>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <HAL_GPIO_Init+0x300>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_GPIO_Init+0x300>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_GPIO_Init+0x300>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_GPIO_Init+0x300>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_GPIO_Init+0x300>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f aea2 	bls.w	8000e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	3724      	adds	r7, #36	; 0x24
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e25b      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d075      	beq.n	80012aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	4ba3      	ldr	r3, [pc, #652]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d00c      	beq.n	80011e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ca:	4ba0      	ldr	r3, [pc, #640]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d112      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d6:	4b9d      	ldr	r3, [pc, #628]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e2:	d10b      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	4b99      	ldr	r3, [pc, #612]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d05b      	beq.n	80012a8 <HAL_RCC_OscConfig+0x108>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d157      	bne.n	80012a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e236      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001204:	d106      	bne.n	8001214 <HAL_RCC_OscConfig+0x74>
 8001206:	4b91      	ldr	r3, [pc, #580]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a90      	ldr	r2, [pc, #576]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x98>
 800121e:	4b8b      	ldr	r3, [pc, #556]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a8a      	ldr	r2, [pc, #552]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a87      	ldr	r2, [pc, #540]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001238:	4b84      	ldr	r3, [pc, #528]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a83      	ldr	r2, [pc, #524]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b81      	ldr	r3, [pc, #516]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a80      	ldr	r2, [pc, #512]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fc8c 	bl	8000b74 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fc88 	bl	8000b74 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1fb      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xc0>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fc78 	bl	8000b74 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fc74 	bl	8000b74 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1e7      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b6c      	ldr	r3, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0xe8>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	4b65      	ldr	r3, [pc, #404]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ce:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1bb      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b56      	ldr	r3, [pc, #344]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4952      	ldr	r1, [pc, #328]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e03a      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <HAL_RCC_OscConfig+0x2b0>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fc2d 	bl	8000b74 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fc29 	bl	8000b74 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e19c      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b43      	ldr	r3, [pc, #268]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4940      	ldr	r1, [pc, #256]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x2b0>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fc0c 	bl	8000b74 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fc08 	bl	8000b74 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e17b      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d030      	beq.n	80013ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d016      	beq.n	80013c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_RCC_OscConfig+0x2b4>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fbec 	bl	8000b74 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbe8 	bl	8000b74 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e15b      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x200>
 80013be:	e015      	b.n	80013ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_RCC_OscConfig+0x2b4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fbd5 	bl	8000b74 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fbd1 	bl	8000b74 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e144      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80a0 	beq.w	800153a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10f      	bne.n	800142a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_OscConfig+0x2b8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d121      	bne.n	800147a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_RCC_OscConfig+0x2b8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_RCC_OscConfig+0x2b8>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff fb97 	bl	8000b74 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	e011      	b.n	800146e <HAL_RCC_OscConfig+0x2ce>
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	42470000 	.word	0x42470000
 8001454:	42470e80 	.word	0x42470e80
 8001458:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145c:	f7ff fb8a 	bl	8000b74 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0fd      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x4d4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x2f0>
 8001482:	4b7d      	ldr	r3, [pc, #500]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a7c      	ldr	r2, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e01c      	b.n	80014ca <HAL_RCC_OscConfig+0x32a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x312>
 8001498:	4b77      	ldr	r3, [pc, #476]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a76      	ldr	r2, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	4b74      	ldr	r3, [pc, #464]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4a73      	ldr	r2, [pc, #460]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6713      	str	r3, [r2, #112]	; 0x70
 80014b0:	e00b      	b.n	80014ca <HAL_RCC_OscConfig+0x32a>
 80014b2:	4b71      	ldr	r3, [pc, #452]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a70      	ldr	r2, [pc, #448]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	4a6d      	ldr	r2, [pc, #436]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d015      	beq.n	80014fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb4f 	bl	8000b74 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fb4b 	bl	8000b74 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0bc      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	4b61      	ldr	r3, [pc, #388]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ee      	beq.n	80014da <HAL_RCC_OscConfig+0x33a>
 80014fc:	e014      	b.n	8001528 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb39 	bl	8000b74 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fb35 	bl	8000b74 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0a6      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	4b56      	ldr	r3, [pc, #344]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152e:	4b52      	ldr	r3, [pc, #328]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a51      	ldr	r2, [pc, #324]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 8001534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8092 	beq.w	8001668 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001544:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d05c      	beq.n	800160a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d141      	bne.n	80015dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <HAL_RCC_OscConfig+0x4dc>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb09 	bl	8000b74 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fb05 	bl	8000b74 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e078      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001578:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	019b      	lsls	r3, r3, #6
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	3b01      	subs	r3, #1
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	061b      	lsls	r3, r3, #24
 80015a8:	4933      	ldr	r1, [pc, #204]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_RCC_OscConfig+0x4dc>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fade 	bl	8000b74 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fada 	bl	8000b74 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e04d      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x41c>
 80015da:	e045      	b.n	8001668 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x4dc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fac7 	bl	8000b74 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fac3 	bl	8000b74 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e036      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x44a>
 8001608:	e02e      	b.n	8001668 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e029      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_RCC_OscConfig+0x4d8>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	429a      	cmp	r2, r3
 8001628:	d11c      	bne.n	8001664 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d115      	bne.n	8001664 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001644:	4293      	cmp	r3, r2
 8001646:	d10d      	bne.n	8001664 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000
 8001678:	40023800 	.word	0x40023800
 800167c:	42470060 	.word	0x42470060

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cc      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d90c      	bls.n	80016bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d044      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e067      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fa00 	bl	8000b74 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f9fc 	bl	8000b74 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4601      	mov	r1, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	fa21 f303 	lsr.w	r3, r1, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f960 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00
 800183c:	40023800 	.word	0x40023800
 8001840:	08002af0 	.word	0x08002af0
 8001844:	20000004 	.word	0x20000004
 8001848:	20000008 	.word	0x20000008

0800184c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001862:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d007      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x32>
 800186e:	2b08      	cmp	r3, #8
 8001870:	d008      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x38>
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 80b4 	bne.w	80019e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001878:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800187a:	60bb      	str	r3, [r7, #8]
       break;
 800187c:	e0b3      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001880:	60bb      	str	r3, [r7, #8]
      break;
 8001882:	e0b0      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800188c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188e:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d04a      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	f04f 0400 	mov.w	r4, #0
 80018a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	ea03 0501 	and.w	r5, r3, r1
 80018b0:	ea04 0602 	and.w	r6, r4, r2
 80018b4:	4629      	mov	r1, r5
 80018b6:	4632      	mov	r2, r6
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f04f 0400 	mov.w	r4, #0
 80018c0:	0154      	lsls	r4, r2, #5
 80018c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018c6:	014b      	lsls	r3, r1, #5
 80018c8:	4619      	mov	r1, r3
 80018ca:	4622      	mov	r2, r4
 80018cc:	1b49      	subs	r1, r1, r5
 80018ce:	eb62 0206 	sbc.w	r2, r2, r6
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f04f 0400 	mov.w	r4, #0
 80018da:	0194      	lsls	r4, r2, #6
 80018dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e0:	018b      	lsls	r3, r1, #6
 80018e2:	1a5b      	subs	r3, r3, r1
 80018e4:	eb64 0402 	sbc.w	r4, r4, r2
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	00e2      	lsls	r2, r4, #3
 80018f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018f6:	00d9      	lsls	r1, r3, #3
 80018f8:	460b      	mov	r3, r1
 80018fa:	4614      	mov	r4, r2
 80018fc:	195b      	adds	r3, r3, r5
 80018fe:	eb44 0406 	adc.w	r4, r4, r6
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	0262      	lsls	r2, r4, #9
 800190c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001910:	0259      	lsls	r1, r3, #9
 8001912:	460b      	mov	r3, r1
 8001914:	4614      	mov	r4, r2
 8001916:	4618      	mov	r0, r3
 8001918:	4621      	mov	r1, r4
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f04f 0400 	mov.w	r4, #0
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	f7fe fc58 	bl	80001d8 <__aeabi_uldivmod>
 8001928:	4603      	mov	r3, r0
 800192a:	460c      	mov	r4, r1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e049      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	f04f 0400 	mov.w	r4, #0
 800193a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	ea03 0501 	and.w	r5, r3, r1
 8001946:	ea04 0602 	and.w	r6, r4, r2
 800194a:	4629      	mov	r1, r5
 800194c:	4632      	mov	r2, r6
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	f04f 0400 	mov.w	r4, #0
 8001956:	0154      	lsls	r4, r2, #5
 8001958:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800195c:	014b      	lsls	r3, r1, #5
 800195e:	4619      	mov	r1, r3
 8001960:	4622      	mov	r2, r4
 8001962:	1b49      	subs	r1, r1, r5
 8001964:	eb62 0206 	sbc.w	r2, r2, r6
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f04f 0400 	mov.w	r4, #0
 8001970:	0194      	lsls	r4, r2, #6
 8001972:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001976:	018b      	lsls	r3, r1, #6
 8001978:	1a5b      	subs	r3, r3, r1
 800197a:	eb64 0402 	sbc.w	r4, r4, r2
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	00e2      	lsls	r2, r4, #3
 8001988:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800198c:	00d9      	lsls	r1, r3, #3
 800198e:	460b      	mov	r3, r1
 8001990:	4614      	mov	r4, r2
 8001992:	195b      	adds	r3, r3, r5
 8001994:	eb44 0406 	adc.w	r4, r4, r6
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	02a2      	lsls	r2, r4, #10
 80019a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019a6:	0299      	lsls	r1, r3, #10
 80019a8:	460b      	mov	r3, r1
 80019aa:	4614      	mov	r4, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	4621      	mov	r1, r4
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f04f 0400 	mov.w	r4, #0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4623      	mov	r3, r4
 80019ba:	f7fe fc0d 	bl	80001d8 <__aeabi_uldivmod>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	3301      	adds	r3, #1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	60bb      	str	r3, [r7, #8]
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019e2:	60bb      	str	r3, [r7, #8]
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	68bb      	ldr	r3, [r7, #8]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	00f42400 	.word	0x00f42400
 80019f8:	007a1200 	.word	0x007a1200

080019fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a18:	f7ff fff0 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0a9b      	lsrs	r3, r3, #10
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08002b00 	.word	0x08002b00

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a40:	f7ff ffdc 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a44:	4601      	mov	r1, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	0b5b      	lsrs	r3, r3, #13
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08002b00 	.word	0x08002b00

08001a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e056      	b.n	8001b24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d106      	bne.n	8001a96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7fe fedd 	bl	8000850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	ea42 0103 	orr.w	r1, r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	f003 0104 	and.w	r1, r3, #4
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_SPI_Transmit+0x22>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e11e      	b.n	8001d8c <HAL_SPI_Transmit+0x260>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b56:	f7ff f80d 	bl	8000b74 <HAL_GetTick>
 8001b5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d002      	beq.n	8001b72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b70:	e103      	b.n	8001d7a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_SPI_Transmit+0x52>
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b82:	e0fa      	b.n	8001d7a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2203      	movs	r2, #3
 8001b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bca:	d107      	bne.n	8001bdc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d007      	beq.n	8001bfa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c02:	d14b      	bne.n	8001c9c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_SPI_Transmit+0xe6>
 8001c0c:	8afb      	ldrh	r3, [r7, #22]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d13e      	bne.n	8001c90 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	1c9a      	adds	r2, r3, #2
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c36:	e02b      	b.n	8001c90 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d112      	bne.n	8001c6c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	1c9a      	adds	r2, r3, #2
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c6a:	e011      	b.n	8001c90 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c6c:	f7fe ff82 	bl	8000b74 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d803      	bhi.n	8001c84 <HAL_SPI_Transmit+0x158>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c82:	d102      	bne.n	8001c8a <HAL_SPI_Transmit+0x15e>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c8e:	e074      	b.n	8001d7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1ce      	bne.n	8001c38 <HAL_SPI_Transmit+0x10c>
 8001c9a:	e04c      	b.n	8001d36 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_SPI_Transmit+0x17e>
 8001ca4:	8afb      	ldrh	r3, [r7, #22]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d140      	bne.n	8001d2c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	330c      	adds	r3, #12
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cd0:	e02c      	b.n	8001d2c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d113      	bne.n	8001d08 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	7812      	ldrb	r2, [r2, #0]
 8001cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d06:	e011      	b.n	8001d2c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d08:	f7fe ff34 	bl	8000b74 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d803      	bhi.n	8001d20 <HAL_SPI_Transmit+0x1f4>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	d102      	bne.n	8001d26 <HAL_SPI_Transmit+0x1fa>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d2a:	e026      	b.n	8001d7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1cd      	bne.n	8001cd2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f9b2 	bl	80020a4 <SPI_EndRxTxTransaction>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10a      	bne.n	8001d6a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	77fb      	strb	r3, [r7, #31]
 8001d76:	e000      	b.n	8001d7a <HAL_SPI_Transmit+0x24e>
  }

error:
 8001d78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	099b      	lsrs	r3, r3, #6
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10f      	bne.n	8001dd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	099b      	lsrs	r3, r3, #6
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
    return;
 8001dd6:	e0d8      	b.n	8001f8a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00a      	beq.n	8001dfa <HAL_SPI_IRQHandler+0x66>
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	09db      	lsrs	r3, r3, #7
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
    return;
 8001df8:	e0c7      	b.n	8001f8a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_SPI_IRQHandler+0x8c>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80b5 	beq.w	8001f8a <HAL_SPI_IRQHandler+0x1f6>
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80ae 	beq.w	8001f8a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d023      	beq.n	8001e82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d011      	beq.n	8001e6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	e00b      	b.n	8001e82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
        return;
 8001e80:	e083      	b.n	8001f8a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d014      	beq.n	8001eb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00c      	beq.n	8001ede <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f043 0208 	orr.w	r2, r3, #8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d050      	beq.n	8001f88 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ef4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <HAL_SPI_IRQHandler+0x17e>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d034      	beq.n	8001f7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0203 	bic.w	r2, r2, #3
 8001f20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_SPI_IRQHandler+0x1fc>)
 8001f30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe ff5b 	bl	8000df2 <HAL_DMA_Abort_IT>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HAL_SPI_IRQHandler+0x1fc>)
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe ff45 	bl	8000df2 <HAL_DMA_Abort_IT>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001f7a:	e003      	b.n	8001f84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f809 	bl	8001f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f82:	e000      	b.n	8001f86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8001f84:	bf00      	nop
    return;
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
  }
}
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	08001fa9 	.word	0x08001fa9

08001f94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff ffe6 	bl	8001f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fe0:	e04c      	b.n	800207c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d048      	beq.n	800207c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001fea:	f7fe fdc3 	bl	8000b74 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d902      	bls.n	8002000 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d13d      	bne.n	800207c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800200e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002018:	d111      	bne.n	800203e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002022:	d004      	beq.n	800202e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d107      	bne.n	800203e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002046:	d10f      	bne.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e00f      	b.n	800209c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4013      	ands	r3, r2
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	429a      	cmp	r2, r3
 8002098:	d1a3      	bne.n	8001fe2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <SPI_EndRxTxTransaction+0x7c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <SPI_EndRxTxTransaction+0x80>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0d5b      	lsrs	r3, r3, #21
 80020bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ce:	d112      	bne.n	80020f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff ff78 	bl	8001fd0 <SPI_WaitFlagStateUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e00f      	b.n	8002116 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3b01      	subs	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d0f2      	beq.n	80020f6 <SPI_EndRxTxTransaction+0x52>
 8002110:	e000      	b.n	8002114 <SPI_EndRxTxTransaction+0x70>
        break;
 8002112:	bf00      	nop
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000004 	.word	0x20000004
 8002124:	165e9f81 	.word	0x165e9f81

08002128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e03f      	b.n	80021ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fbee 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800216a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f90b 	bl	8002388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	f040 8083 	bne.w	80022ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_UART_Transmit+0x2e>
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e07b      	b.n	80022ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Transmit+0x40>
 80021fe:	2302      	movs	r3, #2
 8002200:	e074      	b.n	80022ec <HAL_UART_Transmit+0x12a>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2221      	movs	r2, #33	; 0x21
 8002214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002218:	f7fe fcac 	bl	8000b74 <HAL_GetTick>
 800221c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	88fa      	ldrh	r2, [r7, #6]
 8002222:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002232:	e042      	b.n	80022ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224a:	d122      	bne.n	8002292 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2200      	movs	r2, #0
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f84c 	bl	80022f4 <UART_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e042      	b.n	80022ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002278:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3302      	adds	r3, #2
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	e017      	b.n	80022ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	e013      	b.n	80022ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f829 	bl	80022f4 <UART_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e01f      	b.n	80022ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1b7      	bne.n	8002234 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2200      	movs	r2, #0
 80022cc:	2140      	movs	r1, #64	; 0x40
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f810 	bl	80022f4 <UART_WaitOnFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e006      	b.n	80022ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002304:	e02c      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d028      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <UART_WaitOnFlagUntilTimeout+0x30>
 8002314:	f7fe fc2e 	bl	8000b74 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	429a      	cmp	r2, r3
 8002322:	d21d      	bcs.n	8002360 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002332:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e00f      	b.n	8002380 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	d0c3      	beq.n	8002306 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023ca:	f023 030c 	bic.w	r3, r3, #12
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f6:	f040 818b 	bne.w	8002710 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4ac1      	ldr	r2, [pc, #772]	; (8002704 <UART_SetConfig+0x37c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d005      	beq.n	8002410 <UART_SetConfig+0x88>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4abf      	ldr	r2, [pc, #764]	; (8002708 <UART_SetConfig+0x380>)
 800240a:	4293      	cmp	r3, r2
 800240c:	f040 80bd 	bne.w	800258a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002410:	f7ff fb14 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8002414:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	461d      	mov	r5, r3
 800241a:	f04f 0600 	mov.w	r6, #0
 800241e:	46a8      	mov	r8, r5
 8002420:	46b1      	mov	r9, r6
 8002422:	eb18 0308 	adds.w	r3, r8, r8
 8002426:	eb49 0409 	adc.w	r4, r9, r9
 800242a:	4698      	mov	r8, r3
 800242c:	46a1      	mov	r9, r4
 800242e:	eb18 0805 	adds.w	r8, r8, r5
 8002432:	eb49 0906 	adc.w	r9, r9, r6
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002442:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002446:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800244a:	4688      	mov	r8, r1
 800244c:	4691      	mov	r9, r2
 800244e:	eb18 0005 	adds.w	r0, r8, r5
 8002452:	eb49 0106 	adc.w	r1, r9, r6
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	461d      	mov	r5, r3
 800245c:	f04f 0600 	mov.w	r6, #0
 8002460:	196b      	adds	r3, r5, r5
 8002462:	eb46 0406 	adc.w	r4, r6, r6
 8002466:	461a      	mov	r2, r3
 8002468:	4623      	mov	r3, r4
 800246a:	f7fd feb5 	bl	80001d8 <__aeabi_uldivmod>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	461a      	mov	r2, r3
 8002474:	4ba5      	ldr	r3, [pc, #660]	; (800270c <UART_SetConfig+0x384>)
 8002476:	fba3 2302 	umull	r2, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	461d      	mov	r5, r3
 8002484:	f04f 0600 	mov.w	r6, #0
 8002488:	46a9      	mov	r9, r5
 800248a:	46b2      	mov	sl, r6
 800248c:	eb19 0309 	adds.w	r3, r9, r9
 8002490:	eb4a 040a 	adc.w	r4, sl, sl
 8002494:	4699      	mov	r9, r3
 8002496:	46a2      	mov	sl, r4
 8002498:	eb19 0905 	adds.w	r9, r9, r5
 800249c:	eb4a 0a06 	adc.w	sl, sl, r6
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024b4:	4689      	mov	r9, r1
 80024b6:	4692      	mov	sl, r2
 80024b8:	eb19 0005 	adds.w	r0, r9, r5
 80024bc:	eb4a 0106 	adc.w	r1, sl, r6
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	461d      	mov	r5, r3
 80024c6:	f04f 0600 	mov.w	r6, #0
 80024ca:	196b      	adds	r3, r5, r5
 80024cc:	eb46 0406 	adc.w	r4, r6, r6
 80024d0:	461a      	mov	r2, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	f7fd fe80 	bl	80001d8 <__aeabi_uldivmod>
 80024d8:	4603      	mov	r3, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	461a      	mov	r2, r3
 80024de:	4b8b      	ldr	r3, [pc, #556]	; (800270c <UART_SetConfig+0x384>)
 80024e0:	fba3 1302 	umull	r1, r3, r3, r2
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	2164      	movs	r1, #100	; 0x64
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3332      	adds	r3, #50	; 0x32
 80024f2:	4a86      	ldr	r2, [pc, #536]	; (800270c <UART_SetConfig+0x384>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002500:	4498      	add	r8, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	461d      	mov	r5, r3
 8002506:	f04f 0600 	mov.w	r6, #0
 800250a:	46a9      	mov	r9, r5
 800250c:	46b2      	mov	sl, r6
 800250e:	eb19 0309 	adds.w	r3, r9, r9
 8002512:	eb4a 040a 	adc.w	r4, sl, sl
 8002516:	4699      	mov	r9, r3
 8002518:	46a2      	mov	sl, r4
 800251a:	eb19 0905 	adds.w	r9, r9, r5
 800251e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800252e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002532:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002536:	4689      	mov	r9, r1
 8002538:	4692      	mov	sl, r2
 800253a:	eb19 0005 	adds.w	r0, r9, r5
 800253e:	eb4a 0106 	adc.w	r1, sl, r6
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	461d      	mov	r5, r3
 8002548:	f04f 0600 	mov.w	r6, #0
 800254c:	196b      	adds	r3, r5, r5
 800254e:	eb46 0406 	adc.w	r4, r6, r6
 8002552:	461a      	mov	r2, r3
 8002554:	4623      	mov	r3, r4
 8002556:	f7fd fe3f 	bl	80001d8 <__aeabi_uldivmod>
 800255a:	4603      	mov	r3, r0
 800255c:	460c      	mov	r4, r1
 800255e:	461a      	mov	r2, r3
 8002560:	4b6a      	ldr	r3, [pc, #424]	; (800270c <UART_SetConfig+0x384>)
 8002562:	fba3 1302 	umull	r1, r3, r3, r2
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2164      	movs	r1, #100	; 0x64
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	3332      	adds	r3, #50	; 0x32
 8002574:	4a65      	ldr	r2, [pc, #404]	; (800270c <UART_SetConfig+0x384>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	f003 0207 	and.w	r2, r3, #7
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4442      	add	r2, r8
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e26f      	b.n	8002a6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800258a:	f7ff fa43 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 800258e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	461d      	mov	r5, r3
 8002594:	f04f 0600 	mov.w	r6, #0
 8002598:	46a8      	mov	r8, r5
 800259a:	46b1      	mov	r9, r6
 800259c:	eb18 0308 	adds.w	r3, r8, r8
 80025a0:	eb49 0409 	adc.w	r4, r9, r9
 80025a4:	4698      	mov	r8, r3
 80025a6:	46a1      	mov	r9, r4
 80025a8:	eb18 0805 	adds.w	r8, r8, r5
 80025ac:	eb49 0906 	adc.w	r9, r9, r6
 80025b0:	f04f 0100 	mov.w	r1, #0
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025c4:	4688      	mov	r8, r1
 80025c6:	4691      	mov	r9, r2
 80025c8:	eb18 0005 	adds.w	r0, r8, r5
 80025cc:	eb49 0106 	adc.w	r1, r9, r6
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	461d      	mov	r5, r3
 80025d6:	f04f 0600 	mov.w	r6, #0
 80025da:	196b      	adds	r3, r5, r5
 80025dc:	eb46 0406 	adc.w	r4, r6, r6
 80025e0:	461a      	mov	r2, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	f7fd fdf8 	bl	80001d8 <__aeabi_uldivmod>
 80025e8:	4603      	mov	r3, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <UART_SetConfig+0x384>)
 80025f0:	fba3 2302 	umull	r2, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	461d      	mov	r5, r3
 80025fe:	f04f 0600 	mov.w	r6, #0
 8002602:	46a9      	mov	r9, r5
 8002604:	46b2      	mov	sl, r6
 8002606:	eb19 0309 	adds.w	r3, r9, r9
 800260a:	eb4a 040a 	adc.w	r4, sl, sl
 800260e:	4699      	mov	r9, r3
 8002610:	46a2      	mov	sl, r4
 8002612:	eb19 0905 	adds.w	r9, r9, r5
 8002616:	eb4a 0a06 	adc.w	sl, sl, r6
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002626:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800262a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800262e:	4689      	mov	r9, r1
 8002630:	4692      	mov	sl, r2
 8002632:	eb19 0005 	adds.w	r0, r9, r5
 8002636:	eb4a 0106 	adc.w	r1, sl, r6
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	461d      	mov	r5, r3
 8002640:	f04f 0600 	mov.w	r6, #0
 8002644:	196b      	adds	r3, r5, r5
 8002646:	eb46 0406 	adc.w	r4, r6, r6
 800264a:	461a      	mov	r2, r3
 800264c:	4623      	mov	r3, r4
 800264e:	f7fd fdc3 	bl	80001d8 <__aeabi_uldivmod>
 8002652:	4603      	mov	r3, r0
 8002654:	460c      	mov	r4, r1
 8002656:	461a      	mov	r2, r3
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <UART_SetConfig+0x384>)
 800265a:	fba3 1302 	umull	r1, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2164      	movs	r1, #100	; 0x64
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <UART_SetConfig+0x384>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800267a:	4498      	add	r8, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	461d      	mov	r5, r3
 8002680:	f04f 0600 	mov.w	r6, #0
 8002684:	46a9      	mov	r9, r5
 8002686:	46b2      	mov	sl, r6
 8002688:	eb19 0309 	adds.w	r3, r9, r9
 800268c:	eb4a 040a 	adc.w	r4, sl, sl
 8002690:	4699      	mov	r9, r3
 8002692:	46a2      	mov	sl, r4
 8002694:	eb19 0905 	adds.w	r9, r9, r5
 8002698:	eb4a 0a06 	adc.w	sl, sl, r6
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026b0:	4689      	mov	r9, r1
 80026b2:	4692      	mov	sl, r2
 80026b4:	eb19 0005 	adds.w	r0, r9, r5
 80026b8:	eb4a 0106 	adc.w	r1, sl, r6
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	461d      	mov	r5, r3
 80026c2:	f04f 0600 	mov.w	r6, #0
 80026c6:	196b      	adds	r3, r5, r5
 80026c8:	eb46 0406 	adc.w	r4, r6, r6
 80026cc:	461a      	mov	r2, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	f7fd fd82 	bl	80001d8 <__aeabi_uldivmod>
 80026d4:	4603      	mov	r3, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	461a      	mov	r2, r3
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <UART_SetConfig+0x384>)
 80026dc:	fba3 1302 	umull	r1, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	2164      	movs	r1, #100	; 0x64
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	3332      	adds	r3, #50	; 0x32
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <UART_SetConfig+0x384>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	f003 0207 	and.w	r2, r3, #7
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4442      	add	r2, r8
 8002700:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002702:	e1b2      	b.n	8002a6a <UART_SetConfig+0x6e2>
 8002704:	40011000 	.word	0x40011000
 8002708:	40011400 	.word	0x40011400
 800270c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4ad7      	ldr	r2, [pc, #860]	; (8002a74 <UART_SetConfig+0x6ec>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d005      	beq.n	8002726 <UART_SetConfig+0x39e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4ad6      	ldr	r2, [pc, #856]	; (8002a78 <UART_SetConfig+0x6f0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	f040 80d1 	bne.w	80028c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002726:	f7ff f989 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 800272a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	469a      	mov	sl, r3
 8002730:	f04f 0b00 	mov.w	fp, #0
 8002734:	46d0      	mov	r8, sl
 8002736:	46d9      	mov	r9, fp
 8002738:	eb18 0308 	adds.w	r3, r8, r8
 800273c:	eb49 0409 	adc.w	r4, r9, r9
 8002740:	4698      	mov	r8, r3
 8002742:	46a1      	mov	r9, r4
 8002744:	eb18 080a 	adds.w	r8, r8, sl
 8002748:	eb49 090b 	adc.w	r9, r9, fp
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002758:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800275c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002760:	4688      	mov	r8, r1
 8002762:	4691      	mov	r9, r2
 8002764:	eb1a 0508 	adds.w	r5, sl, r8
 8002768:	eb4b 0609 	adc.w	r6, fp, r9
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	0094      	lsls	r4, r2, #2
 8002780:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002784:	008b      	lsls	r3, r1, #2
 8002786:	461a      	mov	r2, r3
 8002788:	4623      	mov	r3, r4
 800278a:	4628      	mov	r0, r5
 800278c:	4631      	mov	r1, r6
 800278e:	f7fd fd23 	bl	80001d8 <__aeabi_uldivmod>
 8002792:	4603      	mov	r3, r0
 8002794:	460c      	mov	r4, r1
 8002796:	461a      	mov	r2, r3
 8002798:	4bb8      	ldr	r3, [pc, #736]	; (8002a7c <UART_SetConfig+0x6f4>)
 800279a:	fba3 2302 	umull	r2, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	469b      	mov	fp, r3
 80027a8:	f04f 0c00 	mov.w	ip, #0
 80027ac:	46d9      	mov	r9, fp
 80027ae:	46e2      	mov	sl, ip
 80027b0:	eb19 0309 	adds.w	r3, r9, r9
 80027b4:	eb4a 040a 	adc.w	r4, sl, sl
 80027b8:	4699      	mov	r9, r3
 80027ba:	46a2      	mov	sl, r4
 80027bc:	eb19 090b 	adds.w	r9, r9, fp
 80027c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027d8:	4689      	mov	r9, r1
 80027da:	4692      	mov	sl, r2
 80027dc:	eb1b 0509 	adds.w	r5, fp, r9
 80027e0:	eb4c 060a 	adc.w	r6, ip, sl
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4619      	mov	r1, r3
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	f04f 0400 	mov.w	r4, #0
 80027f6:	0094      	lsls	r4, r2, #2
 80027f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027fc:	008b      	lsls	r3, r1, #2
 80027fe:	461a      	mov	r2, r3
 8002800:	4623      	mov	r3, r4
 8002802:	4628      	mov	r0, r5
 8002804:	4631      	mov	r1, r6
 8002806:	f7fd fce7 	bl	80001d8 <__aeabi_uldivmod>
 800280a:	4603      	mov	r3, r0
 800280c:	460c      	mov	r4, r1
 800280e:	461a      	mov	r2, r3
 8002810:	4b9a      	ldr	r3, [pc, #616]	; (8002a7c <UART_SetConfig+0x6f4>)
 8002812:	fba3 1302 	umull	r1, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2164      	movs	r1, #100	; 0x64
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	3332      	adds	r3, #50	; 0x32
 8002824:	4a95      	ldr	r2, [pc, #596]	; (8002a7c <UART_SetConfig+0x6f4>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	4498      	add	r8, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	469b      	mov	fp, r3
 8002836:	f04f 0c00 	mov.w	ip, #0
 800283a:	46d9      	mov	r9, fp
 800283c:	46e2      	mov	sl, ip
 800283e:	eb19 0309 	adds.w	r3, r9, r9
 8002842:	eb4a 040a 	adc.w	r4, sl, sl
 8002846:	4699      	mov	r9, r3
 8002848:	46a2      	mov	sl, r4
 800284a:	eb19 090b 	adds.w	r9, r9, fp
 800284e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800285e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002866:	4689      	mov	r9, r1
 8002868:	4692      	mov	sl, r2
 800286a:	eb1b 0509 	adds.w	r5, fp, r9
 800286e:	eb4c 060a 	adc.w	r6, ip, sl
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	f04f 0400 	mov.w	r4, #0
 8002884:	0094      	lsls	r4, r2, #2
 8002886:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800288a:	008b      	lsls	r3, r1, #2
 800288c:	461a      	mov	r2, r3
 800288e:	4623      	mov	r3, r4
 8002890:	4628      	mov	r0, r5
 8002892:	4631      	mov	r1, r6
 8002894:	f7fd fca0 	bl	80001d8 <__aeabi_uldivmod>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	461a      	mov	r2, r3
 800289e:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <UART_SetConfig+0x6f4>)
 80028a0:	fba3 1302 	umull	r1, r3, r3, r2
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	2164      	movs	r1, #100	; 0x64
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	3332      	adds	r3, #50	; 0x32
 80028b2:	4a72      	ldr	r2, [pc, #456]	; (8002a7c <UART_SetConfig+0x6f4>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4442      	add	r2, r8
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	e0d0      	b.n	8002a6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c8:	f7ff f8a4 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 80028cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	469a      	mov	sl, r3
 80028d2:	f04f 0b00 	mov.w	fp, #0
 80028d6:	46d0      	mov	r8, sl
 80028d8:	46d9      	mov	r9, fp
 80028da:	eb18 0308 	adds.w	r3, r8, r8
 80028de:	eb49 0409 	adc.w	r4, r9, r9
 80028e2:	4698      	mov	r8, r3
 80028e4:	46a1      	mov	r9, r4
 80028e6:	eb18 080a 	adds.w	r8, r8, sl
 80028ea:	eb49 090b 	adc.w	r9, r9, fp
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002902:	4688      	mov	r8, r1
 8002904:	4691      	mov	r9, r2
 8002906:	eb1a 0508 	adds.w	r5, sl, r8
 800290a:	eb4b 0609 	adc.w	r6, fp, r9
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4619      	mov	r1, r3
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f04f 0400 	mov.w	r4, #0
 8002920:	0094      	lsls	r4, r2, #2
 8002922:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002926:	008b      	lsls	r3, r1, #2
 8002928:	461a      	mov	r2, r3
 800292a:	4623      	mov	r3, r4
 800292c:	4628      	mov	r0, r5
 800292e:	4631      	mov	r1, r6
 8002930:	f7fd fc52 	bl	80001d8 <__aeabi_uldivmod>
 8002934:	4603      	mov	r3, r0
 8002936:	460c      	mov	r4, r1
 8002938:	461a      	mov	r2, r3
 800293a:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <UART_SetConfig+0x6f4>)
 800293c:	fba3 2302 	umull	r2, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	469b      	mov	fp, r3
 800294a:	f04f 0c00 	mov.w	ip, #0
 800294e:	46d9      	mov	r9, fp
 8002950:	46e2      	mov	sl, ip
 8002952:	eb19 0309 	adds.w	r3, r9, r9
 8002956:	eb4a 040a 	adc.w	r4, sl, sl
 800295a:	4699      	mov	r9, r3
 800295c:	46a2      	mov	sl, r4
 800295e:	eb19 090b 	adds.w	r9, r9, fp
 8002962:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002972:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002976:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800297a:	4689      	mov	r9, r1
 800297c:	4692      	mov	sl, r2
 800297e:	eb1b 0509 	adds.w	r5, fp, r9
 8002982:	eb4c 060a 	adc.w	r6, ip, sl
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4619      	mov	r1, r3
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	f04f 0400 	mov.w	r4, #0
 8002998:	0094      	lsls	r4, r2, #2
 800299a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800299e:	008b      	lsls	r3, r1, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4623      	mov	r3, r4
 80029a4:	4628      	mov	r0, r5
 80029a6:	4631      	mov	r1, r6
 80029a8:	f7fd fc16 	bl	80001d8 <__aeabi_uldivmod>
 80029ac:	4603      	mov	r3, r0
 80029ae:	460c      	mov	r4, r1
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <UART_SetConfig+0x6f4>)
 80029b4:	fba3 1302 	umull	r1, r3, r3, r2
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	2164      	movs	r1, #100	; 0x64
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	3332      	adds	r3, #50	; 0x32
 80029c6:	4a2d      	ldr	r2, [pc, #180]	; (8002a7c <UART_SetConfig+0x6f4>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d2:	4498      	add	r8, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	469b      	mov	fp, r3
 80029d8:	f04f 0c00 	mov.w	ip, #0
 80029dc:	46d9      	mov	r9, fp
 80029de:	46e2      	mov	sl, ip
 80029e0:	eb19 0309 	adds.w	r3, r9, r9
 80029e4:	eb4a 040a 	adc.w	r4, sl, sl
 80029e8:	4699      	mov	r9, r3
 80029ea:	46a2      	mov	sl, r4
 80029ec:	eb19 090b 	adds.w	r9, r9, fp
 80029f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a08:	4689      	mov	r9, r1
 8002a0a:	4692      	mov	sl, r2
 8002a0c:	eb1b 0509 	adds.w	r5, fp, r9
 8002a10:	eb4c 060a 	adc.w	r6, ip, sl
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	f04f 0400 	mov.w	r4, #0
 8002a26:	0094      	lsls	r4, r2, #2
 8002a28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a2c:	008b      	lsls	r3, r1, #2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4623      	mov	r3, r4
 8002a32:	4628      	mov	r0, r5
 8002a34:	4631      	mov	r1, r6
 8002a36:	f7fd fbcf 	bl	80001d8 <__aeabi_uldivmod>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <UART_SetConfig+0x6f4>)
 8002a42:	fba3 1302 	umull	r1, r3, r3, r2
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2164      	movs	r1, #100	; 0x64
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	3332      	adds	r3, #50	; 0x32
 8002a54:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <UART_SetConfig+0x6f4>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	f003 020f 	and.w	r2, r3, #15
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4442      	add	r2, r8
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	e7ff      	b.n	8002a6a <UART_SetConfig+0x6e2>
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a74:	40011000 	.word	0x40011000
 8002a78:	40011400 	.word	0x40011400
 8002a7c:	51eb851f 	.word	0x51eb851f

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	4e0d      	ldr	r6, [pc, #52]	; (8002ab8 <__libc_init_array+0x38>)
 8002a84:	4c0d      	ldr	r4, [pc, #52]	; (8002abc <__libc_init_array+0x3c>)
 8002a86:	1ba4      	subs	r4, r4, r6
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	42a5      	cmp	r5, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	4e0b      	ldr	r6, [pc, #44]	; (8002ac0 <__libc_init_array+0x40>)
 8002a92:	4c0c      	ldr	r4, [pc, #48]	; (8002ac4 <__libc_init_array+0x44>)
 8002a94:	f000 f820 	bl	8002ad8 <_init>
 8002a98:	1ba4      	subs	r4, r4, r6
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	42a5      	cmp	r5, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aa8:	4798      	blx	r3
 8002aaa:	3501      	adds	r5, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ab2:	4798      	blx	r3
 8002ab4:	3501      	adds	r5, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	08002b10 	.word	0x08002b10
 8002abc:	08002b10 	.word	0x08002b10
 8002ac0:	08002b10 	.word	0x08002b10
 8002ac4:	08002b14 	.word	0x08002b14

08002ac8 <memset>:
 8002ac8:	4402      	add	r2, r0
 8002aca:	4603      	mov	r3, r0
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <_init>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	bf00      	nop
 8002adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ade:	bc08      	pop	{r3}
 8002ae0:	469e      	mov	lr, r3
 8002ae2:	4770      	bx	lr

08002ae4 <_fini>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	bf00      	nop
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr
